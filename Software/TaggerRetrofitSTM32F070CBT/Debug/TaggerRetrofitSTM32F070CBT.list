
TaggerRetrofitSTM32F070CBT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c60  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08005d20  08005d20  00015d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f60  08005f60  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005f60  08005f60  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f60  08005f60  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f60  08005f60  00015f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f64  08005f64  00015f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a90  20000010  08005f78  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001aa0  08005f78  00021aa0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001375c  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a3f  00000000  00000000  00033794  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001190  00000000  00000000  000361d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001050  00000000  00000000  00037368  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002700  00000000  00000000  000383b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e375  00000000  00000000  0003aab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d6d1  00000000  00000000  00048e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b64fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f4c  00000000  00000000  000b657c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005d08 	.word	0x08005d08

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08005d08 	.word	0x08005d08

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f000 f8d3 	bl	80003dc <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 f82b 	bl	800029c <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 f8c5 	bl	80003dc <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 f8bb 	bl	80003dc <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 f84d 	bl	8000314 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 f843 	bl	8000314 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__eqdf2>:
 800029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029e:	464f      	mov	r7, r9
 80002a0:	4646      	mov	r6, r8
 80002a2:	46d6      	mov	lr, sl
 80002a4:	4684      	mov	ip, r0
 80002a6:	b5c0      	push	{r6, r7, lr}
 80002a8:	4680      	mov	r8, r0
 80002aa:	4e19      	ldr	r6, [pc, #100]	; (8000310 <__eqdf2+0x74>)
 80002ac:	0318      	lsls	r0, r3, #12
 80002ae:	030f      	lsls	r7, r1, #12
 80002b0:	004d      	lsls	r5, r1, #1
 80002b2:	0b00      	lsrs	r0, r0, #12
 80002b4:	005c      	lsls	r4, r3, #1
 80002b6:	4682      	mov	sl, r0
 80002b8:	0b3f      	lsrs	r7, r7, #12
 80002ba:	0d6d      	lsrs	r5, r5, #21
 80002bc:	0fc9      	lsrs	r1, r1, #31
 80002be:	4691      	mov	r9, r2
 80002c0:	0d64      	lsrs	r4, r4, #21
 80002c2:	0fdb      	lsrs	r3, r3, #31
 80002c4:	2001      	movs	r0, #1
 80002c6:	42b5      	cmp	r5, r6
 80002c8:	d00a      	beq.n	80002e0 <__eqdf2+0x44>
 80002ca:	42b4      	cmp	r4, r6
 80002cc:	d003      	beq.n	80002d6 <__eqdf2+0x3a>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d101      	bne.n	80002d6 <__eqdf2+0x3a>
 80002d2:	4557      	cmp	r7, sl
 80002d4:	d00c      	beq.n	80002f0 <__eqdf2+0x54>
 80002d6:	bc1c      	pop	{r2, r3, r4}
 80002d8:	4690      	mov	r8, r2
 80002da:	4699      	mov	r9, r3
 80002dc:	46a2      	mov	sl, r4
 80002de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002e0:	4666      	mov	r6, ip
 80002e2:	433e      	orrs	r6, r7
 80002e4:	d1f7      	bne.n	80002d6 <__eqdf2+0x3a>
 80002e6:	42ac      	cmp	r4, r5
 80002e8:	d1f5      	bne.n	80002d6 <__eqdf2+0x3a>
 80002ea:	4654      	mov	r4, sl
 80002ec:	4314      	orrs	r4, r2
 80002ee:	d1f2      	bne.n	80002d6 <__eqdf2+0x3a>
 80002f0:	2001      	movs	r0, #1
 80002f2:	45c8      	cmp	r8, r9
 80002f4:	d1ef      	bne.n	80002d6 <__eqdf2+0x3a>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	d007      	beq.n	800030a <__eqdf2+0x6e>
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d1eb      	bne.n	80002d6 <__eqdf2+0x3a>
 80002fe:	4663      	mov	r3, ip
 8000300:	431f      	orrs	r7, r3
 8000302:	0038      	movs	r0, r7
 8000304:	1e47      	subs	r7, r0, #1
 8000306:	41b8      	sbcs	r0, r7
 8000308:	e7e5      	b.n	80002d6 <__eqdf2+0x3a>
 800030a:	2000      	movs	r0, #0
 800030c:	e7e3      	b.n	80002d6 <__eqdf2+0x3a>
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	000007ff 	.word	0x000007ff

08000314 <__gedf2>:
 8000314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000316:	464f      	mov	r7, r9
 8000318:	4646      	mov	r6, r8
 800031a:	46d6      	mov	lr, sl
 800031c:	004d      	lsls	r5, r1, #1
 800031e:	b5c0      	push	{r6, r7, lr}
 8000320:	030e      	lsls	r6, r1, #12
 8000322:	0fc9      	lsrs	r1, r1, #31
 8000324:	468a      	mov	sl, r1
 8000326:	492c      	ldr	r1, [pc, #176]	; (80003d8 <__gedf2+0xc4>)
 8000328:	031f      	lsls	r7, r3, #12
 800032a:	005c      	lsls	r4, r3, #1
 800032c:	4680      	mov	r8, r0
 800032e:	0b36      	lsrs	r6, r6, #12
 8000330:	0d6d      	lsrs	r5, r5, #21
 8000332:	4691      	mov	r9, r2
 8000334:	0b3f      	lsrs	r7, r7, #12
 8000336:	0d64      	lsrs	r4, r4, #21
 8000338:	0fdb      	lsrs	r3, r3, #31
 800033a:	428d      	cmp	r5, r1
 800033c:	d01e      	beq.n	800037c <__gedf2+0x68>
 800033e:	428c      	cmp	r4, r1
 8000340:	d016      	beq.n	8000370 <__gedf2+0x5c>
 8000342:	2d00      	cmp	r5, #0
 8000344:	d11e      	bne.n	8000384 <__gedf2+0x70>
 8000346:	4330      	orrs	r0, r6
 8000348:	4684      	mov	ip, r0
 800034a:	2c00      	cmp	r4, #0
 800034c:	d101      	bne.n	8000352 <__gedf2+0x3e>
 800034e:	433a      	orrs	r2, r7
 8000350:	d023      	beq.n	800039a <__gedf2+0x86>
 8000352:	4662      	mov	r2, ip
 8000354:	2a00      	cmp	r2, #0
 8000356:	d01a      	beq.n	800038e <__gedf2+0x7a>
 8000358:	459a      	cmp	sl, r3
 800035a:	d029      	beq.n	80003b0 <__gedf2+0x9c>
 800035c:	4651      	mov	r1, sl
 800035e:	2002      	movs	r0, #2
 8000360:	3901      	subs	r1, #1
 8000362:	4008      	ands	r0, r1
 8000364:	3801      	subs	r0, #1
 8000366:	bc1c      	pop	{r2, r3, r4}
 8000368:	4690      	mov	r8, r2
 800036a:	4699      	mov	r9, r3
 800036c:	46a2      	mov	sl, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	0039      	movs	r1, r7
 8000372:	4311      	orrs	r1, r2
 8000374:	d0e5      	beq.n	8000342 <__gedf2+0x2e>
 8000376:	2002      	movs	r0, #2
 8000378:	4240      	negs	r0, r0
 800037a:	e7f4      	b.n	8000366 <__gedf2+0x52>
 800037c:	4330      	orrs	r0, r6
 800037e:	d1fa      	bne.n	8000376 <__gedf2+0x62>
 8000380:	42ac      	cmp	r4, r5
 8000382:	d00f      	beq.n	80003a4 <__gedf2+0x90>
 8000384:	2c00      	cmp	r4, #0
 8000386:	d10f      	bne.n	80003a8 <__gedf2+0x94>
 8000388:	433a      	orrs	r2, r7
 800038a:	d0e7      	beq.n	800035c <__gedf2+0x48>
 800038c:	e00c      	b.n	80003a8 <__gedf2+0x94>
 800038e:	2201      	movs	r2, #1
 8000390:	3b01      	subs	r3, #1
 8000392:	4393      	bics	r3, r2
 8000394:	0018      	movs	r0, r3
 8000396:	3001      	adds	r0, #1
 8000398:	e7e5      	b.n	8000366 <__gedf2+0x52>
 800039a:	4663      	mov	r3, ip
 800039c:	2000      	movs	r0, #0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0e1      	beq.n	8000366 <__gedf2+0x52>
 80003a2:	e7db      	b.n	800035c <__gedf2+0x48>
 80003a4:	433a      	orrs	r2, r7
 80003a6:	d1e6      	bne.n	8000376 <__gedf2+0x62>
 80003a8:	459a      	cmp	sl, r3
 80003aa:	d1d7      	bne.n	800035c <__gedf2+0x48>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	dcd5      	bgt.n	800035c <__gedf2+0x48>
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	db05      	blt.n	80003c0 <__gedf2+0xac>
 80003b4:	42be      	cmp	r6, r7
 80003b6:	d8d1      	bhi.n	800035c <__gedf2+0x48>
 80003b8:	d008      	beq.n	80003cc <__gedf2+0xb8>
 80003ba:	2000      	movs	r0, #0
 80003bc:	42be      	cmp	r6, r7
 80003be:	d2d2      	bcs.n	8000366 <__gedf2+0x52>
 80003c0:	4650      	mov	r0, sl
 80003c2:	2301      	movs	r3, #1
 80003c4:	3801      	subs	r0, #1
 80003c6:	4398      	bics	r0, r3
 80003c8:	3001      	adds	r0, #1
 80003ca:	e7cc      	b.n	8000366 <__gedf2+0x52>
 80003cc:	45c8      	cmp	r8, r9
 80003ce:	d8c5      	bhi.n	800035c <__gedf2+0x48>
 80003d0:	2000      	movs	r0, #0
 80003d2:	45c8      	cmp	r8, r9
 80003d4:	d3f4      	bcc.n	80003c0 <__gedf2+0xac>
 80003d6:	e7c6      	b.n	8000366 <__gedf2+0x52>
 80003d8:	000007ff 	.word	0x000007ff

080003dc <__ledf2>:
 80003dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003de:	464f      	mov	r7, r9
 80003e0:	4646      	mov	r6, r8
 80003e2:	46d6      	mov	lr, sl
 80003e4:	004d      	lsls	r5, r1, #1
 80003e6:	b5c0      	push	{r6, r7, lr}
 80003e8:	030e      	lsls	r6, r1, #12
 80003ea:	0fc9      	lsrs	r1, r1, #31
 80003ec:	468a      	mov	sl, r1
 80003ee:	492e      	ldr	r1, [pc, #184]	; (80004a8 <__ledf2+0xcc>)
 80003f0:	031f      	lsls	r7, r3, #12
 80003f2:	005c      	lsls	r4, r3, #1
 80003f4:	4680      	mov	r8, r0
 80003f6:	0b36      	lsrs	r6, r6, #12
 80003f8:	0d6d      	lsrs	r5, r5, #21
 80003fa:	4691      	mov	r9, r2
 80003fc:	0b3f      	lsrs	r7, r7, #12
 80003fe:	0d64      	lsrs	r4, r4, #21
 8000400:	0fdb      	lsrs	r3, r3, #31
 8000402:	428d      	cmp	r5, r1
 8000404:	d018      	beq.n	8000438 <__ledf2+0x5c>
 8000406:	428c      	cmp	r4, r1
 8000408:	d011      	beq.n	800042e <__ledf2+0x52>
 800040a:	2d00      	cmp	r5, #0
 800040c:	d118      	bne.n	8000440 <__ledf2+0x64>
 800040e:	4330      	orrs	r0, r6
 8000410:	4684      	mov	ip, r0
 8000412:	2c00      	cmp	r4, #0
 8000414:	d11e      	bne.n	8000454 <__ledf2+0x78>
 8000416:	433a      	orrs	r2, r7
 8000418:	d11c      	bne.n	8000454 <__ledf2+0x78>
 800041a:	4663      	mov	r3, ip
 800041c:	2000      	movs	r0, #0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d030      	beq.n	8000484 <__ledf2+0xa8>
 8000422:	4651      	mov	r1, sl
 8000424:	2002      	movs	r0, #2
 8000426:	3901      	subs	r1, #1
 8000428:	4008      	ands	r0, r1
 800042a:	3801      	subs	r0, #1
 800042c:	e02a      	b.n	8000484 <__ledf2+0xa8>
 800042e:	0039      	movs	r1, r7
 8000430:	4311      	orrs	r1, r2
 8000432:	d0ea      	beq.n	800040a <__ledf2+0x2e>
 8000434:	2002      	movs	r0, #2
 8000436:	e025      	b.n	8000484 <__ledf2+0xa8>
 8000438:	4330      	orrs	r0, r6
 800043a:	d1fb      	bne.n	8000434 <__ledf2+0x58>
 800043c:	42ac      	cmp	r4, r5
 800043e:	d026      	beq.n	800048e <__ledf2+0xb2>
 8000440:	2c00      	cmp	r4, #0
 8000442:	d126      	bne.n	8000492 <__ledf2+0xb6>
 8000444:	433a      	orrs	r2, r7
 8000446:	d124      	bne.n	8000492 <__ledf2+0xb6>
 8000448:	4651      	mov	r1, sl
 800044a:	2002      	movs	r0, #2
 800044c:	3901      	subs	r1, #1
 800044e:	4008      	ands	r0, r1
 8000450:	3801      	subs	r0, #1
 8000452:	e017      	b.n	8000484 <__ledf2+0xa8>
 8000454:	4662      	mov	r2, ip
 8000456:	2a00      	cmp	r2, #0
 8000458:	d00f      	beq.n	800047a <__ledf2+0x9e>
 800045a:	459a      	cmp	sl, r3
 800045c:	d1e1      	bne.n	8000422 <__ledf2+0x46>
 800045e:	42a5      	cmp	r5, r4
 8000460:	db05      	blt.n	800046e <__ledf2+0x92>
 8000462:	42be      	cmp	r6, r7
 8000464:	d8dd      	bhi.n	8000422 <__ledf2+0x46>
 8000466:	d019      	beq.n	800049c <__ledf2+0xc0>
 8000468:	2000      	movs	r0, #0
 800046a:	42be      	cmp	r6, r7
 800046c:	d20a      	bcs.n	8000484 <__ledf2+0xa8>
 800046e:	4650      	mov	r0, sl
 8000470:	2301      	movs	r3, #1
 8000472:	3801      	subs	r0, #1
 8000474:	4398      	bics	r0, r3
 8000476:	3001      	adds	r0, #1
 8000478:	e004      	b.n	8000484 <__ledf2+0xa8>
 800047a:	2201      	movs	r2, #1
 800047c:	3b01      	subs	r3, #1
 800047e:	4393      	bics	r3, r2
 8000480:	0018      	movs	r0, r3
 8000482:	3001      	adds	r0, #1
 8000484:	bc1c      	pop	{r2, r3, r4}
 8000486:	4690      	mov	r8, r2
 8000488:	4699      	mov	r9, r3
 800048a:	46a2      	mov	sl, r4
 800048c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800048e:	433a      	orrs	r2, r7
 8000490:	d1d0      	bne.n	8000434 <__ledf2+0x58>
 8000492:	459a      	cmp	sl, r3
 8000494:	d1c5      	bne.n	8000422 <__ledf2+0x46>
 8000496:	42a5      	cmp	r5, r4
 8000498:	dcc3      	bgt.n	8000422 <__ledf2+0x46>
 800049a:	e7e0      	b.n	800045e <__ledf2+0x82>
 800049c:	45c8      	cmp	r8, r9
 800049e:	d8c0      	bhi.n	8000422 <__ledf2+0x46>
 80004a0:	2000      	movs	r0, #0
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d3e3      	bcc.n	800046e <__ledf2+0x92>
 80004a6:	e7ed      	b.n	8000484 <__ledf2+0xa8>
 80004a8:	000007ff 	.word	0x000007ff

080004ac <__aeabi_i2d>:
 80004ac:	b570      	push	{r4, r5, r6, lr}
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d02d      	beq.n	800050e <__aeabi_i2d+0x62>
 80004b2:	17c3      	asrs	r3, r0, #31
 80004b4:	18c5      	adds	r5, r0, r3
 80004b6:	405d      	eors	r5, r3
 80004b8:	0fc4      	lsrs	r4, r0, #31
 80004ba:	0028      	movs	r0, r5
 80004bc:	f000 f830 	bl	8000520 <__clzsi2>
 80004c0:	4b15      	ldr	r3, [pc, #84]	; (8000518 <__aeabi_i2d+0x6c>)
 80004c2:	1a1b      	subs	r3, r3, r0
 80004c4:	055b      	lsls	r3, r3, #21
 80004c6:	0d5b      	lsrs	r3, r3, #21
 80004c8:	280a      	cmp	r0, #10
 80004ca:	dd15      	ble.n	80004f8 <__aeabi_i2d+0x4c>
 80004cc:	380b      	subs	r0, #11
 80004ce:	4085      	lsls	r5, r0
 80004d0:	2200      	movs	r2, #0
 80004d2:	032d      	lsls	r5, r5, #12
 80004d4:	0b2d      	lsrs	r5, r5, #12
 80004d6:	2100      	movs	r1, #0
 80004d8:	0010      	movs	r0, r2
 80004da:	032d      	lsls	r5, r5, #12
 80004dc:	0d0a      	lsrs	r2, r1, #20
 80004de:	0b2d      	lsrs	r5, r5, #12
 80004e0:	0512      	lsls	r2, r2, #20
 80004e2:	432a      	orrs	r2, r5
 80004e4:	4d0d      	ldr	r5, [pc, #52]	; (800051c <__aeabi_i2d+0x70>)
 80004e6:	051b      	lsls	r3, r3, #20
 80004e8:	402a      	ands	r2, r5
 80004ea:	4313      	orrs	r3, r2
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	07e4      	lsls	r4, r4, #31
 80004f0:	085b      	lsrs	r3, r3, #1
 80004f2:	4323      	orrs	r3, r4
 80004f4:	0019      	movs	r1, r3
 80004f6:	bd70      	pop	{r4, r5, r6, pc}
 80004f8:	0002      	movs	r2, r0
 80004fa:	0029      	movs	r1, r5
 80004fc:	3215      	adds	r2, #21
 80004fe:	4091      	lsls	r1, r2
 8000500:	000a      	movs	r2, r1
 8000502:	210b      	movs	r1, #11
 8000504:	1a08      	subs	r0, r1, r0
 8000506:	40c5      	lsrs	r5, r0
 8000508:	032d      	lsls	r5, r5, #12
 800050a:	0b2d      	lsrs	r5, r5, #12
 800050c:	e7e3      	b.n	80004d6 <__aeabi_i2d+0x2a>
 800050e:	2400      	movs	r4, #0
 8000510:	2300      	movs	r3, #0
 8000512:	2500      	movs	r5, #0
 8000514:	2200      	movs	r2, #0
 8000516:	e7de      	b.n	80004d6 <__aeabi_i2d+0x2a>
 8000518:	0000041e 	.word	0x0000041e
 800051c:	800fffff 	.word	0x800fffff

08000520 <__clzsi2>:
 8000520:	211c      	movs	r1, #28
 8000522:	2301      	movs	r3, #1
 8000524:	041b      	lsls	r3, r3, #16
 8000526:	4298      	cmp	r0, r3
 8000528:	d301      	bcc.n	800052e <__clzsi2+0xe>
 800052a:	0c00      	lsrs	r0, r0, #16
 800052c:	3910      	subs	r1, #16
 800052e:	0a1b      	lsrs	r3, r3, #8
 8000530:	4298      	cmp	r0, r3
 8000532:	d301      	bcc.n	8000538 <__clzsi2+0x18>
 8000534:	0a00      	lsrs	r0, r0, #8
 8000536:	3908      	subs	r1, #8
 8000538:	091b      	lsrs	r3, r3, #4
 800053a:	4298      	cmp	r0, r3
 800053c:	d301      	bcc.n	8000542 <__clzsi2+0x22>
 800053e:	0900      	lsrs	r0, r0, #4
 8000540:	3904      	subs	r1, #4
 8000542:	a202      	add	r2, pc, #8	; (adr r2, 800054c <__clzsi2+0x2c>)
 8000544:	5c10      	ldrb	r0, [r2, r0]
 8000546:	1840      	adds	r0, r0, r1
 8000548:	4770      	bx	lr
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	02020304 	.word	0x02020304
 8000550:	01010101 	.word	0x01010101
	...

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000560:	f000 fde0 	bl	8001124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000564:	f000 f86e 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000568:	f000 f93a 	bl	80007e0 <MX_GPIO_Init>
  MX_TIM3_Init();
 800056c:	f000 f8b6 	bl	80006dc <MX_TIM3_Init>
  MX_TIM6_Init();
 8000570:	f000 f916 	bl	80007a0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	//Start Timer
	HAL_TIM_Base_Start_IT(&htim6);
 8000574:	4b21      	ldr	r3, [pc, #132]	; (80005fc <main+0xa0>)
 8000576:	0018      	movs	r0, r3
 8000578:	f001 fd48 	bl	800200c <HAL_TIM_Base_Start_IT>
	// Start the 38kHz PWM output
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800057c:	4b20      	ldr	r3, [pc, #128]	; (8000600 <main+0xa4>)
 800057e:	2100      	movs	r1, #0
 8000580:	0018      	movs	r0, r3
 8000582:	f001 fddf 	bl	8002144 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000586:	f003 f8a9 	bl	80036dc <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of LED_BlinkStyle */
  LED_BlinkStyleHandle = osMessageQueueNew (1, sizeof(LED_BlinkProfile), &LED_BlinkStyle_attributes);
 800058a:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <main+0xa8>)
 800058c:	001a      	movs	r2, r3
 800058e:	2101      	movs	r1, #1
 8000590:	2001      	movs	r0, #1
 8000592:	f003 f9cd 	bl	8003930 <osMessageQueueNew>
 8000596:	0002      	movs	r2, r0
 8000598:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <main+0xac>)
 800059a:	601a      	str	r2, [r3, #0]

  /* creation of tagSignature */
  tagSignatureHandle = osMessageQueueNew (1, sizeof(LTTO_IR_SIGNATURE_t), &tagSignature_attributes);
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <main+0xb0>)
 800059e:	001a      	movs	r2, r3
 80005a0:	2104      	movs	r1, #4
 80005a2:	2001      	movs	r0, #1
 80005a4:	f003 f9c4 	bl	8003930 <osMessageQueueNew>
 80005a8:	0002      	movs	r2, r0
 80005aa:	4b19      	ldr	r3, [pc, #100]	; (8000610 <main+0xb4>)
 80005ac:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ae:	4a19      	ldr	r2, [pc, #100]	; (8000614 <main+0xb8>)
 80005b0:	4b19      	ldr	r3, [pc, #100]	; (8000618 <main+0xbc>)
 80005b2:	2100      	movs	r1, #0
 80005b4:	0018      	movs	r0, r3
 80005b6:	f003 f8eb 	bl	8003790 <osThreadNew>
 80005ba:	0002      	movs	r2, r0
 80005bc:	4b17      	ldr	r3, [pc, #92]	; (800061c <main+0xc0>)
 80005be:	601a      	str	r2, [r3, #0]

  /* creation of emitTag */
  emitTagHandle = osThreadNew(StartEmitTag, NULL, &emitTag_attributes);
 80005c0:	4a17      	ldr	r2, [pc, #92]	; (8000620 <main+0xc4>)
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <main+0xc8>)
 80005c4:	2100      	movs	r1, #0
 80005c6:	0018      	movs	r0, r3
 80005c8:	f003 f8e2 	bl	8003790 <osThreadNew>
 80005cc:	0002      	movs	r2, r0
 80005ce:	4b16      	ldr	r3, [pc, #88]	; (8000628 <main+0xcc>)
 80005d0:	601a      	str	r2, [r3, #0]

  /* creation of LED */
  LEDHandle = osThreadNew(StartLEDFlash, NULL, &LED_attributes);
 80005d2:	4a16      	ldr	r2, [pc, #88]	; (800062c <main+0xd0>)
 80005d4:	4b16      	ldr	r3, [pc, #88]	; (8000630 <main+0xd4>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	0018      	movs	r0, r3
 80005da:	f003 f8d9 	bl	8003790 <osThreadNew>
 80005de:	0002      	movs	r2, r0
 80005e0:	4b14      	ldr	r3, [pc, #80]	; (8000634 <main+0xd8>)
 80005e2:	601a      	str	r2, [r3, #0]

  /* creation of buttonMonitor */
  buttonMonitorHandle = osThreadNew(StartButtonMonitor, NULL, &buttonMonitor_attributes);
 80005e4:	4a14      	ldr	r2, [pc, #80]	; (8000638 <main+0xdc>)
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <main+0xe0>)
 80005e8:	2100      	movs	r1, #0
 80005ea:	0018      	movs	r0, r3
 80005ec:	f003 f8d0 	bl	8003790 <osThreadNew>
 80005f0:	0002      	movs	r2, r0
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <main+0xe4>)
 80005f4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005f6:	f003 f89d 	bl	8003734 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80005fa:	e7fe      	b.n	80005fa <main+0x9e>
 80005fc:	20001994 	.word	0x20001994
 8000600:	20001940 	.word	0x20001940
 8000604:	08005e60 	.word	0x08005e60
 8000608:	20001990 	.word	0x20001990
 800060c:	08005e78 	.word	0x08005e78
 8000610:	2000193c 	.word	0x2000193c
 8000614:	08005dd0 	.word	0x08005dd0
 8000618:	080008f5 	.word	0x080008f5
 800061c:	20001938 	.word	0x20001938
 8000620:	08005df4 	.word	0x08005df4
 8000624:	08000a3d 	.word	0x08000a3d
 8000628:	200019dc 	.word	0x200019dc
 800062c:	08005e18 	.word	0x08005e18
 8000630:	08000b95 	.word	0x08000b95
 8000634:	200019e0 	.word	0x200019e0
 8000638:	08005e3c 	.word	0x08005e3c
 800063c:	08000d21 	.word	0x08000d21
 8000640:	2000198c 	.word	0x2000198c

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b091      	sub	sp, #68	; 0x44
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	2410      	movs	r4, #16
 800064c:	193b      	adds	r3, r7, r4
 800064e:	0018      	movs	r0, r3
 8000650:	2330      	movs	r3, #48	; 0x30
 8000652:	001a      	movs	r2, r3
 8000654:	2100      	movs	r1, #0
 8000656:	f005 fb4e 	bl	8005cf6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065a:	003b      	movs	r3, r7
 800065c:	0018      	movs	r0, r3
 800065e:	2310      	movs	r3, #16
 8000660:	001a      	movs	r2, r3
 8000662:	2100      	movs	r1, #0
 8000664:	f005 fb47 	bl	8005cf6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	0021      	movs	r1, r4
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2202      	movs	r2, #2
 800066e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2201      	movs	r2, #1
 8000674:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2210      	movs	r2, #16
 800067a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2202      	movs	r2, #2
 8000680:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2280      	movs	r2, #128	; 0x80
 8000686:	0212      	lsls	r2, r2, #8
 8000688:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2280      	movs	r2, #128	; 0x80
 800068e:	0352      	lsls	r2, r2, #13
 8000690:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2200      	movs	r2, #0
 8000696:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	187b      	adds	r3, r7, r1
 800069a:	0018      	movs	r0, r3
 800069c:	f000 ffca 	bl	8001634 <HAL_RCC_OscConfig>
 80006a0:	1e03      	subs	r3, r0, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80006a4:	f000 fbde 	bl	8000e64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	003b      	movs	r3, r7
 80006aa:	2207      	movs	r2, #7
 80006ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ae:	003b      	movs	r3, r7
 80006b0:	2202      	movs	r2, #2
 80006b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	003b      	movs	r3, r7
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ba:	003b      	movs	r3, r7
 80006bc:	2200      	movs	r2, #0
 80006be:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006c0:	003b      	movs	r3, r7
 80006c2:	2101      	movs	r1, #1
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 fad3 	bl	8001c70 <HAL_RCC_ClockConfig>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006ce:	f000 fbc9 	bl	8000e64 <Error_Handler>
  }
}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b011      	add	sp, #68	; 0x44
 80006d8:	bd90      	pop	{r4, r7, pc}
	...

080006dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e2:	2320      	movs	r3, #32
 80006e4:	18fb      	adds	r3, r7, r3
 80006e6:	0018      	movs	r0, r3
 80006e8:	2308      	movs	r3, #8
 80006ea:	001a      	movs	r2, r3
 80006ec:	2100      	movs	r1, #0
 80006ee:	f005 fb02 	bl	8005cf6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	0018      	movs	r0, r3
 80006f6:	231c      	movs	r3, #28
 80006f8:	001a      	movs	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	f005 fafb 	bl	8005cf6 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000700:	4b24      	ldr	r3, [pc, #144]	; (8000794 <MX_TIM3_Init+0xb8>)
 8000702:	4a25      	ldr	r2, [pc, #148]	; (8000798 <MX_TIM3_Init+0xbc>)
 8000704:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000706:	4b23      	ldr	r3, [pc, #140]	; (8000794 <MX_TIM3_Init+0xb8>)
 8000708:	2200      	movs	r2, #0
 800070a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_TIM3_Init+0xb8>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1895;
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <MX_TIM3_Init+0xb8>)
 8000714:	4a21      	ldr	r2, [pc, #132]	; (800079c <MX_TIM3_Init+0xc0>)
 8000716:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <MX_TIM3_Init+0xb8>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_TIM3_Init+0xb8>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_TIM3_Init+0xb8>)
 8000726:	0018      	movs	r0, r3
 8000728:	f001 fcbc 	bl	80020a4 <HAL_TIM_PWM_Init>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000730:	f000 fb98 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000734:	2120      	movs	r1, #32
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000742:	187a      	adds	r2, r7, r1
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_TIM3_Init+0xb8>)
 8000746:	0011      	movs	r1, r2
 8000748:	0018      	movs	r0, r3
 800074a:	f002 fa29 	bl	8002ba0 <HAL_TIMEx_MasterConfigSynchronization>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000752:	f000 fb87 	bl	8000e64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2260      	movs	r2, #96	; 0x60
 800075a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 948;
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	22ed      	movs	r2, #237	; 0xed
 8000760:	0092      	lsls	r2, r2, #2
 8000762:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000770:	1d39      	adds	r1, r7, #4
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_TIM3_Init+0xb8>)
 8000774:	2200      	movs	r2, #0
 8000776:	0018      	movs	r0, r3
 8000778:	f001 feac 	bl	80024d4 <HAL_TIM_PWM_ConfigChannel>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8000780:	f000 fb70 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000784:	4b03      	ldr	r3, [pc, #12]	; (8000794 <MX_TIM3_Init+0xb8>)
 8000786:	0018      	movs	r0, r3
 8000788:	f000 fbe0 	bl	8000f4c <HAL_TIM_MspPostInit>

}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	b00a      	add	sp, #40	; 0x28
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20001940 	.word	0x20001940
 8000798:	40000400 	.word	0x40000400
 800079c:	00000767 	.word	0x00000767

080007a0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_TIM6_Init+0x38>)
 80007a6:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <MX_TIM6_Init+0x3c>)
 80007a8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 40-1;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_TIM6_Init+0x38>)
 80007ac:	2227      	movs	r2, #39	; 0x27
 80007ae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_TIM6_Init+0x38>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200-1;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_TIM6_Init+0x38>)
 80007b8:	22c7      	movs	r2, #199	; 0xc7
 80007ba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_TIM6_Init+0x38>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <MX_TIM6_Init+0x38>)
 80007c4:	0018      	movs	r0, r3
 80007c6:	f001 fbd1 	bl	8001f6c <HAL_TIM_Base_Init>
 80007ca:	1e03      	subs	r3, r0, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 80007ce:	f000 fb49 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20001994 	.word	0x20001994
 80007dc:	40001000 	.word	0x40001000

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b089      	sub	sp, #36	; 0x24
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	240c      	movs	r4, #12
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	0018      	movs	r0, r3
 80007ec:	2314      	movs	r3, #20
 80007ee:	001a      	movs	r2, r3
 80007f0:	2100      	movs	r1, #0
 80007f2:	f005 fa80 	bl	8005cf6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b3d      	ldr	r3, [pc, #244]	; (80008ec <MX_GPIO_Init+0x10c>)
 80007f8:	695a      	ldr	r2, [r3, #20]
 80007fa:	4b3c      	ldr	r3, [pc, #240]	; (80008ec <MX_GPIO_Init+0x10c>)
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	0289      	lsls	r1, r1, #10
 8000800:	430a      	orrs	r2, r1
 8000802:	615a      	str	r2, [r3, #20]
 8000804:	4b39      	ldr	r3, [pc, #228]	; (80008ec <MX_GPIO_Init+0x10c>)
 8000806:	695a      	ldr	r2, [r3, #20]
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	029b      	lsls	r3, r3, #10
 800080c:	4013      	ands	r3, r2
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	4b36      	ldr	r3, [pc, #216]	; (80008ec <MX_GPIO_Init+0x10c>)
 8000814:	695a      	ldr	r2, [r3, #20]
 8000816:	4b35      	ldr	r3, [pc, #212]	; (80008ec <MX_GPIO_Init+0x10c>)
 8000818:	2180      	movs	r1, #128	; 0x80
 800081a:	02c9      	lsls	r1, r1, #11
 800081c:	430a      	orrs	r2, r1
 800081e:	615a      	str	r2, [r3, #20]
 8000820:	4b32      	ldr	r3, [pc, #200]	; (80008ec <MX_GPIO_Init+0x10c>)
 8000822:	695a      	ldr	r2, [r3, #20]
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	02db      	lsls	r3, r3, #11
 8000828:	4013      	ands	r3, r2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IR_LED1_Pin|IR_LED8_Pin|IR_LED7_Pin|IR_LED6_Pin
 800082e:	2320      	movs	r3, #32
 8000830:	33ff      	adds	r3, #255	; 0xff
 8000832:	0019      	movs	r1, r3
 8000834:	2390      	movs	r3, #144	; 0x90
 8000836:	05db      	lsls	r3, r3, #23
 8000838:	2200      	movs	r2, #0
 800083a:	0018      	movs	r0, r3
 800083c:	f000 fedd 	bl	80015fa <HAL_GPIO_WritePin>
                          |IR_LED5_Pin|HeartbeatLED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, greenLED_Pin|PowerCtrl_Pin|IR_LED4_Pin|IR_LED3_Pin
 8000840:	23f8      	movs	r3, #248	; 0xf8
 8000842:	021b      	lsls	r3, r3, #8
 8000844:	482a      	ldr	r0, [pc, #168]	; (80008f0 <MX_GPIO_Init+0x110>)
 8000846:	2200      	movs	r2, #0
 8000848:	0019      	movs	r1, r3
 800084a:	f000 fed6 	bl	80015fa <HAL_GPIO_WritePin>
                          |IR_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : IR_LED1_Pin IR_LED8_Pin IR_LED7_Pin IR_LED6_Pin
                           IR_LED5_Pin HeartbeatLED_Pin */
  GPIO_InitStruct.Pin = IR_LED1_Pin|IR_LED8_Pin|IR_LED7_Pin|IR_LED6_Pin
 800084e:	193b      	adds	r3, r7, r4
 8000850:	2220      	movs	r2, #32
 8000852:	32ff      	adds	r2, #255	; 0xff
 8000854:	601a      	str	r2, [r3, #0]
                          |IR_LED5_Pin|HeartbeatLED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	193b      	adds	r3, r7, r4
 8000858:	2201      	movs	r2, #1
 800085a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	193b      	adds	r3, r7, r4
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	193b      	adds	r3, r7, r4
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	193a      	adds	r2, r7, r4
 800086a:	2390      	movs	r3, #144	; 0x90
 800086c:	05db      	lsls	r3, r3, #23
 800086e:	0011      	movs	r1, r2
 8000870:	0018      	movs	r0, r3
 8000872:	f000 fd35 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_L_Pin */
  GPIO_InitStruct.Pin = Button_L_Pin;
 8000876:	193b      	adds	r3, r7, r4
 8000878:	2202      	movs	r2, #2
 800087a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087c:	193b      	adds	r3, r7, r4
 800087e:	2200      	movs	r2, #0
 8000880:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000882:	193b      	adds	r3, r7, r4
 8000884:	2201      	movs	r2, #1
 8000886:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_L_GPIO_Port, &GPIO_InitStruct);
 8000888:	193b      	adds	r3, r7, r4
 800088a:	4a19      	ldr	r2, [pc, #100]	; (80008f0 <MX_GPIO_Init+0x110>)
 800088c:	0019      	movs	r1, r3
 800088e:	0010      	movs	r0, r2
 8000890:	f000 fd26 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : greenLED_Pin PowerCtrl_Pin IR_LED4_Pin IR_LED3_Pin
                           IR_LED2_Pin */
  GPIO_InitStruct.Pin = greenLED_Pin|PowerCtrl_Pin|IR_LED4_Pin|IR_LED3_Pin
 8000894:	0021      	movs	r1, r4
 8000896:	187b      	adds	r3, r7, r1
 8000898:	22f8      	movs	r2, #248	; 0xf8
 800089a:	0212      	lsls	r2, r2, #8
 800089c:	601a      	str	r2, [r3, #0]
                          |IR_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2201      	movs	r2, #1
 80008a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	000c      	movs	r4, r1
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <MX_GPIO_Init+0x110>)
 80008b6:	0019      	movs	r1, r3
 80008b8:	0010      	movs	r0, r2
 80008ba:	f000 fd11 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RX_Pin */
  GPIO_InitStruct.Pin = RX_Pin;
 80008be:	0021      	movs	r1, r4
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	0152      	lsls	r2, r2, #5
 80008c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2200      	movs	r2, #0
 80008cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 80008d4:	187a      	adds	r2, r7, r1
 80008d6:	2390      	movs	r3, #144	; 0x90
 80008d8:	05db      	lsls	r3, r3, #23
 80008da:	0011      	movs	r1, r2
 80008dc:	0018      	movs	r0, r3
 80008de:	f000 fcff 	bl	80012e0 <HAL_GPIO_Init>

}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b009      	add	sp, #36	; 0x24
 80008e8:	bd90      	pop	{r4, r7, pc}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	40021000 	.word	0x40021000
 80008f0:	48000400 	.word	0x48000400

080008f4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008f4:	b590      	push	{r4, r7, lr}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_GPIO_WritePin(PowerCtrl_GPIO_Port, PowerCtrl_Pin, GPIO_PIN_SET);
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	015b      	lsls	r3, r3, #5
 8000900:	4847      	ldr	r0, [pc, #284]	; (8000a20 <StartDefaultTask+0x12c>)
 8000902:	2201      	movs	r2, #1
 8000904:	0019      	movs	r1, r3
 8000906:	f000 fe78 	bl	80015fa <HAL_GPIO_WritePin>
	LED_BlinkProfile blinkStyle;
	/* Infinite loop */
	for(;;)
	{
		switch(presentState){
 800090a:	4b46      	ldr	r3, [pc, #280]	; (8000a24 <StartDefaultTask+0x130>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b02      	cmp	r3, #2
 8000910:	d01d      	beq.n	800094e <StartDefaultTask+0x5a>
 8000912:	dc02      	bgt.n	800091a <StartDefaultTask+0x26>
 8000914:	2b01      	cmp	r3, #1
 8000916:	d005      	beq.n	8000924 <StartDefaultTask+0x30>
 8000918:	e07e      	b.n	8000a18 <StartDefaultTask+0x124>
 800091a:	2b03      	cmp	r3, #3
 800091c:	d062      	beq.n	80009e4 <StartDefaultTask+0xf0>
 800091e:	2b04      	cmp	r3, #4
 8000920:	d064      	beq.n	80009ec <StartDefaultTask+0xf8>
 8000922:	e079      	b.n	8000a18 <StartDefaultTask+0x124>
		case PROGRAM:
			if(LTTO_IR_RX_AC_NewSingleSignatureReady()) {
 8000924:	f002 fea6 	bl	8003674 <LTTO_IR_RX_AC_NewSingleSignatureReady>
 8000928:	1e03      	subs	r3, r0, #0
 800092a:	d00c      	beq.n	8000946 <StartDefaultTask+0x52>
				LTTO_IR_RX_AC_GetSingleSignature(&tempSignature);
 800092c:	4b3e      	ldr	r3, [pc, #248]	; (8000a28 <StartDefaultTask+0x134>)
 800092e:	0018      	movs	r0, r3
 8000930:	f002 feac 	bl	800368c <LTTO_IR_RX_AC_GetSingleSignature>
				if(tempSignature.signatureType == LTTO_IR_SIGNATURE_TYPE_TAG) {
 8000934:	4b3c      	ldr	r3, [pc, #240]	; (8000a28 <StartDefaultTask+0x134>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b03      	cmp	r3, #3
 800093a:	d102      	bne.n	8000942 <StartDefaultTask+0x4e>
					presentState = COUNTDOWN;
 800093c:	4b39      	ldr	r3, [pc, #228]	; (8000a24 <StartDefaultTask+0x130>)
 800093e:	2202      	movs	r2, #2
 8000940:	701a      	strb	r2, [r3, #0]
				}
				LTTO_IR_RX_AC_Clear();
 8000942:	f002 feb5 	bl	80036b0 <LTTO_IR_RX_AC_Clear>
			}
			osDelay(10);
 8000946:	200a      	movs	r0, #10
 8000948:	f002 ffca 	bl	80038e0 <osDelay>
			break;
 800094c:	e064      	b.n	8000a18 <StartDefaultTask+0x124>
		case COUNTDOWN:
			blinkStyle = SLOW_BLINK;
 800094e:	210f      	movs	r1, #15
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2202      	movs	r2, #2
 8000954:	701a      	strb	r2, [r3, #0]
			xQueueSendToBack(LED_BlinkStyleHandle, &blinkStyle, 0);
 8000956:	4b35      	ldr	r3, [pc, #212]	; (8000a2c <StartDefaultTask+0x138>)
 8000958:	6818      	ldr	r0, [r3, #0]
 800095a:	1879      	adds	r1, r7, r1
 800095c:	2300      	movs	r3, #0
 800095e:	2200      	movs	r2, #0
 8000960:	f003 fa43 	bl	8003dea <xQueueGenericSend>
			osDelay(5000);
 8000964:	4b32      	ldr	r3, [pc, #200]	; (8000a30 <StartDefaultTask+0x13c>)
 8000966:	0018      	movs	r0, r3
 8000968:	f002 ffba 	bl	80038e0 <osDelay>
			if(presentState == SHUTDOWN){ //Lazy way to make sure we respond to button hold
 800096c:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <StartDefaultTask+0x130>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b04      	cmp	r3, #4
 8000972:	d04e      	beq.n	8000a12 <StartDefaultTask+0x11e>
				break;
			}

			blinkStyle = MEDIUM_BLINK;
 8000974:	210f      	movs	r1, #15
 8000976:	187b      	adds	r3, r7, r1
 8000978:	2203      	movs	r2, #3
 800097a:	701a      	strb	r2, [r3, #0]
			xQueueSendToBack(LED_BlinkStyleHandle, &blinkStyle, 0);
 800097c:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <StartDefaultTask+0x138>)
 800097e:	6818      	ldr	r0, [r3, #0]
 8000980:	1879      	adds	r1, r7, r1
 8000982:	2300      	movs	r3, #0
 8000984:	2200      	movs	r2, #0
 8000986:	f003 fa30 	bl	8003dea <xQueueGenericSend>
			osDelay(3000);
 800098a:	4b2a      	ldr	r3, [pc, #168]	; (8000a34 <StartDefaultTask+0x140>)
 800098c:	0018      	movs	r0, r3
 800098e:	f002 ffa7 	bl	80038e0 <osDelay>
			if(presentState == SHUTDOWN){ //Lazy way to make sure we respond to button hold
 8000992:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <StartDefaultTask+0x130>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b04      	cmp	r3, #4
 8000998:	d03d      	beq.n	8000a16 <StartDefaultTask+0x122>
				break;
			}

			blinkStyle = FAST_BLINK;
 800099a:	240f      	movs	r4, #15
 800099c:	193b      	adds	r3, r7, r4
 800099e:	2204      	movs	r2, #4
 80009a0:	701a      	strb	r2, [r3, #0]
			xQueueSendToBack(LED_BlinkStyleHandle, &blinkStyle, 0);
 80009a2:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <StartDefaultTask+0x138>)
 80009a4:	6818      	ldr	r0, [r3, #0]
 80009a6:	1939      	adds	r1, r7, r4
 80009a8:	2300      	movs	r3, #0
 80009aa:	2200      	movs	r2, #0
 80009ac:	f003 fa1d 	bl	8003dea <xQueueGenericSend>
			osDelay(2000);
 80009b0:	23fa      	movs	r3, #250	; 0xfa
 80009b2:	00db      	lsls	r3, r3, #3
 80009b4:	0018      	movs	r0, r3
 80009b6:	f002 ff93 	bl	80038e0 <osDelay>

			xQueueSendToBack(tagSignatureHandle, &tempSignature, 0);
 80009ba:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <StartDefaultTask+0x144>)
 80009bc:	6818      	ldr	r0, [r3, #0]
 80009be:	491a      	ldr	r1, [pc, #104]	; (8000a28 <StartDefaultTask+0x134>)
 80009c0:	2300      	movs	r3, #0
 80009c2:	2200      	movs	r2, #0
 80009c4:	f003 fa11 	bl	8003dea <xQueueGenericSend>
			blinkStyle = SOLID_LED;
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	2205      	movs	r2, #5
 80009cc:	701a      	strb	r2, [r3, #0]
			xQueueSendToBack(LED_BlinkStyleHandle, &blinkStyle, 0);
 80009ce:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <StartDefaultTask+0x138>)
 80009d0:	6818      	ldr	r0, [r3, #0]
 80009d2:	1939      	adds	r1, r7, r4
 80009d4:	2300      	movs	r3, #0
 80009d6:	2200      	movs	r2, #0
 80009d8:	f003 fa07 	bl	8003dea <xQueueGenericSend>
			presentState = DETONATE;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <StartDefaultTask+0x130>)
 80009de:	2203      	movs	r2, #3
 80009e0:	701a      	strb	r2, [r3, #0]
			break;
 80009e2:	e019      	b.n	8000a18 <StartDefaultTask+0x124>
		case DETONATE:

			osDelay(5); //Wait for detonate to complete (or button to be held)
 80009e4:	2005      	movs	r0, #5
 80009e6:	f002 ff7b 	bl	80038e0 <osDelay>
			break;
 80009ea:	e015      	b.n	8000a18 <StartDefaultTask+0x124>

		case SHUTDOWN:
			blinkStyle = OCCASIONAL_BLIP;
 80009ec:	210f      	movs	r1, #15
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2206      	movs	r2, #6
 80009f2:	701a      	strb	r2, [r3, #0]
			xQueueSendToBack(LED_BlinkStyleHandle, &blinkStyle, 0);
 80009f4:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <StartDefaultTask+0x138>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	1879      	adds	r1, r7, r1
 80009fa:	2300      	movs	r3, #0
 80009fc:	2200      	movs	r2, #0
 80009fe:	f003 f9f4 	bl	8003dea <xQueueGenericSend>
			HAL_GPIO_WritePin(PowerCtrl_GPIO_Port, PowerCtrl_Pin, GPIO_PIN_RESET);
 8000a02:	2380      	movs	r3, #128	; 0x80
 8000a04:	015b      	lsls	r3, r3, #5
 8000a06:	4806      	ldr	r0, [pc, #24]	; (8000a20 <StartDefaultTask+0x12c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	0019      	movs	r1, r3
 8000a0c:	f000 fdf5 	bl	80015fa <HAL_GPIO_WritePin>
			break;
 8000a10:	e002      	b.n	8000a18 <StartDefaultTask+0x124>
				break;
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	e000      	b.n	8000a18 <StartDefaultTask+0x124>
				break;
 8000a16:	46c0      	nop			; (mov r8, r8)
		}
		osDelay(10);
 8000a18:	200a      	movs	r0, #10
 8000a1a:	f002 ff61 	bl	80038e0 <osDelay>
		switch(presentState){
 8000a1e:	e774      	b.n	800090a <StartDefaultTask+0x16>
 8000a20:	48000400 	.word	0x48000400
 8000a24:	20000000 	.word	0x20000000
 8000a28:	20001988 	.word	0x20001988
 8000a2c:	20001990 	.word	0x20001990
 8000a30:	00001388 	.word	0x00001388
 8000a34:	00000bb8 	.word	0x00000bb8
 8000a38:	2000193c 	.word	0x2000193c

08000a3c <StartEmitTag>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEmitTag */
void StartEmitTag(void *argument)
{
 8000a3c:	b5b0      	push	{r4, r5, r7, lr}
 8000a3e:	b0a8      	sub	sp, #160	; 0xa0
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		//Our TX buffer
		int LTTO_IR_TX_txPulseMS[21];
		int LTTO_IR_TX_txPulseCount = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	2490      	movs	r4, #144	; 0x90
 8000a48:	193a      	adds	r2, r7, r4
 8000a4a:	6013      	str	r3, [r2, #0]
		LTTO_IR_SIGNATURE_t signatureToSend;

		GPIO_TypeDef* portArray[8] = {IR_LED1_GPIO_Port, IR_LED2_GPIO_Port, IR_LED3_GPIO_Port,
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	18fb      	adds	r3, r7, r3
 8000a50:	4a4c      	ldr	r2, [pc, #304]	; (8000b84 <StartEmitTag+0x148>)
 8000a52:	ca23      	ldmia	r2!, {r0, r1, r5}
 8000a54:	c323      	stmia	r3!, {r0, r1, r5}
 8000a56:	ca23      	ldmia	r2!, {r0, r1, r5}
 8000a58:	c323      	stmia	r3!, {r0, r1, r5}
 8000a5a:	ca03      	ldmia	r2!, {r0, r1}
 8000a5c:	c303      	stmia	r3!, {r0, r1}
				IR_LED4_GPIO_Port, IR_LED5_GPIO_Port, IR_LED6_GPIO_Port, IR_LED7_GPIO_Port, IR_LED8_GPIO_Port};
		uint16_t pinArray [8] = {IR_LED1_Pin, IR_LED2_Pin, IR_LED3_Pin, IR_LED4_Pin, IR_LED5_Pin,
 8000a5e:	237c      	movs	r3, #124	; 0x7c
 8000a60:	18fb      	adds	r3, r7, r3
 8000a62:	4a49      	ldr	r2, [pc, #292]	; (8000b88 <StartEmitTag+0x14c>)
 8000a64:	ca23      	ldmia	r2!, {r0, r1, r5}
 8000a66:	c323      	stmia	r3!, {r0, r1, r5}
 8000a68:	6812      	ldr	r2, [r2, #0]
 8000a6a:	601a      	str	r2, [r3, #0]
				IR_LED6_Pin, IR_LED7_Pin, IR_LED8_Pin };

		xQueueReceive(tagSignatureHandle, &signatureToSend, portMAX_DELAY);
 8000a6c:	4b47      	ldr	r3, [pc, #284]	; (8000b8c <StartEmitTag+0x150>)
 8000a6e:	6818      	ldr	r0, [r3, #0]
 8000a70:	2301      	movs	r3, #1
 8000a72:	425a      	negs	r2, r3
 8000a74:	258c      	movs	r5, #140	; 0x8c
 8000a76:	197b      	adds	r3, r7, r5
 8000a78:	0019      	movs	r1, r3
 8000a7a:	f003 faeb 	bl	8004054 <xQueueReceive>
		LTTO_IR_CONV_SignatureToPulses(&signatureToSend, &LTTO_IR_TX_txPulseMS, &LTTO_IR_TX_txPulseCount);
 8000a7e:	193a      	adds	r2, r7, r4
 8000a80:	2328      	movs	r3, #40	; 0x28
 8000a82:	18f9      	adds	r1, r7, r3
 8000a84:	197b      	adds	r3, r7, r5
 8000a86:	0018      	movs	r0, r3
 8000a88:	f002 faf4 	bl	8003074 <LTTO_IR_CONV_SignatureToPulses>
		//LTTO_IR_SIGNATURE_t *sourceSignature, int destinationPulseTickMSBuffer[], int *destinationPulseCount
		for(int detonationRound = 0; detonationRound < 3; detonationRound++){ //Fire off 3 sets of 8 shots
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	229c      	movs	r2, #156	; 0x9c
 8000a90:	18ba      	adds	r2, r7, r2
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	e068      	b.n	8000b68 <StartEmitTag+0x12c>
			for(int emitter = 0; emitter < 8; emitter++) {
 8000a96:	2300      	movs	r3, #0
 8000a98:	2298      	movs	r2, #152	; 0x98
 8000a9a:	18ba      	adds	r2, r7, r2
 8000a9c:	6013      	str	r3, [r2, #0]
 8000a9e:	e058      	b.n	8000b52 <StartEmitTag+0x116>
				for(int pulseIndex = 0; pulseIndex < LTTO_IR_TX_txPulseCount; pulseIndex++){
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	2294      	movs	r2, #148	; 0x94
 8000aa4:	18ba      	adds	r2, r7, r2
 8000aa6:	6013      	str	r3, [r2, #0]
 8000aa8:	e042      	b.n	8000b30 <StartEmitTag+0xf4>
					if(pulseIndex % 2 == 0) {
 8000aaa:	2394      	movs	r3, #148	; 0x94
 8000aac:	18fb      	adds	r3, r7, r3
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	d11b      	bne.n	8000aee <StartEmitTag+0xb2>
						//Odd index, active IR period
						HAL_GPIO_WritePin(portArray[emitter], pinArray[emitter], GPIO_PIN_SET);
 8000ab6:	2308      	movs	r3, #8
 8000ab8:	18fb      	adds	r3, r7, r3
 8000aba:	2198      	movs	r1, #152	; 0x98
 8000abc:	187a      	adds	r2, r7, r1
 8000abe:	6812      	ldr	r2, [r2, #0]
 8000ac0:	0092      	lsls	r2, r2, #2
 8000ac2:	58d0      	ldr	r0, [r2, r3]
 8000ac4:	237c      	movs	r3, #124	; 0x7c
 8000ac6:	18fb      	adds	r3, r7, r3
 8000ac8:	187a      	adds	r2, r7, r1
 8000aca:	6812      	ldr	r2, [r2, #0]
 8000acc:	0052      	lsls	r2, r2, #1
 8000ace:	5ad3      	ldrh	r3, [r2, r3]
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	0019      	movs	r1, r3
 8000ad4:	f000 fd91 	bl	80015fa <HAL_GPIO_WritePin>
						osDelay(LTTO_IR_TX_txPulseMS[pulseIndex]);
 8000ad8:	2328      	movs	r3, #40	; 0x28
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	2294      	movs	r2, #148	; 0x94
 8000ade:	18ba      	adds	r2, r7, r2
 8000ae0:	6812      	ldr	r2, [r2, #0]
 8000ae2:	0092      	lsls	r2, r2, #2
 8000ae4:	58d3      	ldr	r3, [r2, r3]
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f002 fefa 	bl	80038e0 <osDelay>
 8000aec:	e01a      	b.n	8000b24 <StartEmitTag+0xe8>
					}
					else{
						//Even index, inactive IR period
						HAL_GPIO_WritePin(portArray[emitter], pinArray[emitter], GPIO_PIN_RESET);
 8000aee:	2308      	movs	r3, #8
 8000af0:	18fb      	adds	r3, r7, r3
 8000af2:	2198      	movs	r1, #152	; 0x98
 8000af4:	187a      	adds	r2, r7, r1
 8000af6:	6812      	ldr	r2, [r2, #0]
 8000af8:	0092      	lsls	r2, r2, #2
 8000afa:	58d0      	ldr	r0, [r2, r3]
 8000afc:	237c      	movs	r3, #124	; 0x7c
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	187a      	adds	r2, r7, r1
 8000b02:	6812      	ldr	r2, [r2, #0]
 8000b04:	0052      	lsls	r2, r2, #1
 8000b06:	5ad3      	ldrh	r3, [r2, r3]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	0019      	movs	r1, r3
 8000b0c:	f000 fd75 	bl	80015fa <HAL_GPIO_WritePin>
						osDelay(LTTO_IR_TX_txPulseMS[pulseIndex]);
 8000b10:	2328      	movs	r3, #40	; 0x28
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	2294      	movs	r2, #148	; 0x94
 8000b16:	18ba      	adds	r2, r7, r2
 8000b18:	6812      	ldr	r2, [r2, #0]
 8000b1a:	0092      	lsls	r2, r2, #2
 8000b1c:	58d3      	ldr	r3, [r2, r3]
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f002 fede 	bl	80038e0 <osDelay>
				for(int pulseIndex = 0; pulseIndex < LTTO_IR_TX_txPulseCount; pulseIndex++){
 8000b24:	2294      	movs	r2, #148	; 0x94
 8000b26:	18bb      	adds	r3, r7, r2
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	18ba      	adds	r2, r7, r2
 8000b2e:	6013      	str	r3, [r2, #0]
 8000b30:	2390      	movs	r3, #144	; 0x90
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2294      	movs	r2, #148	; 0x94
 8000b38:	18ba      	adds	r2, r7, r2
 8000b3a:	6812      	ldr	r2, [r2, #0]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	dbb4      	blt.n	8000aaa <StartEmitTag+0x6e>
					}
				}
				osDelay(100); //100 ms inter-tag spacing
 8000b40:	2064      	movs	r0, #100	; 0x64
 8000b42:	f002 fecd 	bl	80038e0 <osDelay>
			for(int emitter = 0; emitter < 8; emitter++) {
 8000b46:	2298      	movs	r2, #152	; 0x98
 8000b48:	18bb      	adds	r3, r7, r2
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	18ba      	adds	r2, r7, r2
 8000b50:	6013      	str	r3, [r2, #0]
 8000b52:	2398      	movs	r3, #152	; 0x98
 8000b54:	18fb      	adds	r3, r7, r3
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b07      	cmp	r3, #7
 8000b5a:	dda1      	ble.n	8000aa0 <StartEmitTag+0x64>
		for(int detonationRound = 0; detonationRound < 3; detonationRound++){ //Fire off 3 sets of 8 shots
 8000b5c:	229c      	movs	r2, #156	; 0x9c
 8000b5e:	18bb      	adds	r3, r7, r2
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	3301      	adds	r3, #1
 8000b64:	18ba      	adds	r2, r7, r2
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	239c      	movs	r3, #156	; 0x9c
 8000b6a:	18fb      	adds	r3, r7, r3
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	dd91      	ble.n	8000a96 <StartEmitTag+0x5a>
			}
		}
		presentState = SHUTDOWN; //kill the power
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <StartEmitTag+0x154>)
 8000b74:	2204      	movs	r2, #4
 8000b76:	701a      	strb	r2, [r3, #0]
		osDelay(1000); //Sleep so other tasks can grab the Mutex
 8000b78:	23fa      	movs	r3, #250	; 0xfa
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f002 feaf 	bl	80038e0 <osDelay>
	{
 8000b82:	e75f      	b.n	8000a44 <StartEmitTag+0x8>
 8000b84:	08005d68 	.word	0x08005d68
 8000b88:	08005d88 	.word	0x08005d88
 8000b8c:	2000193c 	.word	0x2000193c
 8000b90:	20000000 	.word	0x20000000

08000b94 <StartLEDFlash>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLEDFlash */
void StartLEDFlash(void *argument)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDFlash */
	LED_BlinkProfile blinkStyle = ULTRA;
 8000b9c:	210e      	movs	r1, #14
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	701a      	strb	r2, [r3, #0]
	uint16_t onTime;
	uint16_t offTime;
	uint32_t prevTime;
	bool LEDisOn;

	xQueueSendToBack(LED_BlinkStyleHandle, &blinkStyle, 0);
 8000ba4:	4b5a      	ldr	r3, [pc, #360]	; (8000d10 <StartLEDFlash+0x17c>)
 8000ba6:	6818      	ldr	r0, [r3, #0]
 8000ba8:	1879      	adds	r1, r7, r1
 8000baa:	2300      	movs	r3, #0
 8000bac:	2200      	movs	r2, #0
 8000bae:	f003 f91c 	bl	8003dea <xQueueGenericSend>
	/* Infinite loop */
	for(;;)
	{
		if(xQueueReceive(LED_BlinkStyleHandle, &blinkStyle, 0)){
 8000bb2:	4b57      	ldr	r3, [pc, #348]	; (8000d10 <StartLEDFlash+0x17c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	220e      	movs	r2, #14
 8000bb8:	18b9      	adds	r1, r7, r2
 8000bba:	2200      	movs	r2, #0
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f003 fa49 	bl	8004054 <xQueueReceive>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d058      	beq.n	8000c78 <StartLEDFlash+0xe4>
			switch(blinkStyle){
 8000bc6:	230e      	movs	r3, #14
 8000bc8:	18fb      	adds	r3, r7, r3
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b06      	cmp	r3, #6
 8000bce:	d83c      	bhi.n	8000c4a <StartLEDFlash+0xb6>
 8000bd0:	009a      	lsls	r2, r3, #2
 8000bd2:	4b50      	ldr	r3, [pc, #320]	; (8000d14 <StartLEDFlash+0x180>)
 8000bd4:	18d3      	adds	r3, r2, r3
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	469f      	mov	pc, r3
			case ULTRA:
				onTime = 20;
 8000bda:	2316      	movs	r3, #22
 8000bdc:	18fb      	adds	r3, r7, r3
 8000bde:	2214      	movs	r2, #20
 8000be0:	801a      	strh	r2, [r3, #0]
				offTime = 20;
 8000be2:	2314      	movs	r3, #20
 8000be4:	18fb      	adds	r3, r7, r3
 8000be6:	2214      	movs	r2, #20
 8000be8:	801a      	strh	r2, [r3, #0]
				break;
 8000bea:	e02e      	b.n	8000c4a <StartLEDFlash+0xb6>
			case SLOW_BLINK:
				onTime = 500;
 8000bec:	2316      	movs	r3, #22
 8000bee:	18fb      	adds	r3, r7, r3
 8000bf0:	22fa      	movs	r2, #250	; 0xfa
 8000bf2:	0052      	lsls	r2, r2, #1
 8000bf4:	801a      	strh	r2, [r3, #0]
				offTime = 500;
 8000bf6:	2314      	movs	r3, #20
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	22fa      	movs	r2, #250	; 0xfa
 8000bfc:	0052      	lsls	r2, r2, #1
 8000bfe:	801a      	strh	r2, [r3, #0]
				break;
 8000c00:	e023      	b.n	8000c4a <StartLEDFlash+0xb6>
			case MEDIUM_BLINK:
				onTime = 200;
 8000c02:	2316      	movs	r3, #22
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	22c8      	movs	r2, #200	; 0xc8
 8000c08:	801a      	strh	r2, [r3, #0]
				offTime = 200;
 8000c0a:	2314      	movs	r3, #20
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	22c8      	movs	r2, #200	; 0xc8
 8000c10:	801a      	strh	r2, [r3, #0]
				break;
 8000c12:	e01a      	b.n	8000c4a <StartLEDFlash+0xb6>
			case FAST_BLINK:
				onTime = 100;
 8000c14:	2316      	movs	r3, #22
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	2264      	movs	r2, #100	; 0x64
 8000c1a:	801a      	strh	r2, [r3, #0]
				offTime = 100;
 8000c1c:	2314      	movs	r3, #20
 8000c1e:	18fb      	adds	r3, r7, r3
 8000c20:	2264      	movs	r2, #100	; 0x64
 8000c22:	801a      	strh	r2, [r3, #0]
				break;
 8000c24:	e011      	b.n	8000c4a <StartLEDFlash+0xb6>
			case SOLID_LED:
				onTime = 65000;
 8000c26:	2316      	movs	r3, #22
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	4a3b      	ldr	r2, [pc, #236]	; (8000d18 <StartLEDFlash+0x184>)
 8000c2c:	801a      	strh	r2, [r3, #0]
				offTime = 0;
 8000c2e:	2314      	movs	r3, #20
 8000c30:	18fb      	adds	r3, r7, r3
 8000c32:	2200      	movs	r2, #0
 8000c34:	801a      	strh	r2, [r3, #0]
				break;
 8000c36:	e008      	b.n	8000c4a <StartLEDFlash+0xb6>
			case OCCASIONAL_BLIP:
				onTime = 20;
 8000c38:	2316      	movs	r3, #22
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	2214      	movs	r2, #20
 8000c3e:	801a      	strh	r2, [r3, #0]
				offTime = 1000;
 8000c40:	2314      	movs	r3, #20
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	22fa      	movs	r2, #250	; 0xfa
 8000c46:	0092      	lsls	r2, r2, #2
 8000c48:	801a      	strh	r2, [r3, #0]
			}
			prevTime = HAL_GetTick();
 8000c4a:	f000 fa91 	bl	8001170 <HAL_GetTick>
 8000c4e:	0003      	movs	r3, r0
 8000c50:	613b      	str	r3, [r7, #16]
			//Start with LED on
			LEDisOn = true;
 8000c52:	230f      	movs	r3, #15
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_RESET); //Turn on the LED (inverted)
 8000c5a:	2380      	movs	r3, #128	; 0x80
 8000c5c:	011b      	lsls	r3, r3, #4
 8000c5e:	482f      	ldr	r0, [pc, #188]	; (8000d1c <StartLEDFlash+0x188>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	0019      	movs	r1, r3
 8000c64:	f000 fcc9 	bl	80015fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(HeartbeatLED_GPIO_Port, HeartbeatLED_Pin, GPIO_PIN_SET); //Turn on the heartbeat LED
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	0059      	lsls	r1, r3, #1
 8000c6c:	2390      	movs	r3, #144	; 0x90
 8000c6e:	05db      	lsls	r3, r3, #23
 8000c70:	2201      	movs	r2, #1
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 fcc1 	bl	80015fa <HAL_GPIO_WritePin>
		}
		if(LEDisOn){
 8000c78:	230f      	movs	r3, #15
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d021      	beq.n	8000cc6 <StartLEDFlash+0x132>
			if(HAL_GetTick()-prevTime > onTime){ //If on-time has elapsed
 8000c82:	f000 fa75 	bl	8001170 <HAL_GetTick>
 8000c86:	0002      	movs	r2, r0
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	1ad2      	subs	r2, r2, r3
 8000c8c:	2316      	movs	r3, #22
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d938      	bls.n	8000d08 <StartLEDFlash+0x174>
				HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_SET); //Turn off the LED (inverted)
 8000c96:	2380      	movs	r3, #128	; 0x80
 8000c98:	011b      	lsls	r3, r3, #4
 8000c9a:	4820      	ldr	r0, [pc, #128]	; (8000d1c <StartLEDFlash+0x188>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	0019      	movs	r1, r3
 8000ca0:	f000 fcab 	bl	80015fa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(HeartbeatLED_GPIO_Port, HeartbeatLED_Pin, GPIO_PIN_RESET); //Turn off the heartbeat LED
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	0059      	lsls	r1, r3, #1
 8000ca8:	2390      	movs	r3, #144	; 0x90
 8000caa:	05db      	lsls	r3, r3, #23
 8000cac:	2200      	movs	r2, #0
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f000 fca3 	bl	80015fa <HAL_GPIO_WritePin>
				LEDisOn = false;
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
				prevTime = HAL_GetTick(); //Reset timer so we can time the off time
 8000cbc:	f000 fa58 	bl	8001170 <HAL_GetTick>
 8000cc0:	0003      	movs	r3, r0
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	e020      	b.n	8000d08 <StartLEDFlash+0x174>
			}
		}
		else{
			if(HAL_GetTick()-prevTime > offTime){ //If off-time has elapsed
 8000cc6:	f000 fa53 	bl	8001170 <HAL_GetTick>
 8000cca:	0002      	movs	r2, r0
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	1ad2      	subs	r2, r2, r3
 8000cd0:	2314      	movs	r3, #20
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d916      	bls.n	8000d08 <StartLEDFlash+0x174>
				HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_RESET); //Turn on the LED (inverted)
 8000cda:	2380      	movs	r3, #128	; 0x80
 8000cdc:	011b      	lsls	r3, r3, #4
 8000cde:	480f      	ldr	r0, [pc, #60]	; (8000d1c <StartLEDFlash+0x188>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	0019      	movs	r1, r3
 8000ce4:	f000 fc89 	bl	80015fa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(HeartbeatLED_GPIO_Port, HeartbeatLED_Pin, GPIO_PIN_SET); //Turn on the heartbeat LED
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	0059      	lsls	r1, r3, #1
 8000cec:	2390      	movs	r3, #144	; 0x90
 8000cee:	05db      	lsls	r3, r3, #23
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f000 fc81 	bl	80015fa <HAL_GPIO_WritePin>
				LEDisOn = true;
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	18fb      	adds	r3, r7, r3
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	701a      	strb	r2, [r3, #0]
				prevTime = HAL_GetTick(); //Reset timer so we can time the off time
 8000d00:	f000 fa36 	bl	8001170 <HAL_GetTick>
 8000d04:	0003      	movs	r3, r0
 8000d06:	613b      	str	r3, [r7, #16]
			}
		}
		osDelay(10);
 8000d08:	200a      	movs	r0, #10
 8000d0a:	f002 fde9 	bl	80038e0 <osDelay>
		if(xQueueReceive(LED_BlinkStyleHandle, &blinkStyle, 0)){
 8000d0e:	e750      	b.n	8000bb2 <StartLEDFlash+0x1e>
 8000d10:	20001990 	.word	0x20001990
 8000d14:	08005e90 	.word	0x08005e90
 8000d18:	fffffde8 	.word	0xfffffde8
 8000d1c:	48000400 	.word	0x48000400

08000d20 <StartButtonMonitor>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartButtonMonitor */
void StartButtonMonitor(void *argument)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonMonitor */
	int resetCount = 30;
 8000d28:	231e      	movs	r3, #30
 8000d2a:	613b      	str	r3, [r7, #16]
	int interval = 100; //ms
 8000d2c:	2364      	movs	r3, #100	; 0x64
 8000d2e:	60fb      	str	r3, [r7, #12]
	int currentCount = resetCount;
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	617b      	str	r3, [r7, #20]
	/* Infinite loop */
	for(;;)
	{
		if(HAL_GPIO_ReadPin(Button_L_GPIO_Port, Button_L_Pin)==GPIO_PIN_RESET){ //button pressed
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <StartButtonMonitor+0x44>)
 8000d36:	2102      	movs	r1, #2
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f000 fc41 	bl	80015c0 <HAL_GPIO_ReadPin>
 8000d3e:	1e03      	subs	r3, r0, #0
 8000d40:	d103      	bne.n	8000d4a <StartButtonMonitor+0x2a>
			currentCount--; //decrement the countdown
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	e001      	b.n	8000d4e <StartButtonMonitor+0x2e>
		}
		else{
			currentCount = resetCount; //reset the countdown
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	617b      	str	r3, [r7, #20]
		}
		if(currentCount <= 0){
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	dc02      	bgt.n	8000d5a <StartButtonMonitor+0x3a>
			presentState = SHUTDOWN; //kill the power
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <StartButtonMonitor+0x48>)
 8000d56:	2204      	movs	r2, #4
 8000d58:	701a      	strb	r2, [r3, #0]
		}
		osDelay(interval);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f002 fdbf 	bl	80038e0 <osDelay>
		if(HAL_GPIO_ReadPin(Button_L_GPIO_Port, Button_L_Pin)==GPIO_PIN_RESET){ //button pressed
 8000d62:	e7e7      	b.n	8000d34 <StartButtonMonitor+0x14>
 8000d64:	48000400 	.word	0x48000400
 8000d68:	20000000 	.word	0x20000000

08000d6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]

	static uint16_t IR_RX_SensorTicks = 0;
	static bool IR_RX_LastState;
	static bool IR_RX_currentState;
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a34      	ldr	r2, [pc, #208]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d101      	bne.n	8000d82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d7e:	f000 f9e5 	bl	800114c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim == &htim6 )  { // 0.2ms Interrupt
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	4b32      	ldr	r3, [pc, #200]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d15b      	bne.n	8000e42 <HAL_TIM_PeriodElapsedCallback+0xd6>
		if(HAL_GPIO_ReadPin(RX_GPIO_Port, RX_Pin) == GPIO_PIN_SET){
 8000d8a:	2380      	movs	r3, #128	; 0x80
 8000d8c:	015a      	lsls	r2, r3, #5
 8000d8e:	2390      	movs	r3, #144	; 0x90
 8000d90:	05db      	lsls	r3, r3, #23
 8000d92:	0011      	movs	r1, r2
 8000d94:	0018      	movs	r0, r3
 8000d96:	f000 fc13 	bl	80015c0 <HAL_GPIO_ReadPin>
 8000d9a:	0003      	movs	r3, r0
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d103      	bne.n	8000da8 <HAL_TIM_PeriodElapsedCallback+0x3c>
			IR_RX_currentState = true;
 8000da0:	4b2c      	ldr	r3, [pc, #176]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	e002      	b.n	8000dae <HAL_TIM_PeriodElapsedCallback+0x42>
		}
		else{
			IR_RX_currentState = false;
 8000da8:	4b2a      	ldr	r3, [pc, #168]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
		}
		//Handle IR reception
		//If the state is the same as last time
		if(IR_RX_currentState == IR_RX_LastState) {
 8000dae:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000db0:	781a      	ldrb	r2, [r3, #0]
 8000db2:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d125      	bne.n	8000e06 <HAL_TIM_PeriodElapsedCallback+0x9a>
			//If this pulse has gone longer than 10ms, and we haven't already decided we've timed out...
			if((IR_RX_SensorTicks / LTTO_IR_RX_TICKS_PER_MS) > 10 && IR_RX_SensorTicks != IR_RX_SENSOR_TICKS_GAVE_UP) {
 8000dba:	4b28      	ldr	r3, [pc, #160]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	2b36      	cmp	r3, #54	; 0x36
 8000dc0:	d91a      	bls.n	8000df8 <HAL_TIM_PeriodElapsedCallback+0x8c>
 8000dc2:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	4a26      	ldr	r2, [pc, #152]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d015      	beq.n	8000df8 <HAL_TIM_PeriodElapsedCallback+0x8c>
				//Pass it into the RX processor
				//Invert the sensor state, since IR receivers are active-low
				LTTO_IR_RX_AC_NewIRPulseReceived(IR_RX_SensorTicks, !IR_RX_LastState);
 8000dcc:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	1e5a      	subs	r2, r3, #1
 8000dd8:	4193      	sbcs	r3, r2
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2201      	movs	r2, #1
 8000dde:	4053      	eors	r3, r2
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	1c1a      	adds	r2, r3, #0
 8000de4:	2301      	movs	r3, #1
 8000de6:	4013      	ands	r3, r2
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	0019      	movs	r1, r3
 8000dec:	f002 fbe8 	bl	80035c0 <LTTO_IR_RX_AC_NewIRPulseReceived>
				//And mark this pulse as having already been processed
				IR_RX_SensorTicks = IR_RX_SENSOR_TICKS_GAVE_UP;
 8000df0:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000df2:	4a1b      	ldr	r2, [pc, #108]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000df4:	801a      	strh	r2, [r3, #0]
			IR_RX_LastState = IR_RX_currentState;
		}
	}

  /* USER CODE END Callback 1 */
}
 8000df6:	e024      	b.n	8000e42 <HAL_TIM_PeriodElapsedCallback+0xd6>
				IR_RX_SensorTicks++;
 8000df8:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000e02:	801a      	strh	r2, [r3, #0]
}
 8000e04:	e01d      	b.n	8000e42 <HAL_TIM_PeriodElapsedCallback+0xd6>
			if(IR_RX_SensorTicks != IR_RX_SENSOR_TICKS_GAVE_UP) {
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	4a15      	ldr	r2, [pc, #84]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d011      	beq.n	8000e34 <HAL_TIM_PeriodElapsedCallback+0xc8>
				LTTO_IR_RX_AC_NewIRPulseReceived(IR_RX_SensorTicks, !IR_RX_LastState);
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	0018      	movs	r0, r3
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	1e5a      	subs	r2, r3, #1
 8000e1c:	4193      	sbcs	r3, r2
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	2201      	movs	r2, #1
 8000e22:	4053      	eors	r3, r2
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	1c1a      	adds	r2, r3, #0
 8000e28:	2301      	movs	r3, #1
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	0019      	movs	r1, r3
 8000e30:	f002 fbc6 	bl	80035c0 <LTTO_IR_RX_AC_NewIRPulseReceived>
			IR_RX_SensorTicks = 0;
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	801a      	strh	r2, [r3, #0]
			IR_RX_LastState = IR_RX_currentState;
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000e3c:	781a      	ldrb	r2, [r3, #0]
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000e40:	701a      	strb	r2, [r3, #0]
}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b002      	add	sp, #8
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	40014800 	.word	0x40014800
 8000e50:	20001994 	.word	0x20001994
 8000e54:	2000002c 	.word	0x2000002c
 8000e58:	2000002d 	.word	0x2000002d
 8000e5c:	2000002e 	.word	0x2000002e
 8000e60:	00002710 	.word	0x00002710

08000e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e68:	46c0      	nop			; (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_MspInit+0x50>)
 8000e78:	699a      	ldr	r2, [r3, #24]
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_MspInit+0x50>)
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	619a      	str	r2, [r3, #24]
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <HAL_MspInit+0x50>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	2201      	movs	r2, #1
 8000e88:	4013      	ands	r3, r2
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <HAL_MspInit+0x50>)
 8000e90:	69da      	ldr	r2, [r3, #28]
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <HAL_MspInit+0x50>)
 8000e94:	2180      	movs	r1, #128	; 0x80
 8000e96:	0549      	lsls	r1, r1, #21
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	61da      	str	r2, [r3, #28]
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_MspInit+0x50>)
 8000e9e:	69da      	ldr	r2, [r3, #28]
 8000ea0:	2380      	movs	r3, #128	; 0x80
 8000ea2:	055b      	lsls	r3, r3, #21
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000eaa:	2302      	movs	r3, #2
 8000eac:	425b      	negs	r3, r3
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2103      	movs	r1, #3
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f000 f9ee 	bl	8001294 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b002      	add	sp, #8
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a09      	ldr	r2, [pc, #36]	; (8000ef8 <HAL_TIM_PWM_MspInit+0x34>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d10b      	bne.n	8000eee <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_TIM_PWM_MspInit+0x38>)
 8000ed8:	69da      	ldr	r2, [r3, #28]
 8000eda:	4b08      	ldr	r3, [pc, #32]	; (8000efc <HAL_TIM_PWM_MspInit+0x38>)
 8000edc:	2102      	movs	r1, #2
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	61da      	str	r2, [r3, #28]
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_TIM_PWM_MspInit+0x38>)
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b004      	add	sp, #16
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	40000400 	.word	0x40000400
 8000efc:	40021000 	.word	0x40021000

08000f00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <HAL_TIM_Base_MspInit+0x44>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d113      	bne.n	8000f3a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <HAL_TIM_Base_MspInit+0x48>)
 8000f14:	69da      	ldr	r2, [r3, #28]
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <HAL_TIM_Base_MspInit+0x48>)
 8000f18:	2110      	movs	r1, #16
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	61da      	str	r2, [r3, #28]
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <HAL_TIM_Base_MspInit+0x48>)
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	2210      	movs	r2, #16
 8000f24:	4013      	ands	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2103      	movs	r1, #3
 8000f2e:	2011      	movs	r0, #17
 8000f30:	f000 f9b0 	bl	8001294 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000f34:	2011      	movs	r0, #17
 8000f36:	f000 f9c2 	bl	80012be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b004      	add	sp, #16
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	40001000 	.word	0x40001000
 8000f48:	40021000 	.word	0x40021000

08000f4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	230c      	movs	r3, #12
 8000f56:	18fb      	adds	r3, r7, r3
 8000f58:	0018      	movs	r0, r3
 8000f5a:	2314      	movs	r3, #20
 8000f5c:	001a      	movs	r2, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	f004 fec9 	bl	8005cf6 <memset>
  if(htim->Instance==TIM3)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a15      	ldr	r2, [pc, #84]	; (8000fc0 <HAL_TIM_MspPostInit+0x74>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d124      	bne.n	8000fb8 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <HAL_TIM_MspPostInit+0x78>)
 8000f70:	695a      	ldr	r2, [r3, #20]
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <HAL_TIM_MspPostInit+0x78>)
 8000f74:	2180      	movs	r1, #128	; 0x80
 8000f76:	0289      	lsls	r1, r1, #10
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	615a      	str	r2, [r3, #20]
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_TIM_MspPostInit+0x78>)
 8000f7e:	695a      	ldr	r2, [r3, #20]
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	029b      	lsls	r3, r3, #10
 8000f84:	4013      	ands	r3, r2
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = IR_MOD_Out_Pin;
 8000f8a:	210c      	movs	r1, #12
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	2240      	movs	r2, #64	; 0x40
 8000f90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	2202      	movs	r2, #2
 8000f96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(IR_MOD_Out_GPIO_Port, &GPIO_InitStruct);
 8000faa:	187a      	adds	r2, r7, r1
 8000fac:	2390      	movs	r3, #144	; 0x90
 8000fae:	05db      	lsls	r3, r3, #23
 8000fb0:	0011      	movs	r1, r2
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f000 f994 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fb8:	46c0      	nop			; (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b008      	add	sp, #32
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40000400 	.word	0x40000400
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	0019      	movs	r1, r3
 8000fde:	2016      	movs	r0, #22
 8000fe0:	f000 f958 	bl	8001294 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000fe4:	2016      	movs	r0, #22
 8000fe6:	f000 f96a 	bl	80012be <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000fea:	4b21      	ldr	r3, [pc, #132]	; (8001070 <HAL_InitTick+0xa8>)
 8000fec:	699a      	ldr	r2, [r3, #24]
 8000fee:	4b20      	ldr	r3, [pc, #128]	; (8001070 <HAL_InitTick+0xa8>)
 8000ff0:	2180      	movs	r1, #128	; 0x80
 8000ff2:	02c9      	lsls	r1, r1, #11
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	619a      	str	r2, [r3, #24]
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <HAL_InitTick+0xa8>)
 8000ffa:	699a      	ldr	r2, [r3, #24]
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	02db      	lsls	r3, r3, #11
 8001000:	4013      	ands	r3, r2
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001006:	230c      	movs	r3, #12
 8001008:	18fa      	adds	r2, r7, r3
 800100a:	2310      	movs	r3, #16
 800100c:	18fb      	adds	r3, r7, r3
 800100e:	0011      	movs	r1, r2
 8001010:	0018      	movs	r0, r3
 8001012:	f000 ff81 	bl	8001f18 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001016:	f000 ff69 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 800101a:	0003      	movs	r3, r0
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	4914      	ldr	r1, [pc, #80]	; (8001074 <HAL_InitTick+0xac>)
 8001022:	0018      	movs	r0, r3
 8001024:	f7ff f870 	bl	8000108 <__udivsi3>
 8001028:	0003      	movs	r3, r0
 800102a:	3b01      	subs	r3, #1
 800102c:	623b      	str	r3, [r7, #32]

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800102e:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_InitTick+0xb0>)
 8001030:	4a12      	ldr	r2, [pc, #72]	; (800107c <HAL_InitTick+0xb4>)
 8001032:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001034:	4b10      	ldr	r3, [pc, #64]	; (8001078 <HAL_InitTick+0xb0>)
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <HAL_InitTick+0xb8>)
 8001038:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <HAL_InitTick+0xb0>)
 800103c:	6a3a      	ldr	r2, [r7, #32]
 800103e:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 8001040:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <HAL_InitTick+0xb0>)
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <HAL_InitTick+0xb0>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_InitTick+0xb0>)
 800104e:	0018      	movs	r0, r3
 8001050:	f000 ff8c 	bl	8001f6c <HAL_TIM_Base_Init>
 8001054:	1e03      	subs	r3, r0, #0
 8001056:	d105      	bne.n	8001064 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <HAL_InitTick+0xb0>)
 800105a:	0018      	movs	r0, r3
 800105c:	f000 ffd6 	bl	800200c <HAL_TIM_Base_Start_IT>
 8001060:	0003      	movs	r3, r0
 8001062:	e000      	b.n	8001066 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
}
 8001066:	0018      	movs	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	b00a      	add	sp, #40	; 0x28
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	40021000 	.word	0x40021000
 8001074:	000f4240 	.word	0x000f4240
 8001078:	200019e4 	.word	0x200019e4
 800107c:	40014800 	.word	0x40014800
 8001080:	000003e7 	.word	0x000003e7

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <HardFault_Handler+0x4>

08001094 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <TIM6_IRQHandler+0x14>)
 800109a:	0018      	movs	r0, r3
 800109c:	f001 f904 	bl	80022a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80010a0:	46c0      	nop			; (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	20001994 	.word	0x20001994

080010ac <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <TIM17_IRQHandler+0x14>)
 80010b2:	0018      	movs	r0, r3
 80010b4:	f001 f8f8 	bl	80022a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	200019e4 	.word	0x200019e4

080010c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80010c8:	46c0      	nop			; (mov r8, r8)
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010d0:	480d      	ldr	r0, [pc, #52]	; (8001108 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d4:	480d      	ldr	r0, [pc, #52]	; (800110c <LoopForever+0x6>)
  ldr r1, =_edata
 80010d6:	490e      	ldr	r1, [pc, #56]	; (8001110 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010d8:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <LoopForever+0xe>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010ec:	4c0b      	ldr	r4, [pc, #44]	; (800111c <LoopForever+0x16>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010fa:	f7ff ffe3 	bl	80010c4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80010fe:	f004 fdcd 	bl	8005c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001102:	f7ff fa2b 	bl	800055c <main>

08001106 <LoopForever>:

LoopForever:
    b LoopForever
 8001106:	e7fe      	b.n	8001106 <LoopForever>
  ldr   r0, =_estack
 8001108:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800110c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001110:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001114:	08005f68 	.word	0x08005f68
  ldr r2, =_sbss
 8001118:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800111c:	20001aa0 	.word	0x20001aa0

08001120 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC1_IRQHandler>
	...

08001124 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <HAL_Init+0x24>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_Init+0x24>)
 800112e:	2110      	movs	r1, #16
 8001130:	430a      	orrs	r2, r1
 8001132:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001134:	2000      	movs	r0, #0
 8001136:	f7ff ff47 	bl	8000fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800113a:	f7ff fe99 	bl	8000e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	0018      	movs	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	40022000 	.word	0x40022000

0800114c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_IncTick+0x1c>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	001a      	movs	r2, r3
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_IncTick+0x20>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	18d2      	adds	r2, r2, r3
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <HAL_IncTick+0x20>)
 800115e:	601a      	str	r2, [r3, #0]
}
 8001160:	46c0      	nop			; (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	20000008 	.word	0x20000008
 800116c:	20001a2c 	.word	0x20001a2c

08001170 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b02      	ldr	r3, [pc, #8]	; (8001180 <HAL_GetTick+0x10>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	0018      	movs	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	20001a2c 	.word	0x20001a2c

08001184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	0002      	movs	r2, r0
 800118c:	1dfb      	adds	r3, r7, #7
 800118e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001190:	1dfb      	adds	r3, r7, #7
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b7f      	cmp	r3, #127	; 0x7f
 8001196:	d809      	bhi.n	80011ac <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001198:	1dfb      	adds	r3, r7, #7
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	001a      	movs	r2, r3
 800119e:	231f      	movs	r3, #31
 80011a0:	401a      	ands	r2, r3
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <__NVIC_EnableIRQ+0x30>)
 80011a4:	2101      	movs	r1, #1
 80011a6:	4091      	lsls	r1, r2
 80011a8:	000a      	movs	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]
  }
}
 80011ac:	46c0      	nop			; (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b002      	add	sp, #8
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	e000e100 	.word	0xe000e100

080011b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	0002      	movs	r2, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	1dfb      	adds	r3, r7, #7
 80011c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b7f      	cmp	r3, #127	; 0x7f
 80011cc:	d828      	bhi.n	8001220 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ce:	4a2f      	ldr	r2, [pc, #188]	; (800128c <__NVIC_SetPriority+0xd4>)
 80011d0:	1dfb      	adds	r3, r7, #7
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	33c0      	adds	r3, #192	; 0xc0
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	589b      	ldr	r3, [r3, r2]
 80011de:	1dfa      	adds	r2, r7, #7
 80011e0:	7812      	ldrb	r2, [r2, #0]
 80011e2:	0011      	movs	r1, r2
 80011e4:	2203      	movs	r2, #3
 80011e6:	400a      	ands	r2, r1
 80011e8:	00d2      	lsls	r2, r2, #3
 80011ea:	21ff      	movs	r1, #255	; 0xff
 80011ec:	4091      	lsls	r1, r2
 80011ee:	000a      	movs	r2, r1
 80011f0:	43d2      	mvns	r2, r2
 80011f2:	401a      	ands	r2, r3
 80011f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	019b      	lsls	r3, r3, #6
 80011fa:	22ff      	movs	r2, #255	; 0xff
 80011fc:	401a      	ands	r2, r3
 80011fe:	1dfb      	adds	r3, r7, #7
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	0018      	movs	r0, r3
 8001204:	2303      	movs	r3, #3
 8001206:	4003      	ands	r3, r0
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800120c:	481f      	ldr	r0, [pc, #124]	; (800128c <__NVIC_SetPriority+0xd4>)
 800120e:	1dfb      	adds	r3, r7, #7
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b25b      	sxtb	r3, r3
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	430a      	orrs	r2, r1
 8001218:	33c0      	adds	r3, #192	; 0xc0
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800121e:	e031      	b.n	8001284 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001220:	4a1b      	ldr	r2, [pc, #108]	; (8001290 <__NVIC_SetPriority+0xd8>)
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	0019      	movs	r1, r3
 8001228:	230f      	movs	r3, #15
 800122a:	400b      	ands	r3, r1
 800122c:	3b08      	subs	r3, #8
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	3306      	adds	r3, #6
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	18d3      	adds	r3, r2, r3
 8001236:	3304      	adds	r3, #4
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	1dfa      	adds	r2, r7, #7
 800123c:	7812      	ldrb	r2, [r2, #0]
 800123e:	0011      	movs	r1, r2
 8001240:	2203      	movs	r2, #3
 8001242:	400a      	ands	r2, r1
 8001244:	00d2      	lsls	r2, r2, #3
 8001246:	21ff      	movs	r1, #255	; 0xff
 8001248:	4091      	lsls	r1, r2
 800124a:	000a      	movs	r2, r1
 800124c:	43d2      	mvns	r2, r2
 800124e:	401a      	ands	r2, r3
 8001250:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	019b      	lsls	r3, r3, #6
 8001256:	22ff      	movs	r2, #255	; 0xff
 8001258:	401a      	ands	r2, r3
 800125a:	1dfb      	adds	r3, r7, #7
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	0018      	movs	r0, r3
 8001260:	2303      	movs	r3, #3
 8001262:	4003      	ands	r3, r0
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001268:	4809      	ldr	r0, [pc, #36]	; (8001290 <__NVIC_SetPriority+0xd8>)
 800126a:	1dfb      	adds	r3, r7, #7
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	001c      	movs	r4, r3
 8001270:	230f      	movs	r3, #15
 8001272:	4023      	ands	r3, r4
 8001274:	3b08      	subs	r3, #8
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	430a      	orrs	r2, r1
 800127a:	3306      	adds	r3, #6
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	18c3      	adds	r3, r0, r3
 8001280:	3304      	adds	r3, #4
 8001282:	601a      	str	r2, [r3, #0]
}
 8001284:	46c0      	nop			; (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	b003      	add	sp, #12
 800128a:	bd90      	pop	{r4, r7, pc}
 800128c:	e000e100 	.word	0xe000e100
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	210f      	movs	r1, #15
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	1c02      	adds	r2, r0, #0
 80012a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	187b      	adds	r3, r7, r1
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b25b      	sxtb	r3, r3
 80012ae:	0011      	movs	r1, r2
 80012b0:	0018      	movs	r0, r3
 80012b2:	f7ff ff81 	bl	80011b8 <__NVIC_SetPriority>
}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b004      	add	sp, #16
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	0002      	movs	r2, r0
 80012c6:	1dfb      	adds	r3, r7, #7
 80012c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ca:	1dfb      	adds	r3, r7, #7
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	0018      	movs	r0, r3
 80012d2:	f7ff ff57 	bl	8001184 <__NVIC_EnableIRQ>
}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	46bd      	mov	sp, r7
 80012da:	b002      	add	sp, #8
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ee:	e14f      	b.n	8001590 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2101      	movs	r1, #1
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	4091      	lsls	r1, r2
 80012fa:	000a      	movs	r2, r1
 80012fc:	4013      	ands	r3, r2
 80012fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d100      	bne.n	8001308 <HAL_GPIO_Init+0x28>
 8001306:	e140      	b.n	800158a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d00b      	beq.n	8001328 <HAL_GPIO_Init+0x48>
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d007      	beq.n	8001328 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800131c:	2b11      	cmp	r3, #17
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b12      	cmp	r3, #18
 8001326:	d130      	bne.n	800138a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	409a      	lsls	r2, r3
 8001336:	0013      	movs	r3, r2
 8001338:	43da      	mvns	r2, r3
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	409a      	lsls	r2, r3
 800134a:	0013      	movs	r3, r2
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800135e:	2201      	movs	r2, #1
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	409a      	lsls	r2, r3
 8001364:	0013      	movs	r3, r2
 8001366:	43da      	mvns	r2, r3
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	2201      	movs	r2, #1
 8001376:	401a      	ands	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	409a      	lsls	r2, r3
 800137c:	0013      	movs	r3, r2
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	2203      	movs	r2, #3
 8001396:	409a      	lsls	r2, r3
 8001398:	0013      	movs	r3, r2
 800139a:	43da      	mvns	r2, r3
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	409a      	lsls	r2, r3
 80013ac:	0013      	movs	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0xea>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b12      	cmp	r3, #18
 80013c8:	d123      	bne.n	8001412 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	08da      	lsrs	r2, r3, #3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3208      	adds	r2, #8
 80013d2:	0092      	lsls	r2, r2, #2
 80013d4:	58d3      	ldr	r3, [r2, r3]
 80013d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	2207      	movs	r2, #7
 80013dc:	4013      	ands	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	220f      	movs	r2, #15
 80013e2:	409a      	lsls	r2, r3
 80013e4:	0013      	movs	r3, r2
 80013e6:	43da      	mvns	r2, r3
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	691a      	ldr	r2, [r3, #16]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	2107      	movs	r1, #7
 80013f6:	400b      	ands	r3, r1
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	409a      	lsls	r2, r3
 80013fc:	0013      	movs	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	08da      	lsrs	r2, r3, #3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3208      	adds	r2, #8
 800140c:	0092      	lsls	r2, r2, #2
 800140e:	6939      	ldr	r1, [r7, #16]
 8001410:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	2203      	movs	r2, #3
 800141e:	409a      	lsls	r2, r3
 8001420:	0013      	movs	r3, r2
 8001422:	43da      	mvns	r2, r3
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2203      	movs	r2, #3
 8001430:	401a      	ands	r2, r3
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	409a      	lsls	r2, r3
 8001438:	0013      	movs	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	055b      	lsls	r3, r3, #21
 800144e:	4013      	ands	r3, r2
 8001450:	d100      	bne.n	8001454 <HAL_GPIO_Init+0x174>
 8001452:	e09a      	b.n	800158a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001454:	4b54      	ldr	r3, [pc, #336]	; (80015a8 <HAL_GPIO_Init+0x2c8>)
 8001456:	699a      	ldr	r2, [r3, #24]
 8001458:	4b53      	ldr	r3, [pc, #332]	; (80015a8 <HAL_GPIO_Init+0x2c8>)
 800145a:	2101      	movs	r1, #1
 800145c:	430a      	orrs	r2, r1
 800145e:	619a      	str	r2, [r3, #24]
 8001460:	4b51      	ldr	r3, [pc, #324]	; (80015a8 <HAL_GPIO_Init+0x2c8>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	2201      	movs	r2, #1
 8001466:	4013      	ands	r3, r2
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800146c:	4a4f      	ldr	r2, [pc, #316]	; (80015ac <HAL_GPIO_Init+0x2cc>)
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	089b      	lsrs	r3, r3, #2
 8001472:	3302      	adds	r3, #2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	589b      	ldr	r3, [r3, r2]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	2203      	movs	r2, #3
 800147e:	4013      	ands	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	220f      	movs	r2, #15
 8001484:	409a      	lsls	r2, r3
 8001486:	0013      	movs	r3, r2
 8001488:	43da      	mvns	r2, r3
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	2390      	movs	r3, #144	; 0x90
 8001494:	05db      	lsls	r3, r3, #23
 8001496:	429a      	cmp	r2, r3
 8001498:	d013      	beq.n	80014c2 <HAL_GPIO_Init+0x1e2>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a44      	ldr	r2, [pc, #272]	; (80015b0 <HAL_GPIO_Init+0x2d0>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d00d      	beq.n	80014be <HAL_GPIO_Init+0x1de>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a43      	ldr	r2, [pc, #268]	; (80015b4 <HAL_GPIO_Init+0x2d4>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d007      	beq.n	80014ba <HAL_GPIO_Init+0x1da>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a42      	ldr	r2, [pc, #264]	; (80015b8 <HAL_GPIO_Init+0x2d8>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d101      	bne.n	80014b6 <HAL_GPIO_Init+0x1d6>
 80014b2:	2303      	movs	r3, #3
 80014b4:	e006      	b.n	80014c4 <HAL_GPIO_Init+0x1e4>
 80014b6:	2305      	movs	r3, #5
 80014b8:	e004      	b.n	80014c4 <HAL_GPIO_Init+0x1e4>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e002      	b.n	80014c4 <HAL_GPIO_Init+0x1e4>
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <HAL_GPIO_Init+0x1e4>
 80014c2:	2300      	movs	r3, #0
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	2103      	movs	r1, #3
 80014c8:	400a      	ands	r2, r1
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	4093      	lsls	r3, r2
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014d4:	4935      	ldr	r1, [pc, #212]	; (80015ac <HAL_GPIO_Init+0x2cc>)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	089b      	lsrs	r3, r3, #2
 80014da:	3302      	adds	r3, #2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e2:	4b36      	ldr	r3, [pc, #216]	; (80015bc <HAL_GPIO_Init+0x2dc>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	43da      	mvns	r2, r3
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	2380      	movs	r3, #128	; 0x80
 80014f8:	025b      	lsls	r3, r3, #9
 80014fa:	4013      	ands	r3, r2
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001506:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <HAL_GPIO_Init+0x2dc>)
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800150c:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <HAL_GPIO_Init+0x2dc>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	43da      	mvns	r2, r3
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	029b      	lsls	r3, r3, #10
 8001524:	4013      	ands	r3, r2
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001530:	4b22      	ldr	r3, [pc, #136]	; (80015bc <HAL_GPIO_Init+0x2dc>)
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001536:	4b21      	ldr	r3, [pc, #132]	; (80015bc <HAL_GPIO_Init+0x2dc>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	43da      	mvns	r2, r3
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	035b      	lsls	r3, r3, #13
 800154e:	4013      	ands	r3, r2
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800155a:	4b18      	ldr	r3, [pc, #96]	; (80015bc <HAL_GPIO_Init+0x2dc>)
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <HAL_GPIO_Init+0x2dc>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	43da      	mvns	r2, r3
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	2380      	movs	r3, #128	; 0x80
 8001576:	039b      	lsls	r3, r3, #14
 8001578:	4013      	ands	r3, r2
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_GPIO_Init+0x2dc>)
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	3301      	adds	r3, #1
 800158e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	40da      	lsrs	r2, r3
 8001598:	1e13      	subs	r3, r2, #0
 800159a:	d000      	beq.n	800159e <HAL_GPIO_Init+0x2be>
 800159c:	e6a8      	b.n	80012f0 <HAL_GPIO_Init+0x10>
  } 
}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b006      	add	sp, #24
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40010000 	.word	0x40010000
 80015b0:	48000400 	.word	0x48000400
 80015b4:	48000800 	.word	0x48000800
 80015b8:	48000c00 	.word	0x48000c00
 80015bc:	40010400 	.word	0x40010400

080015c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	000a      	movs	r2, r1
 80015ca:	1cbb      	adds	r3, r7, #2
 80015cc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	1cba      	adds	r2, r7, #2
 80015d4:	8812      	ldrh	r2, [r2, #0]
 80015d6:	4013      	ands	r3, r2
 80015d8:	d004      	beq.n	80015e4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80015da:	230f      	movs	r3, #15
 80015dc:	18fb      	adds	r3, r7, r3
 80015de:	2201      	movs	r2, #1
 80015e0:	701a      	strb	r2, [r3, #0]
 80015e2:	e003      	b.n	80015ec <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015e4:	230f      	movs	r3, #15
 80015e6:	18fb      	adds	r3, r7, r3
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80015ec:	230f      	movs	r3, #15
 80015ee:	18fb      	adds	r3, r7, r3
 80015f0:	781b      	ldrb	r3, [r3, #0]
  }
 80015f2:	0018      	movs	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b004      	add	sp, #16
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	0008      	movs	r0, r1
 8001604:	0011      	movs	r1, r2
 8001606:	1cbb      	adds	r3, r7, #2
 8001608:	1c02      	adds	r2, r0, #0
 800160a:	801a      	strh	r2, [r3, #0]
 800160c:	1c7b      	adds	r3, r7, #1
 800160e:	1c0a      	adds	r2, r1, #0
 8001610:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001612:	1c7b      	adds	r3, r7, #1
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d004      	beq.n	8001624 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800161a:	1cbb      	adds	r3, r7, #2
 800161c:	881a      	ldrh	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001622:	e003      	b.n	800162c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001624:	1cbb      	adds	r3, r7, #2
 8001626:	881a      	ldrh	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800162c:	46c0      	nop			; (mov r8, r8)
 800162e:	46bd      	mov	sp, r7
 8001630:	b002      	add	sp, #8
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e305      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2201      	movs	r2, #1
 800164c:	4013      	ands	r3, r2
 800164e:	d100      	bne.n	8001652 <HAL_RCC_OscConfig+0x1e>
 8001650:	e08d      	b.n	800176e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001652:	4bc5      	ldr	r3, [pc, #788]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	220c      	movs	r2, #12
 8001658:	4013      	ands	r3, r2
 800165a:	2b04      	cmp	r3, #4
 800165c:	d00e      	beq.n	800167c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800165e:	4bc2      	ldr	r3, [pc, #776]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	220c      	movs	r2, #12
 8001664:	4013      	ands	r3, r2
 8001666:	2b08      	cmp	r3, #8
 8001668:	d116      	bne.n	8001698 <HAL_RCC_OscConfig+0x64>
 800166a:	4bbf      	ldr	r3, [pc, #764]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	23c0      	movs	r3, #192	; 0xc0
 8001670:	025b      	lsls	r3, r3, #9
 8001672:	401a      	ands	r2, r3
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	025b      	lsls	r3, r3, #9
 8001678:	429a      	cmp	r2, r3
 800167a:	d10d      	bne.n	8001698 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167c:	4bba      	ldr	r3, [pc, #744]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	029b      	lsls	r3, r3, #10
 8001684:	4013      	ands	r3, r2
 8001686:	d100      	bne.n	800168a <HAL_RCC_OscConfig+0x56>
 8001688:	e070      	b.n	800176c <HAL_RCC_OscConfig+0x138>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d000      	beq.n	8001694 <HAL_RCC_OscConfig+0x60>
 8001692:	e06b      	b.n	800176c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e2dc      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d107      	bne.n	80016b0 <HAL_RCC_OscConfig+0x7c>
 80016a0:	4bb1      	ldr	r3, [pc, #708]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4bb0      	ldr	r3, [pc, #704]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80016a6:	2180      	movs	r1, #128	; 0x80
 80016a8:	0249      	lsls	r1, r1, #9
 80016aa:	430a      	orrs	r2, r1
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	e02f      	b.n	8001710 <HAL_RCC_OscConfig+0xdc>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10c      	bne.n	80016d2 <HAL_RCC_OscConfig+0x9e>
 80016b8:	4bab      	ldr	r3, [pc, #684]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4baa      	ldr	r3, [pc, #680]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80016be:	49ab      	ldr	r1, [pc, #684]	; (800196c <HAL_RCC_OscConfig+0x338>)
 80016c0:	400a      	ands	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	4ba8      	ldr	r3, [pc, #672]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4ba7      	ldr	r3, [pc, #668]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80016ca:	49a9      	ldr	r1, [pc, #676]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 80016cc:	400a      	ands	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	e01e      	b.n	8001710 <HAL_RCC_OscConfig+0xdc>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b05      	cmp	r3, #5
 80016d8:	d10e      	bne.n	80016f8 <HAL_RCC_OscConfig+0xc4>
 80016da:	4ba3      	ldr	r3, [pc, #652]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	4ba2      	ldr	r3, [pc, #648]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80016e0:	2180      	movs	r1, #128	; 0x80
 80016e2:	02c9      	lsls	r1, r1, #11
 80016e4:	430a      	orrs	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	4b9f      	ldr	r3, [pc, #636]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b9e      	ldr	r3, [pc, #632]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80016ee:	2180      	movs	r1, #128	; 0x80
 80016f0:	0249      	lsls	r1, r1, #9
 80016f2:	430a      	orrs	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	e00b      	b.n	8001710 <HAL_RCC_OscConfig+0xdc>
 80016f8:	4b9b      	ldr	r3, [pc, #620]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b9a      	ldr	r3, [pc, #616]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80016fe:	499b      	ldr	r1, [pc, #620]	; (800196c <HAL_RCC_OscConfig+0x338>)
 8001700:	400a      	ands	r2, r1
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	4b98      	ldr	r3, [pc, #608]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b97      	ldr	r3, [pc, #604]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 800170a:	4999      	ldr	r1, [pc, #612]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 800170c:	400a      	ands	r2, r1
 800170e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d014      	beq.n	8001742 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7ff fd2a 	bl	8001170 <HAL_GetTick>
 800171c:	0003      	movs	r3, r0
 800171e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001722:	f7ff fd25 	bl	8001170 <HAL_GetTick>
 8001726:	0002      	movs	r2, r0
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b64      	cmp	r3, #100	; 0x64
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e28e      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001734:	4b8c      	ldr	r3, [pc, #560]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	029b      	lsls	r3, r3, #10
 800173c:	4013      	ands	r3, r2
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0xee>
 8001740:	e015      	b.n	800176e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7ff fd15 	bl	8001170 <HAL_GetTick>
 8001746:	0003      	movs	r3, r0
 8001748:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800174c:	f7ff fd10 	bl	8001170 <HAL_GetTick>
 8001750:	0002      	movs	r2, r0
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b64      	cmp	r3, #100	; 0x64
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e279      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175e:	4b82      	ldr	r3, [pc, #520]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	029b      	lsls	r3, r3, #10
 8001766:	4013      	ands	r3, r2
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x118>
 800176a:	e000      	b.n	800176e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2202      	movs	r2, #2
 8001774:	4013      	ands	r3, r2
 8001776:	d100      	bne.n	800177a <HAL_RCC_OscConfig+0x146>
 8001778:	e06c      	b.n	8001854 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800177a:	4b7b      	ldr	r3, [pc, #492]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	220c      	movs	r2, #12
 8001780:	4013      	ands	r3, r2
 8001782:	d00e      	beq.n	80017a2 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001784:	4b78      	ldr	r3, [pc, #480]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	220c      	movs	r2, #12
 800178a:	4013      	ands	r3, r2
 800178c:	2b08      	cmp	r3, #8
 800178e:	d11f      	bne.n	80017d0 <HAL_RCC_OscConfig+0x19c>
 8001790:	4b75      	ldr	r3, [pc, #468]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	23c0      	movs	r3, #192	; 0xc0
 8001796:	025b      	lsls	r3, r3, #9
 8001798:	401a      	ands	r2, r3
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	429a      	cmp	r2, r3
 80017a0:	d116      	bne.n	80017d0 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a2:	4b71      	ldr	r3, [pc, #452]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2202      	movs	r2, #2
 80017a8:	4013      	ands	r3, r2
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_OscConfig+0x184>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e24c      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b8:	4b6b      	ldr	r3, [pc, #428]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	22f8      	movs	r2, #248	; 0xf8
 80017be:	4393      	bics	r3, r2
 80017c0:	0019      	movs	r1, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	00da      	lsls	r2, r3, #3
 80017c8:	4b67      	ldr	r3, [pc, #412]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80017ca:	430a      	orrs	r2, r1
 80017cc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ce:	e041      	b.n	8001854 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d024      	beq.n	8001822 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d8:	4b63      	ldr	r3, [pc, #396]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b62      	ldr	r3, [pc, #392]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80017de:	2101      	movs	r1, #1
 80017e0:	430a      	orrs	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fcc4 	bl	8001170 <HAL_GetTick>
 80017e8:	0003      	movs	r3, r0
 80017ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ee:	f7ff fcbf 	bl	8001170 <HAL_GetTick>
 80017f2:	0002      	movs	r2, r0
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e228      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001800:	4b59      	ldr	r3, [pc, #356]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2202      	movs	r2, #2
 8001806:	4013      	ands	r3, r2
 8001808:	d0f1      	beq.n	80017ee <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180a:	4b57      	ldr	r3, [pc, #348]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	22f8      	movs	r2, #248	; 0xf8
 8001810:	4393      	bics	r3, r2
 8001812:	0019      	movs	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	00da      	lsls	r2, r3, #3
 800181a:	4b53      	ldr	r3, [pc, #332]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 800181c:	430a      	orrs	r2, r1
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	e018      	b.n	8001854 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001822:	4b51      	ldr	r3, [pc, #324]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	4b50      	ldr	r3, [pc, #320]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 8001828:	2101      	movs	r1, #1
 800182a:	438a      	bics	r2, r1
 800182c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff fc9f 	bl	8001170 <HAL_GetTick>
 8001832:	0003      	movs	r3, r0
 8001834:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001838:	f7ff fc9a 	bl	8001170 <HAL_GetTick>
 800183c:	0002      	movs	r2, r0
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e203      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184a:	4b47      	ldr	r3, [pc, #284]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2202      	movs	r2, #2
 8001850:	4013      	ands	r3, r2
 8001852:	d1f1      	bne.n	8001838 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2208      	movs	r2, #8
 800185a:	4013      	ands	r3, r2
 800185c:	d036      	beq.n	80018cc <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d019      	beq.n	800189a <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001866:	4b40      	ldr	r3, [pc, #256]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 8001868:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800186a:	4b3f      	ldr	r3, [pc, #252]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 800186c:	2101      	movs	r1, #1
 800186e:	430a      	orrs	r2, r1
 8001870:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001872:	f7ff fc7d 	bl	8001170 <HAL_GetTick>
 8001876:	0003      	movs	r3, r0
 8001878:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800187c:	f7ff fc78 	bl	8001170 <HAL_GetTick>
 8001880:	0002      	movs	r2, r0
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e1e1      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800188e:	4b36      	ldr	r3, [pc, #216]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 8001890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001892:	2202      	movs	r2, #2
 8001894:	4013      	ands	r3, r2
 8001896:	d0f1      	beq.n	800187c <HAL_RCC_OscConfig+0x248>
 8001898:	e018      	b.n	80018cc <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800189a:	4b33      	ldr	r3, [pc, #204]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 800189c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800189e:	4b32      	ldr	r3, [pc, #200]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80018a0:	2101      	movs	r1, #1
 80018a2:	438a      	bics	r2, r1
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a6:	f7ff fc63 	bl	8001170 <HAL_GetTick>
 80018aa:	0003      	movs	r3, r0
 80018ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018b0:	f7ff fc5e 	bl	8001170 <HAL_GetTick>
 80018b4:	0002      	movs	r2, r0
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e1c7      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c2:	4b29      	ldr	r3, [pc, #164]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	2202      	movs	r2, #2
 80018c8:	4013      	ands	r3, r2
 80018ca:	d1f1      	bne.n	80018b0 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2204      	movs	r2, #4
 80018d2:	4013      	ands	r3, r2
 80018d4:	d100      	bne.n	80018d8 <HAL_RCC_OscConfig+0x2a4>
 80018d6:	e0b5      	b.n	8001a44 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d8:	231f      	movs	r3, #31
 80018da:	18fb      	adds	r3, r7, r3
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e0:	4b21      	ldr	r3, [pc, #132]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80018e2:	69da      	ldr	r2, [r3, #28]
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	055b      	lsls	r3, r3, #21
 80018e8:	4013      	ands	r3, r2
 80018ea:	d111      	bne.n	8001910 <HAL_RCC_OscConfig+0x2dc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80018ee:	69da      	ldr	r2, [r3, #28]
 80018f0:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80018f2:	2180      	movs	r1, #128	; 0x80
 80018f4:	0549      	lsls	r1, r1, #21
 80018f6:	430a      	orrs	r2, r1
 80018f8:	61da      	str	r2, [r3, #28]
 80018fa:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80018fc:	69da      	ldr	r2, [r3, #28]
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	055b      	lsls	r3, r3, #21
 8001902:	4013      	ands	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001908:	231f      	movs	r3, #31
 800190a:	18fb      	adds	r3, r7, r3
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001910:	4b18      	ldr	r3, [pc, #96]	; (8001974 <HAL_RCC_OscConfig+0x340>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4013      	ands	r3, r2
 800191a:	d11a      	bne.n	8001952 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <HAL_RCC_OscConfig+0x340>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <HAL_RCC_OscConfig+0x340>)
 8001922:	2180      	movs	r1, #128	; 0x80
 8001924:	0049      	lsls	r1, r1, #1
 8001926:	430a      	orrs	r2, r1
 8001928:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800192a:	f7ff fc21 	bl	8001170 <HAL_GetTick>
 800192e:	0003      	movs	r3, r0
 8001930:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x312>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001934:	f7ff fc1c 	bl	8001170 <HAL_GetTick>
 8001938:	0002      	movs	r2, r0
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b64      	cmp	r3, #100	; 0x64
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x312>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e185      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001946:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_RCC_OscConfig+0x340>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4013      	ands	r3, r2
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x300>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d10e      	bne.n	8001978 <HAL_RCC_OscConfig+0x344>
 800195a:	4b03      	ldr	r3, [pc, #12]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 800195c:	6a1a      	ldr	r2, [r3, #32]
 800195e:	4b02      	ldr	r3, [pc, #8]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 8001960:	2101      	movs	r1, #1
 8001962:	430a      	orrs	r2, r1
 8001964:	621a      	str	r2, [r3, #32]
 8001966:	e035      	b.n	80019d4 <HAL_RCC_OscConfig+0x3a0>
 8001968:	40021000 	.word	0x40021000
 800196c:	fffeffff 	.word	0xfffeffff
 8001970:	fffbffff 	.word	0xfffbffff
 8001974:	40007000 	.word	0x40007000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10c      	bne.n	800199a <HAL_RCC_OscConfig+0x366>
 8001980:	4bb6      	ldr	r3, [pc, #728]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001982:	6a1a      	ldr	r2, [r3, #32]
 8001984:	4bb5      	ldr	r3, [pc, #724]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001986:	2101      	movs	r1, #1
 8001988:	438a      	bics	r2, r1
 800198a:	621a      	str	r2, [r3, #32]
 800198c:	4bb3      	ldr	r3, [pc, #716]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 800198e:	6a1a      	ldr	r2, [r3, #32]
 8001990:	4bb2      	ldr	r3, [pc, #712]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001992:	2104      	movs	r1, #4
 8001994:	438a      	bics	r2, r1
 8001996:	621a      	str	r2, [r3, #32]
 8001998:	e01c      	b.n	80019d4 <HAL_RCC_OscConfig+0x3a0>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2b05      	cmp	r3, #5
 80019a0:	d10c      	bne.n	80019bc <HAL_RCC_OscConfig+0x388>
 80019a2:	4bae      	ldr	r3, [pc, #696]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 80019a4:	6a1a      	ldr	r2, [r3, #32]
 80019a6:	4bad      	ldr	r3, [pc, #692]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 80019a8:	2104      	movs	r1, #4
 80019aa:	430a      	orrs	r2, r1
 80019ac:	621a      	str	r2, [r3, #32]
 80019ae:	4bab      	ldr	r3, [pc, #684]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 80019b0:	6a1a      	ldr	r2, [r3, #32]
 80019b2:	4baa      	ldr	r3, [pc, #680]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 80019b4:	2101      	movs	r1, #1
 80019b6:	430a      	orrs	r2, r1
 80019b8:	621a      	str	r2, [r3, #32]
 80019ba:	e00b      	b.n	80019d4 <HAL_RCC_OscConfig+0x3a0>
 80019bc:	4ba7      	ldr	r3, [pc, #668]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 80019be:	6a1a      	ldr	r2, [r3, #32]
 80019c0:	4ba6      	ldr	r3, [pc, #664]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 80019c2:	2101      	movs	r1, #1
 80019c4:	438a      	bics	r2, r1
 80019c6:	621a      	str	r2, [r3, #32]
 80019c8:	4ba4      	ldr	r3, [pc, #656]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 80019ca:	6a1a      	ldr	r2, [r3, #32]
 80019cc:	4ba3      	ldr	r3, [pc, #652]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 80019ce:	2104      	movs	r1, #4
 80019d0:	438a      	bics	r2, r1
 80019d2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d014      	beq.n	8001a06 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019dc:	f7ff fbc8 	bl	8001170 <HAL_GetTick>
 80019e0:	0003      	movs	r3, r0
 80019e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e4:	e009      	b.n	80019fa <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e6:	f7ff fbc3 	bl	8001170 <HAL_GetTick>
 80019ea:	0002      	movs	r2, r0
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	4a9b      	ldr	r2, [pc, #620]	; (8001c60 <HAL_RCC_OscConfig+0x62c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e12b      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fa:	4b98      	ldr	r3, [pc, #608]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	2202      	movs	r2, #2
 8001a00:	4013      	ands	r3, r2
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x3b2>
 8001a04:	e013      	b.n	8001a2e <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a06:	f7ff fbb3 	bl	8001170 <HAL_GetTick>
 8001a0a:	0003      	movs	r3, r0
 8001a0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0e:	e009      	b.n	8001a24 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a10:	f7ff fbae 	bl	8001170 <HAL_GetTick>
 8001a14:	0002      	movs	r2, r0
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	4a91      	ldr	r2, [pc, #580]	; (8001c60 <HAL_RCC_OscConfig+0x62c>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e116      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a24:	4b8d      	ldr	r3, [pc, #564]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	2202      	movs	r2, #2
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a2e:	231f      	movs	r3, #31
 8001a30:	18fb      	adds	r3, r7, r3
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d105      	bne.n	8001a44 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a38:	4b88      	ldr	r3, [pc, #544]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001a3a:	69da      	ldr	r2, [r3, #28]
 8001a3c:	4b87      	ldr	r3, [pc, #540]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001a3e:	4989      	ldr	r1, [pc, #548]	; (8001c64 <HAL_RCC_OscConfig+0x630>)
 8001a40:	400a      	ands	r2, r1
 8001a42:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2210      	movs	r2, #16
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d063      	beq.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d12a      	bne.n	8001aac <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a56:	4b81      	ldr	r3, [pc, #516]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a5a:	4b80      	ldr	r3, [pc, #512]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001a5c:	2104      	movs	r1, #4
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001a62:	4b7e      	ldr	r3, [pc, #504]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a66:	4b7d      	ldr	r3, [pc, #500]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001a68:	2101      	movs	r1, #1
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6e:	f7ff fb7f 	bl	8001170 <HAL_GetTick>
 8001a72:	0003      	movs	r3, r0
 8001a74:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a78:	f7ff fb7a 	bl	8001170 <HAL_GetTick>
 8001a7c:	0002      	movs	r2, r0
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e0e3      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a8a:	4b74      	ldr	r3, [pc, #464]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8e:	2202      	movs	r2, #2
 8001a90:	4013      	ands	r3, r2
 8001a92:	d0f1      	beq.n	8001a78 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a94:	4b71      	ldr	r3, [pc, #452]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a98:	22f8      	movs	r2, #248	; 0xf8
 8001a9a:	4393      	bics	r3, r2
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	00da      	lsls	r2, r3, #3
 8001aa4:	4b6d      	ldr	r3, [pc, #436]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	635a      	str	r2, [r3, #52]	; 0x34
 8001aaa:	e034      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	3305      	adds	r3, #5
 8001ab2:	d111      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ab4:	4b69      	ldr	r3, [pc, #420]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ab8:	4b68      	ldr	r3, [pc, #416]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001aba:	2104      	movs	r1, #4
 8001abc:	438a      	bics	r2, r1
 8001abe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ac0:	4b66      	ldr	r3, [pc, #408]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac4:	22f8      	movs	r2, #248	; 0xf8
 8001ac6:	4393      	bics	r3, r2
 8001ac8:	0019      	movs	r1, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	00da      	lsls	r2, r3, #3
 8001ad0:	4b62      	ldr	r3, [pc, #392]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ad6:	e01e      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ad8:	4b60      	ldr	r3, [pc, #384]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001ada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001adc:	4b5f      	ldr	r3, [pc, #380]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001ade:	2104      	movs	r1, #4
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001ae4:	4b5d      	ldr	r3, [pc, #372]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001ae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ae8:	4b5c      	ldr	r3, [pc, #368]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001aea:	2101      	movs	r1, #1
 8001aec:	438a      	bics	r2, r1
 8001aee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af0:	f7ff fb3e 	bl	8001170 <HAL_GetTick>
 8001af4:	0003      	movs	r3, r0
 8001af6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001afa:	f7ff fb39 	bl	8001170 <HAL_GetTick>
 8001afe:	0002      	movs	r2, r0
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e0a2      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b0c:	4b53      	ldr	r3, [pc, #332]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b10:	2202      	movs	r2, #2
 8001b12:	4013      	ands	r3, r2
 8001b14:	d1f1      	bne.n	8001afa <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d100      	bne.n	8001b20 <HAL_RCC_OscConfig+0x4ec>
 8001b1e:	e097      	b.n	8001c50 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b20:	4b4e      	ldr	r3, [pc, #312]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	220c      	movs	r2, #12
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d100      	bne.n	8001b2e <HAL_RCC_OscConfig+0x4fa>
 8001b2c:	e06b      	b.n	8001c06 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d14c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b36:	4b49      	ldr	r3, [pc, #292]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	4b48      	ldr	r3, [pc, #288]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001b3c:	494a      	ldr	r1, [pc, #296]	; (8001c68 <HAL_RCC_OscConfig+0x634>)
 8001b3e:	400a      	ands	r2, r1
 8001b40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b42:	f7ff fb15 	bl	8001170 <HAL_GetTick>
 8001b46:	0003      	movs	r3, r0
 8001b48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4c:	f7ff fb10 	bl	8001170 <HAL_GetTick>
 8001b50:	0002      	movs	r2, r0
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e079      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b5e:	4b3f      	ldr	r3, [pc, #252]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	049b      	lsls	r3, r3, #18
 8001b66:	4013      	ands	r3, r2
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b6a:	4b3c      	ldr	r3, [pc, #240]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	220f      	movs	r2, #15
 8001b70:	4393      	bics	r3, r2
 8001b72:	0019      	movs	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b78:	4b38      	ldr	r3, [pc, #224]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b7e:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4a3a      	ldr	r2, [pc, #232]	; (8001c6c <HAL_RCC_OscConfig+0x638>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	0019      	movs	r1, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	431a      	orrs	r2, r3
 8001b92:	4b32      	ldr	r3, [pc, #200]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001b94:	430a      	orrs	r2, r1
 8001b96:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b98:	4b30      	ldr	r3, [pc, #192]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b2f      	ldr	r3, [pc, #188]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001b9e:	2180      	movs	r1, #128	; 0x80
 8001ba0:	0449      	lsls	r1, r1, #17
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fae3 	bl	8001170 <HAL_GetTick>
 8001baa:	0003      	movs	r3, r0
 8001bac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb0:	f7ff fade 	bl	8001170 <HAL_GetTick>
 8001bb4:	0002      	movs	r2, r0
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e047      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bc2:	4b26      	ldr	r3, [pc, #152]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	2380      	movs	r3, #128	; 0x80
 8001bc8:	049b      	lsls	r3, r3, #18
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x57c>
 8001bce:	e03f      	b.n	8001c50 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd0:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b21      	ldr	r3, [pc, #132]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001bd6:	4924      	ldr	r1, [pc, #144]	; (8001c68 <HAL_RCC_OscConfig+0x634>)
 8001bd8:	400a      	ands	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fac8 	bl	8001170 <HAL_GetTick>
 8001be0:	0003      	movs	r3, r0
 8001be2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be6:	f7ff fac3 	bl	8001170 <HAL_GetTick>
 8001bea:	0002      	movs	r2, r0
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e02c      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	049b      	lsls	r3, r3, #18
 8001c00:	4013      	ands	r3, r2
 8001c02:	d1f0      	bne.n	8001be6 <HAL_RCC_OscConfig+0x5b2>
 8001c04:	e024      	b.n	8001c50 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d101      	bne.n	8001c12 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e01f      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001c18:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	23c0      	movs	r3, #192	; 0xc0
 8001c22:	025b      	lsls	r3, r3, #9
 8001c24:	401a      	ands	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d10e      	bne.n	8001c4c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	220f      	movs	r2, #15
 8001c32:	401a      	ands	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d107      	bne.n	8001c4c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	23f0      	movs	r3, #240	; 0xf0
 8001c40:	039b      	lsls	r3, r3, #14
 8001c42:	401a      	ands	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	0018      	movs	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b008      	add	sp, #32
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	00001388 	.word	0x00001388
 8001c64:	efffffff 	.word	0xefffffff
 8001c68:	feffffff 	.word	0xfeffffff
 8001c6c:	ffc27fff 	.word	0xffc27fff

08001c70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0b3      	b.n	8001dec <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c84:	4b5b      	ldr	r3, [pc, #364]	; (8001df4 <HAL_RCC_ClockConfig+0x184>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d911      	bls.n	8001cb6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c92:	4b58      	ldr	r3, [pc, #352]	; (8001df4 <HAL_RCC_ClockConfig+0x184>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2201      	movs	r2, #1
 8001c98:	4393      	bics	r3, r2
 8001c9a:	0019      	movs	r1, r3
 8001c9c:	4b55      	ldr	r3, [pc, #340]	; (8001df4 <HAL_RCC_ClockConfig+0x184>)
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca4:	4b53      	ldr	r3, [pc, #332]	; (8001df4 <HAL_RCC_ClockConfig+0x184>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	4013      	ands	r3, r2
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d001      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e09a      	b.n	8001dec <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d015      	beq.n	8001cec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2204      	movs	r2, #4
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d006      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001cca:	4b4b      	ldr	r3, [pc, #300]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	4b4a      	ldr	r3, [pc, #296]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001cd0:	21e0      	movs	r1, #224	; 0xe0
 8001cd2:	00c9      	lsls	r1, r1, #3
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd8:	4b47      	ldr	r3, [pc, #284]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	22f0      	movs	r2, #240	; 0xf0
 8001cde:	4393      	bics	r3, r2
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	4b44      	ldr	r3, [pc, #272]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d040      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	4b3e      	ldr	r3, [pc, #248]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	029b      	lsls	r3, r3, #10
 8001d06:	4013      	ands	r3, r2
 8001d08:	d114      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e06e      	b.n	8001dec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d16:	4b38      	ldr	r3, [pc, #224]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	049b      	lsls	r3, r3, #18
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d108      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e062      	b.n	8001dec <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d26:	4b34      	ldr	r3, [pc, #208]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e05b      	b.n	8001dec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d34:	4b30      	ldr	r3, [pc, #192]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2203      	movs	r2, #3
 8001d3a:	4393      	bics	r3, r2
 8001d3c:	0019      	movs	r1, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	4b2d      	ldr	r3, [pc, #180]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001d44:	430a      	orrs	r2, r1
 8001d46:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d48:	f7ff fa12 	bl	8001170 <HAL_GetTick>
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d50:	e009      	b.n	8001d66 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d52:	f7ff fa0d 	bl	8001170 <HAL_GetTick>
 8001d56:	0002      	movs	r2, r0
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	4a27      	ldr	r2, [pc, #156]	; (8001dfc <HAL_RCC_ClockConfig+0x18c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e042      	b.n	8001dec <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	401a      	ands	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d1ec      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d78:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <HAL_RCC_ClockConfig+0x184>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	4013      	ands	r3, r2
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d211      	bcs.n	8001daa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d86:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <HAL_RCC_ClockConfig+0x184>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4393      	bics	r3, r2
 8001d8e:	0019      	movs	r1, r3
 8001d90:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <HAL_RCC_ClockConfig+0x184>)
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d98:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <HAL_RCC_ClockConfig+0x184>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4013      	ands	r3, r2
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e020      	b.n	8001dec <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2204      	movs	r2, #4
 8001db0:	4013      	ands	r3, r2
 8001db2:	d009      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001db4:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	4a11      	ldr	r2, [pc, #68]	; (8001e00 <HAL_RCC_ClockConfig+0x190>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	0019      	movs	r1, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001dc8:	f000 f820 	bl	8001e0c <HAL_RCC_GetSysClockFreq>
 8001dcc:	0001      	movs	r1, r0
 8001dce:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	091b      	lsrs	r3, r3, #4
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <HAL_RCC_ClockConfig+0x194>)
 8001dda:	5cd3      	ldrb	r3, [r2, r3]
 8001ddc:	000a      	movs	r2, r1
 8001dde:	40da      	lsrs	r2, r3
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_RCC_ClockConfig+0x198>)
 8001de2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001de4:	2000      	movs	r0, #0
 8001de6:	f7ff f8ef 	bl	8000fc8 <HAL_InitTick>
  
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	0018      	movs	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b004      	add	sp, #16
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40022000 	.word	0x40022000
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	00001388 	.word	0x00001388
 8001e00:	fffff8ff 	.word	0xfffff8ff
 8001e04:	08005eac 	.word	0x08005eac
 8001e08:	20000004 	.word	0x20000004

08001e0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e0c:	b590      	push	{r4, r7, lr}
 8001e0e:	b08f      	sub	sp, #60	; 0x3c
 8001e10:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001e12:	2314      	movs	r3, #20
 8001e14:	18fb      	adds	r3, r7, r3
 8001e16:	4a2c      	ldr	r2, [pc, #176]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e18:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e1a:	c313      	stmia	r3!, {r0, r1, r4}
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	4a2a      	ldr	r2, [pc, #168]	; (8001ecc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e24:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e26:	c313      	stmia	r3!, {r0, r1, r4}
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e30:	2300      	movs	r3, #0
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e34:	2300      	movs	r3, #0
 8001e36:	637b      	str	r3, [r7, #52]	; 0x34
 8001e38:	2300      	movs	r3, #0
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001e40:	4b23      	ldr	r3, [pc, #140]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e48:	220c      	movs	r2, #12
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d002      	beq.n	8001e56 <HAL_RCC_GetSysClockFreq+0x4a>
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d003      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0x50>
 8001e54:	e02f      	b.n	8001eb6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e56:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e58:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e5a:	e02f      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5e:	0c9b      	lsrs	r3, r3, #18
 8001e60:	220f      	movs	r2, #15
 8001e62:	4013      	ands	r3, r2
 8001e64:	2214      	movs	r2, #20
 8001e66:	18ba      	adds	r2, r7, r2
 8001e68:	5cd3      	ldrb	r3, [r2, r3]
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e6c:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e70:	220f      	movs	r2, #15
 8001e72:	4013      	ands	r3, r2
 8001e74:	1d3a      	adds	r2, r7, #4
 8001e76:	5cd3      	ldrb	r3, [r2, r3]
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e7c:	23c0      	movs	r3, #192	; 0xc0
 8001e7e:	025b      	lsls	r3, r3, #9
 8001e80:	401a      	ands	r2, r3
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	025b      	lsls	r3, r3, #9
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d109      	bne.n	8001e9e <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e8c:	4811      	ldr	r0, [pc, #68]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e8e:	f7fe f93b 	bl	8000108 <__udivsi3>
 8001e92:	0003      	movs	r3, r0
 8001e94:	001a      	movs	r2, r3
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	4353      	muls	r3, r2
 8001e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ea0:	480c      	ldr	r0, [pc, #48]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ea2:	f7fe f931 	bl	8000108 <__udivsi3>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	001a      	movs	r2, r3
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	4353      	muls	r3, r2
 8001eae:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001eb4:	e002      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001eb6:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001eb8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001eba:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	b00f      	add	sp, #60	; 0x3c
 8001ec4:	bd90      	pop	{r4, r7, pc}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	08005d98 	.word	0x08005d98
 8001ecc:	08005da8 	.word	0x08005da8
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	007a1200 	.word	0x007a1200

08001ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001edc:	4b02      	ldr	r3, [pc, #8]	; (8001ee8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	20000004 	.word	0x20000004

08001eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001ef0:	f7ff fff2 	bl	8001ed8 <HAL_RCC_GetHCLKFreq>
 8001ef4:	0001      	movs	r1, r0
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	0a1b      	lsrs	r3, r3, #8
 8001efc:	2207      	movs	r2, #7
 8001efe:	4013      	ands	r3, r2
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f02:	5cd3      	ldrb	r3, [r2, r3]
 8001f04:	40d9      	lsrs	r1, r3
 8001f06:	000b      	movs	r3, r1
}    
 8001f08:	0018      	movs	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	40021000 	.word	0x40021000
 8001f14:	08005ebc 	.word	0x08005ebc

08001f18 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2207      	movs	r2, #7
 8001f26:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f28:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_RCC_GetClockConfig+0x4c>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	401a      	ands	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_GetClockConfig+0x4c>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	22f0      	movs	r2, #240	; 0xf0
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_RCC_GetClockConfig+0x4c>)
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	23e0      	movs	r3, #224	; 0xe0
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	401a      	ands	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_RCC_GetClockConfig+0x50>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2201      	movs	r2, #1
 8001f54:	401a      	ands	r2, r3
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	601a      	str	r2, [r3, #0]
}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b002      	add	sp, #8
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40022000 	.word	0x40022000

08001f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e042      	b.n	8002004 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	223d      	movs	r2, #61	; 0x3d
 8001f82:	5c9b      	ldrb	r3, [r3, r2]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d107      	bne.n	8001f9a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	223c      	movs	r2, #60	; 0x3c
 8001f8e:	2100      	movs	r1, #0
 8001f90:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	0018      	movs	r0, r3
 8001f96:	f7fe ffb3 	bl	8000f00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	223d      	movs	r2, #61	; 0x3d
 8001f9e:	2102      	movs	r1, #2
 8001fa0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	0019      	movs	r1, r3
 8001fac:	0010      	movs	r0, r2
 8001fae:	f000 fb61 	bl	8002674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2246      	movs	r2, #70	; 0x46
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	223e      	movs	r2, #62	; 0x3e
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	5499      	strb	r1, [r3, r2]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	223f      	movs	r2, #63	; 0x3f
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	5499      	strb	r1, [r3, r2]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2240      	movs	r2, #64	; 0x40
 8001fce:	2101      	movs	r1, #1
 8001fd0:	5499      	strb	r1, [r3, r2]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2241      	movs	r2, #65	; 0x41
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2242      	movs	r2, #66	; 0x42
 8001fde:	2101      	movs	r1, #1
 8001fe0:	5499      	strb	r1, [r3, r2]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2243      	movs	r2, #67	; 0x43
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	5499      	strb	r1, [r3, r2]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2244      	movs	r2, #68	; 0x44
 8001fee:	2101      	movs	r1, #1
 8001ff0:	5499      	strb	r1, [r3, r2]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2245      	movs	r2, #69	; 0x45
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	223d      	movs	r2, #61	; 0x3d
 8001ffe:	2101      	movs	r1, #1
 8002000:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	0018      	movs	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	b002      	add	sp, #8
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	223d      	movs	r2, #61	; 0x3d
 8002018:	5c9b      	ldrb	r3, [r3, r2]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d001      	beq.n	8002024 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e035      	b.n	8002090 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	223d      	movs	r2, #61	; 0x3d
 8002028:	2102      	movs	r1, #2
 800202a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2101      	movs	r1, #1
 8002038:	430a      	orrs	r2, r1
 800203a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a15      	ldr	r2, [pc, #84]	; (8002098 <HAL_TIM_Base_Start_IT+0x8c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d009      	beq.n	800205a <HAL_TIM_Base_Start_IT+0x4e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a14      	ldr	r2, [pc, #80]	; (800209c <HAL_TIM_Base_Start_IT+0x90>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d004      	beq.n	800205a <HAL_TIM_Base_Start_IT+0x4e>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <HAL_TIM_Base_Start_IT+0x94>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d111      	bne.n	800207e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2207      	movs	r2, #7
 8002062:	4013      	ands	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2b06      	cmp	r3, #6
 800206a:	d010      	beq.n	800208e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2101      	movs	r1, #1
 8002078:	430a      	orrs	r2, r1
 800207a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800207c:	e007      	b.n	800208e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2101      	movs	r1, #1
 800208a:	430a      	orrs	r2, r1
 800208c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	0018      	movs	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	b004      	add	sp, #16
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40012c00 	.word	0x40012c00
 800209c:	40000400 	.word	0x40000400
 80020a0:	40014000 	.word	0x40014000

080020a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e042      	b.n	800213c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	223d      	movs	r2, #61	; 0x3d
 80020ba:	5c9b      	ldrb	r3, [r3, r2]
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d107      	bne.n	80020d2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	223c      	movs	r2, #60	; 0x3c
 80020c6:	2100      	movs	r1, #0
 80020c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	0018      	movs	r0, r3
 80020ce:	f7fe fef9 	bl	8000ec4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	223d      	movs	r2, #61	; 0x3d
 80020d6:	2102      	movs	r1, #2
 80020d8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3304      	adds	r3, #4
 80020e2:	0019      	movs	r1, r3
 80020e4:	0010      	movs	r0, r2
 80020e6:	f000 fac5 	bl	8002674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2246      	movs	r2, #70	; 0x46
 80020ee:	2101      	movs	r1, #1
 80020f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	223e      	movs	r2, #62	; 0x3e
 80020f6:	2101      	movs	r1, #1
 80020f8:	5499      	strb	r1, [r3, r2]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	223f      	movs	r2, #63	; 0x3f
 80020fe:	2101      	movs	r1, #1
 8002100:	5499      	strb	r1, [r3, r2]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2240      	movs	r2, #64	; 0x40
 8002106:	2101      	movs	r1, #1
 8002108:	5499      	strb	r1, [r3, r2]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2241      	movs	r2, #65	; 0x41
 800210e:	2101      	movs	r1, #1
 8002110:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2242      	movs	r2, #66	; 0x42
 8002116:	2101      	movs	r1, #1
 8002118:	5499      	strb	r1, [r3, r2]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2243      	movs	r2, #67	; 0x43
 800211e:	2101      	movs	r1, #1
 8002120:	5499      	strb	r1, [r3, r2]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2244      	movs	r2, #68	; 0x44
 8002126:	2101      	movs	r1, #1
 8002128:	5499      	strb	r1, [r3, r2]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2245      	movs	r2, #69	; 0x45
 800212e:	2101      	movs	r1, #1
 8002130:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	223d      	movs	r2, #61	; 0x3d
 8002136:	2101      	movs	r1, #1
 8002138:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	0018      	movs	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	b002      	add	sp, #8
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d108      	bne.n	8002166 <HAL_TIM_PWM_Start+0x22>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	223e      	movs	r2, #62	; 0x3e
 8002158:	5c9b      	ldrb	r3, [r3, r2]
 800215a:	b2db      	uxtb	r3, r3
 800215c:	3b01      	subs	r3, #1
 800215e:	1e5a      	subs	r2, r3, #1
 8002160:	4193      	sbcs	r3, r2
 8002162:	b2db      	uxtb	r3, r3
 8002164:	e01f      	b.n	80021a6 <HAL_TIM_PWM_Start+0x62>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	2b04      	cmp	r3, #4
 800216a:	d108      	bne.n	800217e <HAL_TIM_PWM_Start+0x3a>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	223f      	movs	r2, #63	; 0x3f
 8002170:	5c9b      	ldrb	r3, [r3, r2]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	3b01      	subs	r3, #1
 8002176:	1e5a      	subs	r2, r3, #1
 8002178:	4193      	sbcs	r3, r2
 800217a:	b2db      	uxtb	r3, r3
 800217c:	e013      	b.n	80021a6 <HAL_TIM_PWM_Start+0x62>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	2b08      	cmp	r3, #8
 8002182:	d108      	bne.n	8002196 <HAL_TIM_PWM_Start+0x52>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2240      	movs	r2, #64	; 0x40
 8002188:	5c9b      	ldrb	r3, [r3, r2]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	3b01      	subs	r3, #1
 800218e:	1e5a      	subs	r2, r3, #1
 8002190:	4193      	sbcs	r3, r2
 8002192:	b2db      	uxtb	r3, r3
 8002194:	e007      	b.n	80021a6 <HAL_TIM_PWM_Start+0x62>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2241      	movs	r2, #65	; 0x41
 800219a:	5c9b      	ldrb	r3, [r3, r2]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	3b01      	subs	r3, #1
 80021a0:	1e5a      	subs	r2, r3, #1
 80021a2:	4193      	sbcs	r3, r2
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e06e      	b.n	800228c <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d104      	bne.n	80021be <HAL_TIM_PWM_Start+0x7a>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	223e      	movs	r2, #62	; 0x3e
 80021b8:	2102      	movs	r1, #2
 80021ba:	5499      	strb	r1, [r3, r2]
 80021bc:	e013      	b.n	80021e6 <HAL_TIM_PWM_Start+0xa2>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d104      	bne.n	80021ce <HAL_TIM_PWM_Start+0x8a>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	223f      	movs	r2, #63	; 0x3f
 80021c8:	2102      	movs	r1, #2
 80021ca:	5499      	strb	r1, [r3, r2]
 80021cc:	e00b      	b.n	80021e6 <HAL_TIM_PWM_Start+0xa2>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d104      	bne.n	80021de <HAL_TIM_PWM_Start+0x9a>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2240      	movs	r2, #64	; 0x40
 80021d8:	2102      	movs	r1, #2
 80021da:	5499      	strb	r1, [r3, r2]
 80021dc:	e003      	b.n	80021e6 <HAL_TIM_PWM_Start+0xa2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2241      	movs	r2, #65	; 0x41
 80021e2:	2102      	movs	r1, #2
 80021e4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6839      	ldr	r1, [r7, #0]
 80021ec:	2201      	movs	r2, #1
 80021ee:	0018      	movs	r0, r3
 80021f0:	f000 fcb2 	bl	8002b58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a26      	ldr	r2, [pc, #152]	; (8002294 <HAL_TIM_PWM_Start+0x150>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00e      	beq.n	800221c <HAL_TIM_PWM_Start+0xd8>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a25      	ldr	r2, [pc, #148]	; (8002298 <HAL_TIM_PWM_Start+0x154>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d009      	beq.n	800221c <HAL_TIM_PWM_Start+0xd8>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a23      	ldr	r2, [pc, #140]	; (800229c <HAL_TIM_PWM_Start+0x158>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d004      	beq.n	800221c <HAL_TIM_PWM_Start+0xd8>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a22      	ldr	r2, [pc, #136]	; (80022a0 <HAL_TIM_PWM_Start+0x15c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d101      	bne.n	8002220 <HAL_TIM_PWM_Start+0xdc>
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <HAL_TIM_PWM_Start+0xde>
 8002220:	2300      	movs	r3, #0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d008      	beq.n	8002238 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2180      	movs	r1, #128	; 0x80
 8002232:	0209      	lsls	r1, r1, #8
 8002234:	430a      	orrs	r2, r1
 8002236:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a15      	ldr	r2, [pc, #84]	; (8002294 <HAL_TIM_PWM_Start+0x150>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d009      	beq.n	8002256 <HAL_TIM_PWM_Start+0x112>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a17      	ldr	r2, [pc, #92]	; (80022a4 <HAL_TIM_PWM_Start+0x160>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d004      	beq.n	8002256 <HAL_TIM_PWM_Start+0x112>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a11      	ldr	r2, [pc, #68]	; (8002298 <HAL_TIM_PWM_Start+0x154>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d111      	bne.n	800227a <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	2207      	movs	r2, #7
 800225e:	4013      	ands	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2b06      	cmp	r3, #6
 8002266:	d010      	beq.n	800228a <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2101      	movs	r1, #1
 8002274:	430a      	orrs	r2, r1
 8002276:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002278:	e007      	b.n	800228a <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2101      	movs	r1, #1
 8002286:	430a      	orrs	r2, r1
 8002288:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	0018      	movs	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	b004      	add	sp, #16
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40012c00 	.word	0x40012c00
 8002298:	40014000 	.word	0x40014000
 800229c:	40014400 	.word	0x40014400
 80022a0:	40014800 	.word	0x40014800
 80022a4:	40000400 	.word	0x40000400

080022a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	2202      	movs	r2, #2
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d124      	bne.n	8002308 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	2202      	movs	r2, #2
 80022c6:	4013      	ands	r3, r2
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d11d      	bne.n	8002308 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2203      	movs	r2, #3
 80022d2:	4252      	negs	r2, r2
 80022d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	2203      	movs	r2, #3
 80022e4:	4013      	ands	r3, r2
 80022e6:	d004      	beq.n	80022f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	0018      	movs	r0, r3
 80022ec:	f000 f9aa 	bl	8002644 <HAL_TIM_IC_CaptureCallback>
 80022f0:	e007      	b.n	8002302 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	0018      	movs	r0, r3
 80022f6:	f000 f99d 	bl	8002634 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	0018      	movs	r0, r3
 80022fe:	f000 f9a9 	bl	8002654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	2204      	movs	r2, #4
 8002310:	4013      	ands	r3, r2
 8002312:	2b04      	cmp	r3, #4
 8002314:	d125      	bne.n	8002362 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	2204      	movs	r2, #4
 800231e:	4013      	ands	r3, r2
 8002320:	2b04      	cmp	r3, #4
 8002322:	d11e      	bne.n	8002362 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2205      	movs	r2, #5
 800232a:	4252      	negs	r2, r2
 800232c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2202      	movs	r2, #2
 8002332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	23c0      	movs	r3, #192	; 0xc0
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4013      	ands	r3, r2
 8002340:	d004      	beq.n	800234c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	0018      	movs	r0, r3
 8002346:	f000 f97d 	bl	8002644 <HAL_TIM_IC_CaptureCallback>
 800234a:	e007      	b.n	800235c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	0018      	movs	r0, r3
 8002350:	f000 f970 	bl	8002634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	0018      	movs	r0, r3
 8002358:	f000 f97c 	bl	8002654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	2208      	movs	r2, #8
 800236a:	4013      	ands	r3, r2
 800236c:	2b08      	cmp	r3, #8
 800236e:	d124      	bne.n	80023ba <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	2208      	movs	r2, #8
 8002378:	4013      	ands	r3, r2
 800237a:	2b08      	cmp	r3, #8
 800237c:	d11d      	bne.n	80023ba <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2209      	movs	r2, #9
 8002384:	4252      	negs	r2, r2
 8002386:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2204      	movs	r2, #4
 800238c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	2203      	movs	r2, #3
 8002396:	4013      	ands	r3, r2
 8002398:	d004      	beq.n	80023a4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	0018      	movs	r0, r3
 800239e:	f000 f951 	bl	8002644 <HAL_TIM_IC_CaptureCallback>
 80023a2:	e007      	b.n	80023b4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	0018      	movs	r0, r3
 80023a8:	f000 f944 	bl	8002634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	0018      	movs	r0, r3
 80023b0:	f000 f950 	bl	8002654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	2210      	movs	r2, #16
 80023c2:	4013      	ands	r3, r2
 80023c4:	2b10      	cmp	r3, #16
 80023c6:	d125      	bne.n	8002414 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2210      	movs	r2, #16
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b10      	cmp	r3, #16
 80023d4:	d11e      	bne.n	8002414 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2211      	movs	r2, #17
 80023dc:	4252      	negs	r2, r2
 80023de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2208      	movs	r2, #8
 80023e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	69da      	ldr	r2, [r3, #28]
 80023ec:	23c0      	movs	r3, #192	; 0xc0
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4013      	ands	r3, r2
 80023f2:	d004      	beq.n	80023fe <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	0018      	movs	r0, r3
 80023f8:	f000 f924 	bl	8002644 <HAL_TIM_IC_CaptureCallback>
 80023fc:	e007      	b.n	800240e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	0018      	movs	r0, r3
 8002402:	f000 f917 	bl	8002634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	0018      	movs	r0, r3
 800240a:	f000 f923 	bl	8002654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	2201      	movs	r2, #1
 800241c:	4013      	ands	r3, r2
 800241e:	2b01      	cmp	r3, #1
 8002420:	d10f      	bne.n	8002442 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2201      	movs	r2, #1
 800242a:	4013      	ands	r3, r2
 800242c:	2b01      	cmp	r3, #1
 800242e:	d108      	bne.n	8002442 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2202      	movs	r2, #2
 8002436:	4252      	negs	r2, r2
 8002438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	0018      	movs	r0, r3
 800243e:	f7fe fc95 	bl	8000d6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	2280      	movs	r2, #128	; 0x80
 800244a:	4013      	ands	r3, r2
 800244c:	2b80      	cmp	r3, #128	; 0x80
 800244e:	d10f      	bne.n	8002470 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2280      	movs	r2, #128	; 0x80
 8002458:	4013      	ands	r3, r2
 800245a:	2b80      	cmp	r3, #128	; 0x80
 800245c:	d108      	bne.n	8002470 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2281      	movs	r2, #129	; 0x81
 8002464:	4252      	negs	r2, r2
 8002466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	0018      	movs	r0, r3
 800246c:	f000 fbf8 	bl	8002c60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	2240      	movs	r2, #64	; 0x40
 8002478:	4013      	ands	r3, r2
 800247a:	2b40      	cmp	r3, #64	; 0x40
 800247c:	d10f      	bne.n	800249e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2240      	movs	r2, #64	; 0x40
 8002486:	4013      	ands	r3, r2
 8002488:	2b40      	cmp	r3, #64	; 0x40
 800248a:	d108      	bne.n	800249e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2241      	movs	r2, #65	; 0x41
 8002492:	4252      	negs	r2, r2
 8002494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	0018      	movs	r0, r3
 800249a:	f000 f8e3 	bl	8002664 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	2220      	movs	r2, #32
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	d10f      	bne.n	80024cc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	2220      	movs	r2, #32
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b20      	cmp	r3, #32
 80024b8:	d108      	bne.n	80024cc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2221      	movs	r2, #33	; 0x21
 80024c0:	4252      	negs	r2, r2
 80024c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	0018      	movs	r0, r3
 80024c8:	f000 fbc2 	bl	8002c50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024cc:	46c0      	nop			; (mov r8, r8)
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b002      	add	sp, #8
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	223c      	movs	r2, #60	; 0x3c
 80024e4:	5c9b      	ldrb	r3, [r3, r2]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e09c      	b.n	8002628 <HAL_TIM_PWM_ConfigChannel+0x154>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	223c      	movs	r2, #60	; 0x3c
 80024f2:	2101      	movs	r1, #1
 80024f4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d029      	beq.n	8002550 <HAL_TIM_PWM_ConfigChannel+0x7c>
 80024fc:	d802      	bhi.n	8002504 <HAL_TIM_PWM_ConfigChannel+0x30>
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d005      	beq.n	800250e <HAL_TIM_PWM_ConfigChannel+0x3a>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8002502:	e08c      	b.n	800261e <HAL_TIM_PWM_ConfigChannel+0x14a>
  switch (Channel)
 8002504:	2b08      	cmp	r3, #8
 8002506:	d046      	beq.n	8002596 <HAL_TIM_PWM_ConfigChannel+0xc2>
 8002508:	2b0c      	cmp	r3, #12
 800250a:	d065      	beq.n	80025d8 <HAL_TIM_PWM_ConfigChannel+0x104>
      break;
 800250c:	e087      	b.n	800261e <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	0011      	movs	r1, r2
 8002516:	0018      	movs	r0, r3
 8002518:	f000 f922 	bl	8002760 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2108      	movs	r1, #8
 8002528:	430a      	orrs	r2, r1
 800252a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699a      	ldr	r2, [r3, #24]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2104      	movs	r1, #4
 8002538:	438a      	bics	r2, r1
 800253a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6999      	ldr	r1, [r3, #24]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	691a      	ldr	r2, [r3, #16]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	619a      	str	r2, [r3, #24]
      break;
 800254e:	e066      	b.n	800261e <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	0011      	movs	r1, r2
 8002558:	0018      	movs	r0, r3
 800255a:	f000 f989 	bl	8002870 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	699a      	ldr	r2, [r3, #24]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2180      	movs	r1, #128	; 0x80
 800256a:	0109      	lsls	r1, r1, #4
 800256c:	430a      	orrs	r2, r1
 800256e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	699a      	ldr	r2, [r3, #24]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	492d      	ldr	r1, [pc, #180]	; (8002630 <HAL_TIM_PWM_ConfigChannel+0x15c>)
 800257c:	400a      	ands	r2, r1
 800257e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6999      	ldr	r1, [r3, #24]
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	021a      	lsls	r2, r3, #8
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	619a      	str	r2, [r3, #24]
      break;
 8002594:	e043      	b.n	800261e <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	0011      	movs	r1, r2
 800259e:	0018      	movs	r0, r3
 80025a0:	f000 f9ea 	bl	8002978 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	69da      	ldr	r2, [r3, #28]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2108      	movs	r1, #8
 80025b0:	430a      	orrs	r2, r1
 80025b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	69da      	ldr	r2, [r3, #28]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2104      	movs	r1, #4
 80025c0:	438a      	bics	r2, r1
 80025c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	69d9      	ldr	r1, [r3, #28]
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	61da      	str	r2, [r3, #28]
      break;
 80025d6:	e022      	b.n	800261e <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	0011      	movs	r1, r2
 80025e0:	0018      	movs	r0, r3
 80025e2:	f000 fa4f 	bl	8002a84 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	69da      	ldr	r2, [r3, #28]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2180      	movs	r1, #128	; 0x80
 80025f2:	0109      	lsls	r1, r1, #4
 80025f4:	430a      	orrs	r2, r1
 80025f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	69da      	ldr	r2, [r3, #28]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	490b      	ldr	r1, [pc, #44]	; (8002630 <HAL_TIM_PWM_ConfigChannel+0x15c>)
 8002604:	400a      	ands	r2, r1
 8002606:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	69d9      	ldr	r1, [r3, #28]
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	021a      	lsls	r2, r3, #8
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	61da      	str	r2, [r3, #28]
      break;
 800261c:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	223c      	movs	r2, #60	; 0x3c
 8002622:	2100      	movs	r1, #0
 8002624:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	0018      	movs	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	b004      	add	sp, #16
 800262e:	bd80      	pop	{r7, pc}
 8002630:	fffffbff 	.word	0xfffffbff

08002634 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800263c:	46c0      	nop			; (mov r8, r8)
 800263e:	46bd      	mov	sp, r7
 8002640:	b002      	add	sp, #8
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800264c:	46c0      	nop			; (mov r8, r8)
 800264e:	46bd      	mov	sp, r7
 8002650:	b002      	add	sp, #8
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800265c:	46c0      	nop			; (mov r8, r8)
 800265e:	46bd      	mov	sp, r7
 8002660:	b002      	add	sp, #8
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800266c:	46c0      	nop			; (mov r8, r8)
 800266e:	46bd      	mov	sp, r7
 8002670:	b002      	add	sp, #8
 8002672:	bd80      	pop	{r7, pc}

08002674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a2f      	ldr	r2, [pc, #188]	; (8002744 <TIM_Base_SetConfig+0xd0>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d003      	beq.n	8002694 <TIM_Base_SetConfig+0x20>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a2e      	ldr	r2, [pc, #184]	; (8002748 <TIM_Base_SetConfig+0xd4>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d108      	bne.n	80026a6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2270      	movs	r2, #112	; 0x70
 8002698:	4393      	bics	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a26      	ldr	r2, [pc, #152]	; (8002744 <TIM_Base_SetConfig+0xd0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d013      	beq.n	80026d6 <TIM_Base_SetConfig+0x62>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a25      	ldr	r2, [pc, #148]	; (8002748 <TIM_Base_SetConfig+0xd4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00f      	beq.n	80026d6 <TIM_Base_SetConfig+0x62>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a24      	ldr	r2, [pc, #144]	; (800274c <TIM_Base_SetConfig+0xd8>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d00b      	beq.n	80026d6 <TIM_Base_SetConfig+0x62>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a23      	ldr	r2, [pc, #140]	; (8002750 <TIM_Base_SetConfig+0xdc>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d007      	beq.n	80026d6 <TIM_Base_SetConfig+0x62>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a22      	ldr	r2, [pc, #136]	; (8002754 <TIM_Base_SetConfig+0xe0>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d003      	beq.n	80026d6 <TIM_Base_SetConfig+0x62>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a21      	ldr	r2, [pc, #132]	; (8002758 <TIM_Base_SetConfig+0xe4>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d108      	bne.n	80026e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4a20      	ldr	r2, [pc, #128]	; (800275c <TIM_Base_SetConfig+0xe8>)
 80026da:	4013      	ands	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2280      	movs	r2, #128	; 0x80
 80026ec:	4393      	bics	r3, r2
 80026ee:	001a      	movs	r2, r3
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a0c      	ldr	r2, [pc, #48]	; (8002744 <TIM_Base_SetConfig+0xd0>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d00b      	beq.n	800272e <TIM_Base_SetConfig+0xba>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a0d      	ldr	r2, [pc, #52]	; (8002750 <TIM_Base_SetConfig+0xdc>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d007      	beq.n	800272e <TIM_Base_SetConfig+0xba>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a0c      	ldr	r2, [pc, #48]	; (8002754 <TIM_Base_SetConfig+0xe0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d003      	beq.n	800272e <TIM_Base_SetConfig+0xba>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a0b      	ldr	r2, [pc, #44]	; (8002758 <TIM_Base_SetConfig+0xe4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d103      	bne.n	8002736 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	691a      	ldr	r2, [r3, #16]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	615a      	str	r2, [r3, #20]
}
 800273c:	46c0      	nop			; (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	b004      	add	sp, #16
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40012c00 	.word	0x40012c00
 8002748:	40000400 	.word	0x40000400
 800274c:	40002000 	.word	0x40002000
 8002750:	40014000 	.word	0x40014000
 8002754:	40014400 	.word	0x40014400
 8002758:	40014800 	.word	0x40014800
 800275c:	fffffcff 	.word	0xfffffcff

08002760 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	2201      	movs	r2, #1
 8002770:	4393      	bics	r3, r2
 8002772:	001a      	movs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2270      	movs	r2, #112	; 0x70
 800278e:	4393      	bics	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2203      	movs	r2, #3
 8002796:	4393      	bics	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	2202      	movs	r2, #2
 80027a8:	4393      	bics	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a27      	ldr	r2, [pc, #156]	; (8002858 <TIM_OC1_SetConfig+0xf8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00b      	beq.n	80027d6 <TIM_OC1_SetConfig+0x76>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a26      	ldr	r2, [pc, #152]	; (800285c <TIM_OC1_SetConfig+0xfc>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d007      	beq.n	80027d6 <TIM_OC1_SetConfig+0x76>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a25      	ldr	r2, [pc, #148]	; (8002860 <TIM_OC1_SetConfig+0x100>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d003      	beq.n	80027d6 <TIM_OC1_SetConfig+0x76>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a24      	ldr	r2, [pc, #144]	; (8002864 <TIM_OC1_SetConfig+0x104>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d10c      	bne.n	80027f0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2208      	movs	r2, #8
 80027da:	4393      	bics	r3, r2
 80027dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2204      	movs	r2, #4
 80027ec:	4393      	bics	r3, r2
 80027ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a19      	ldr	r2, [pc, #100]	; (8002858 <TIM_OC1_SetConfig+0xf8>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d00b      	beq.n	8002810 <TIM_OC1_SetConfig+0xb0>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a18      	ldr	r2, [pc, #96]	; (800285c <TIM_OC1_SetConfig+0xfc>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d007      	beq.n	8002810 <TIM_OC1_SetConfig+0xb0>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a17      	ldr	r2, [pc, #92]	; (8002860 <TIM_OC1_SetConfig+0x100>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d003      	beq.n	8002810 <TIM_OC1_SetConfig+0xb0>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a16      	ldr	r2, [pc, #88]	; (8002864 <TIM_OC1_SetConfig+0x104>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d111      	bne.n	8002834 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4a15      	ldr	r2, [pc, #84]	; (8002868 <TIM_OC1_SetConfig+0x108>)
 8002814:	4013      	ands	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4a14      	ldr	r2, [pc, #80]	; (800286c <TIM_OC1_SetConfig+0x10c>)
 800281c:	4013      	ands	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	621a      	str	r2, [r3, #32]
}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	46bd      	mov	sp, r7
 8002852:	b006      	add	sp, #24
 8002854:	bd80      	pop	{r7, pc}
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	40012c00 	.word	0x40012c00
 800285c:	40014000 	.word	0x40014000
 8002860:	40014400 	.word	0x40014400
 8002864:	40014800 	.word	0x40014800
 8002868:	fffffeff 	.word	0xfffffeff
 800286c:	fffffdff 	.word	0xfffffdff

08002870 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	2210      	movs	r2, #16
 8002880:	4393      	bics	r3, r2
 8002882:	001a      	movs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4a2e      	ldr	r2, [pc, #184]	; (8002958 <TIM_OC2_SetConfig+0xe8>)
 800289e:	4013      	ands	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4a2d      	ldr	r2, [pc, #180]	; (800295c <TIM_OC2_SetConfig+0xec>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	021b      	lsls	r3, r3, #8
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2220      	movs	r2, #32
 80028ba:	4393      	bics	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a24      	ldr	r2, [pc, #144]	; (8002960 <TIM_OC2_SetConfig+0xf0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d10d      	bne.n	80028ee <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2280      	movs	r2, #128	; 0x80
 80028d6:	4393      	bics	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2240      	movs	r2, #64	; 0x40
 80028ea:	4393      	bics	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a1b      	ldr	r2, [pc, #108]	; (8002960 <TIM_OC2_SetConfig+0xf0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00b      	beq.n	800290e <TIM_OC2_SetConfig+0x9e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a1a      	ldr	r2, [pc, #104]	; (8002964 <TIM_OC2_SetConfig+0xf4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d007      	beq.n	800290e <TIM_OC2_SetConfig+0x9e>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a19      	ldr	r2, [pc, #100]	; (8002968 <TIM_OC2_SetConfig+0xf8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d003      	beq.n	800290e <TIM_OC2_SetConfig+0x9e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a18      	ldr	r2, [pc, #96]	; (800296c <TIM_OC2_SetConfig+0xfc>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d113      	bne.n	8002936 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4a17      	ldr	r2, [pc, #92]	; (8002970 <TIM_OC2_SetConfig+0x100>)
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4a16      	ldr	r2, [pc, #88]	; (8002974 <TIM_OC2_SetConfig+0x104>)
 800291a:	4013      	ands	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	621a      	str	r2, [r3, #32]
}
 8002950:	46c0      	nop			; (mov r8, r8)
 8002952:	46bd      	mov	sp, r7
 8002954:	b006      	add	sp, #24
 8002956:	bd80      	pop	{r7, pc}
 8002958:	ffff8fff 	.word	0xffff8fff
 800295c:	fffffcff 	.word	0xfffffcff
 8002960:	40012c00 	.word	0x40012c00
 8002964:	40014000 	.word	0x40014000
 8002968:	40014400 	.word	0x40014400
 800296c:	40014800 	.word	0x40014800
 8002970:	fffffbff 	.word	0xfffffbff
 8002974:	fffff7ff 	.word	0xfffff7ff

08002978 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	4a35      	ldr	r2, [pc, #212]	; (8002a5c <TIM_OC3_SetConfig+0xe4>)
 8002988:	401a      	ands	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2270      	movs	r2, #112	; 0x70
 80029a4:	4393      	bics	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2203      	movs	r2, #3
 80029ac:	4393      	bics	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	4a28      	ldr	r2, [pc, #160]	; (8002a60 <TIM_OC3_SetConfig+0xe8>)
 80029be:	4013      	ands	r3, r2
 80029c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	021b      	lsls	r3, r3, #8
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a24      	ldr	r2, [pc, #144]	; (8002a64 <TIM_OC3_SetConfig+0xec>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d10d      	bne.n	80029f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	4a23      	ldr	r2, [pc, #140]	; (8002a68 <TIM_OC3_SetConfig+0xf0>)
 80029da:	4013      	ands	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	021b      	lsls	r3, r3, #8
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	4a1f      	ldr	r2, [pc, #124]	; (8002a6c <TIM_OC3_SetConfig+0xf4>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a1b      	ldr	r2, [pc, #108]	; (8002a64 <TIM_OC3_SetConfig+0xec>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00b      	beq.n	8002a12 <TIM_OC3_SetConfig+0x9a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a1c      	ldr	r2, [pc, #112]	; (8002a70 <TIM_OC3_SetConfig+0xf8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d007      	beq.n	8002a12 <TIM_OC3_SetConfig+0x9a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a1b      	ldr	r2, [pc, #108]	; (8002a74 <TIM_OC3_SetConfig+0xfc>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d003      	beq.n	8002a12 <TIM_OC3_SetConfig+0x9a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a1a      	ldr	r2, [pc, #104]	; (8002a78 <TIM_OC3_SetConfig+0x100>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d113      	bne.n	8002a3a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4a19      	ldr	r2, [pc, #100]	; (8002a7c <TIM_OC3_SetConfig+0x104>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4a18      	ldr	r2, [pc, #96]	; (8002a80 <TIM_OC3_SetConfig+0x108>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	621a      	str	r2, [r3, #32]
}
 8002a54:	46c0      	nop			; (mov r8, r8)
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b006      	add	sp, #24
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	fffffeff 	.word	0xfffffeff
 8002a60:	fffffdff 	.word	0xfffffdff
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	fffff7ff 	.word	0xfffff7ff
 8002a6c:	fffffbff 	.word	0xfffffbff
 8002a70:	40014000 	.word	0x40014000
 8002a74:	40014400 	.word	0x40014400
 8002a78:	40014800 	.word	0x40014800
 8002a7c:	ffffefff 	.word	0xffffefff
 8002a80:	ffffdfff 	.word	0xffffdfff

08002a84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	4a28      	ldr	r2, [pc, #160]	; (8002b34 <TIM_OC4_SetConfig+0xb0>)
 8002a94:	401a      	ands	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4a22      	ldr	r2, [pc, #136]	; (8002b38 <TIM_OC4_SetConfig+0xb4>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4a21      	ldr	r2, [pc, #132]	; (8002b3c <TIM_OC4_SetConfig+0xb8>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	021b      	lsls	r3, r3, #8
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4a1d      	ldr	r2, [pc, #116]	; (8002b40 <TIM_OC4_SetConfig+0xbc>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	031b      	lsls	r3, r3, #12
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a19      	ldr	r2, [pc, #100]	; (8002b44 <TIM_OC4_SetConfig+0xc0>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d00b      	beq.n	8002afc <TIM_OC4_SetConfig+0x78>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a18      	ldr	r2, [pc, #96]	; (8002b48 <TIM_OC4_SetConfig+0xc4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d007      	beq.n	8002afc <TIM_OC4_SetConfig+0x78>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a17      	ldr	r2, [pc, #92]	; (8002b4c <TIM_OC4_SetConfig+0xc8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d003      	beq.n	8002afc <TIM_OC4_SetConfig+0x78>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a16      	ldr	r2, [pc, #88]	; (8002b50 <TIM_OC4_SetConfig+0xcc>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d109      	bne.n	8002b10 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	4a15      	ldr	r2, [pc, #84]	; (8002b54 <TIM_OC4_SetConfig+0xd0>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	019b      	lsls	r3, r3, #6
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	621a      	str	r2, [r3, #32]
}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b006      	add	sp, #24
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	ffffefff 	.word	0xffffefff
 8002b38:	ffff8fff 	.word	0xffff8fff
 8002b3c:	fffffcff 	.word	0xfffffcff
 8002b40:	ffffdfff 	.word	0xffffdfff
 8002b44:	40012c00 	.word	0x40012c00
 8002b48:	40014000 	.word	0x40014000
 8002b4c:	40014400 	.word	0x40014400
 8002b50:	40014800 	.word	0x40014800
 8002b54:	ffffbfff 	.word	0xffffbfff

08002b58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	221f      	movs	r2, #31
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	409a      	lsls	r2, r3
 8002b6e:	0013      	movs	r3, r2
 8002b70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	43d2      	mvns	r2, r2
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a1a      	ldr	r2, [r3, #32]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	211f      	movs	r1, #31
 8002b88:	400b      	ands	r3, r1
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4099      	lsls	r1, r3
 8002b8e:	000b      	movs	r3, r1
 8002b90:	431a      	orrs	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	621a      	str	r2, [r3, #32]
}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b006      	add	sp, #24
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	223c      	movs	r2, #60	; 0x3c
 8002bae:	5c9b      	ldrb	r3, [r3, r2]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e041      	b.n	8002c3c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	223c      	movs	r2, #60	; 0x3c
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	223d      	movs	r2, #61	; 0x3d
 8002bc4:	2102      	movs	r1, #2
 8002bc6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2270      	movs	r2, #112	; 0x70
 8002bdc:	4393      	bics	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a13      	ldr	r2, [pc, #76]	; (8002c44 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d009      	beq.n	8002c10 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a11      	ldr	r2, [pc, #68]	; (8002c48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d004      	beq.n	8002c10 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a10      	ldr	r2, [pc, #64]	; (8002c4c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d10c      	bne.n	8002c2a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2280      	movs	r2, #128	; 0x80
 8002c14:	4393      	bics	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	223d      	movs	r2, #61	; 0x3d
 8002c2e:	2101      	movs	r1, #1
 8002c30:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	223c      	movs	r2, #60	; 0x3c
 8002c36:	2100      	movs	r1, #0
 8002c38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b004      	add	sp, #16
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40012c00 	.word	0x40012c00
 8002c48:	40000400 	.word	0x40000400
 8002c4c:	40014000 	.word	0x40014000

08002c50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c58:	46c0      	nop			; (mov r8, r8)
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b002      	add	sp, #8
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c68:	46c0      	nop			; (mov r8, r8)
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	b002      	add	sp, #8
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <LTTO_IR_CONV_RawSignatureToPulses>:
            }
        }
    }
}

void LTTO_IR_CONV_RawSignatureToPulses(LTTO_IR_RAW_SIGNATURE_t *sourceRawSignature, int destinationPulseTickMSBuffer[], int *destinationPulseCount) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
    if(sourceRawSignature->valid) {
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	795b      	ldrb	r3, [r3, #5]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d100      	bne.n	8002c86 <LTTO_IR_CONV_RawSignatureToPulses+0x16>
 8002c84:	e0ec      	b.n	8002e60 <LTTO_IR_CONV_RawSignatureToPulses+0x1f0>
        uint8_t bitCount;
        uint8_t arrayIndex = 0;
 8002c86:	2016      	movs	r0, #22
 8002c88:	183b      	adds	r3, r7, r0
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]

        //The basic header
        destinationPulseTickMSBuffer[arrayIndex++] = 3;
 8002c8e:	183b      	adds	r3, r7, r0
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	183a      	adds	r2, r7, r0
 8002c94:	1c59      	adds	r1, r3, #1
 8002c96:	7011      	strb	r1, [r2, #0]
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	18d3      	adds	r3, r2, r3
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	601a      	str	r2, [r3, #0]
        destinationPulseTickMSBuffer[arrayIndex++] = 6;
 8002ca2:	183b      	adds	r3, r7, r0
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	183a      	adds	r2, r7, r0
 8002ca8:	1c59      	adds	r1, r3, #1
 8002caa:	7011      	strb	r1, [r2, #0]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	18d3      	adds	r3, r2, r3
 8002cb2:	2206      	movs	r2, #6
 8002cb4:	601a      	str	r2, [r3, #0]

        //The specific header...
        if(sourceRawSignature->headerType == LTTO_IR_RAW_SIGNATURE_HEADER_NORMAL) {
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d10b      	bne.n	8002cd6 <LTTO_IR_CONV_RawSignatureToPulses+0x66>
            destinationPulseTickMSBuffer[arrayIndex++] = 3;
 8002cbe:	2216      	movs	r2, #22
 8002cc0:	18bb      	adds	r3, r7, r2
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	18ba      	adds	r2, r7, r2
 8002cc6:	1c59      	adds	r1, r3, #1
 8002cc8:	7011      	strb	r1, [r2, #0]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	18d3      	adds	r3, r2, r3
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	e00e      	b.n	8002cf4 <LTTO_IR_CONV_RawSignatureToPulses+0x84>
        } else if(sourceRawSignature->headerType == LTTO_IR_RAW_SIGNATURE_HEADER_BEACON) {
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d10a      	bne.n	8002cf4 <LTTO_IR_CONV_RawSignatureToPulses+0x84>
            destinationPulseTickMSBuffer[arrayIndex++] = 6;
 8002cde:	2216      	movs	r2, #22
 8002ce0:	18bb      	adds	r3, r7, r2
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	18ba      	adds	r2, r7, r2
 8002ce6:	1c59      	adds	r1, r3, #1
 8002ce8:	7011      	strb	r1, [r2, #0]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	18d3      	adds	r3, r2, r3
 8002cf0:	2206      	movs	r2, #6
 8002cf2:	601a      	str	r2, [r3, #0]
        }

        //Data bits
        switch(sourceRawSignature->bitCount) {
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	785b      	ldrb	r3, [r3, #1]
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d011      	beq.n	8002d20 <LTTO_IR_CONV_RawSignatureToPulses+0xb0>
 8002cfc:	dc02      	bgt.n	8002d04 <LTTO_IR_CONV_RawSignatureToPulses+0x94>
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d009      	beq.n	8002d16 <LTTO_IR_CONV_RawSignatureToPulses+0xa6>
 8002d02:	e003      	b.n	8002d0c <LTTO_IR_CONV_RawSignatureToPulses+0x9c>
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d010      	beq.n	8002d2a <LTTO_IR_CONV_RawSignatureToPulses+0xba>
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d013      	beq.n	8002d34 <LTTO_IR_CONV_RawSignatureToPulses+0xc4>
        	default:
        		bitCount = 0;
 8002d0c:	2317      	movs	r3, #23
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	2200      	movs	r2, #0
 8002d12:	701a      	strb	r2, [r3, #0]
        		break;
 8002d14:	e013      	b.n	8002d3e <LTTO_IR_CONV_RawSignatureToPulses+0xce>
            case LTTO_IR_RAW_SIGNATURE_BIT_COUNT_5:
                bitCount = 5;
 8002d16:	2317      	movs	r3, #23
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	2205      	movs	r2, #5
 8002d1c:	701a      	strb	r2, [r3, #0]
                break;
 8002d1e:	e00e      	b.n	8002d3e <LTTO_IR_CONV_RawSignatureToPulses+0xce>
            case LTTO_IR_RAW_SIGNATURE_BIT_COUNT_7:
                bitCount = 7;
 8002d20:	2317      	movs	r3, #23
 8002d22:	18fb      	adds	r3, r7, r3
 8002d24:	2207      	movs	r2, #7
 8002d26:	701a      	strb	r2, [r3, #0]
                break;
 8002d28:	e009      	b.n	8002d3e <LTTO_IR_CONV_RawSignatureToPulses+0xce>
            case LTTO_IR_RAW_SIGNATURE_BIT_COUNT_8:
                bitCount = 8;
 8002d2a:	2317      	movs	r3, #23
 8002d2c:	18fb      	adds	r3, r7, r3
 8002d2e:	2208      	movs	r2, #8
 8002d30:	701a      	strb	r2, [r3, #0]
                break;
 8002d32:	e004      	b.n	8002d3e <LTTO_IR_CONV_RawSignatureToPulses+0xce>
            case LTTO_IR_RAW_SIGNATURE_BIT_COUNT_9:
                bitCount = 9;
 8002d34:	2317      	movs	r3, #23
 8002d36:	18fb      	adds	r3, r7, r3
 8002d38:	2209      	movs	r2, #9
 8002d3a:	701a      	strb	r2, [r3, #0]
                break;
 8002d3c:	46c0      	nop			; (mov r8, r8)
        }
        for(;bitCount != 0;bitCount--) {
 8002d3e:	e033      	b.n	8002da8 <LTTO_IR_CONV_RawSignatureToPulses+0x138>
            destinationPulseTickMSBuffer[arrayIndex++] = 2;
 8002d40:	2216      	movs	r2, #22
 8002d42:	18bb      	adds	r3, r7, r2
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	18ba      	adds	r2, r7, r2
 8002d48:	1c59      	adds	r1, r3, #1
 8002d4a:	7011      	strb	r1, [r2, #0]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	18d3      	adds	r3, r2, r3
 8002d52:	2202      	movs	r2, #2
 8002d54:	601a      	str	r2, [r3, #0]
            if( (sourceRawSignature->data & (0x01 << (bitCount-1))) != 0) {
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	885b      	ldrh	r3, [r3, #2]
 8002d5a:	001a      	movs	r2, r3
 8002d5c:	2317      	movs	r3, #23
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	411a      	asrs	r2, r3
 8002d66:	0013      	movs	r3, r2
 8002d68:	2201      	movs	r2, #1
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d00b      	beq.n	8002d86 <LTTO_IR_CONV_RawSignatureToPulses+0x116>
                destinationPulseTickMSBuffer[arrayIndex++] = 2;
 8002d6e:	2216      	movs	r2, #22
 8002d70:	18bb      	adds	r3, r7, r2
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	18ba      	adds	r2, r7, r2
 8002d76:	1c59      	adds	r1, r3, #1
 8002d78:	7011      	strb	r1, [r2, #0]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	18d3      	adds	r3, r2, r3
 8002d80:	2202      	movs	r2, #2
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	e00a      	b.n	8002d9c <LTTO_IR_CONV_RawSignatureToPulses+0x12c>
            } else {
                destinationPulseTickMSBuffer[arrayIndex++] = 1;
 8002d86:	2216      	movs	r2, #22
 8002d88:	18bb      	adds	r3, r7, r2
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	18ba      	adds	r2, r7, r2
 8002d8e:	1c59      	adds	r1, r3, #1
 8002d90:	7011      	strb	r1, [r2, #0]
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	18d3      	adds	r3, r2, r3
 8002d98:	2201      	movs	r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]
        for(;bitCount != 0;bitCount--) {
 8002d9c:	2117      	movs	r1, #23
 8002d9e:	187b      	adds	r3, r7, r1
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	187b      	adds	r3, r7, r1
 8002da4:	3a01      	subs	r2, #1
 8002da6:	701a      	strb	r2, [r3, #0]
 8002da8:	2317      	movs	r3, #23
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1c6      	bne.n	8002d40 <LTTO_IR_CONV_RawSignatureToPulses+0xd0>
            }
        }

        //SFP between this and the next packet sent
        switch(sourceRawSignature->SFP) {
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	791b      	ldrb	r3, [r3, #4]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d028      	beq.n	8002e0c <LTTO_IR_CONV_RawSignatureToPulses+0x19c>
 8002dba:	dc02      	bgt.n	8002dc2 <LTTO_IR_CONV_RawSignatureToPulses+0x152>
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <LTTO_IR_CONV_RawSignatureToPulses+0x15c>
 8002dc0:	e049      	b.n	8002e56 <LTTO_IR_CONV_RawSignatureToPulses+0x1e6>
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d02e      	beq.n	8002e24 <LTTO_IR_CONV_RawSignatureToPulses+0x1b4>
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d038      	beq.n	8002e3c <LTTO_IR_CONV_RawSignatureToPulses+0x1cc>
 8002dca:	e044      	b.n	8002e56 <LTTO_IR_CONV_RawSignatureToPulses+0x1e6>
            case LTTO_IR_RAW_SIGNATURE_SFP_UNKNOWN:
                //If we don't have one specified, look at the header type to guess at one.
                if(sourceRawSignature->headerType == LTTO_IR_RAW_SIGNATURE_HEADER_NORMAL) {
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d10b      	bne.n	8002dec <LTTO_IR_CONV_RawSignatureToPulses+0x17c>
                    //Generally, normal-headered signatures have a medium SFP
                    destinationPulseTickMSBuffer[arrayIndex++] = 56;
 8002dd4:	2216      	movs	r2, #22
 8002dd6:	18bb      	adds	r3, r7, r2
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	18ba      	adds	r2, r7, r2
 8002ddc:	1c59      	adds	r1, r3, #1
 8002dde:	7011      	strb	r1, [r2, #0]
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	18d3      	adds	r3, r2, r3
 8002de6:	2238      	movs	r2, #56	; 0x38
 8002de8:	601a      	str	r2, [r3, #0]
                } else if(sourceRawSignature->headerType == LTTO_IR_RAW_SIGNATURE_HEADER_BEACON) {
                    //Generally, beacon-headered signatures have a short SFP
                    destinationPulseTickMSBuffer[arrayIndex++] = 25;
                }
                break;
 8002dea:	e033      	b.n	8002e54 <LTTO_IR_CONV_RawSignatureToPulses+0x1e4>
                } else if(sourceRawSignature->headerType == LTTO_IR_RAW_SIGNATURE_HEADER_BEACON) {
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d12f      	bne.n	8002e54 <LTTO_IR_CONV_RawSignatureToPulses+0x1e4>
                    destinationPulseTickMSBuffer[arrayIndex++] = 25;
 8002df4:	2216      	movs	r2, #22
 8002df6:	18bb      	adds	r3, r7, r2
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	18ba      	adds	r2, r7, r2
 8002dfc:	1c59      	adds	r1, r3, #1
 8002dfe:	7011      	strb	r1, [r2, #0]
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	18d3      	adds	r3, r2, r3
 8002e06:	2219      	movs	r2, #25
 8002e08:	601a      	str	r2, [r3, #0]
                break;
 8002e0a:	e023      	b.n	8002e54 <LTTO_IR_CONV_RawSignatureToPulses+0x1e4>
            case LTTO_IR_RAW_SIGNATURE_SFP_SHORT:
                destinationPulseTickMSBuffer[arrayIndex++] = 25;
 8002e0c:	2216      	movs	r2, #22
 8002e0e:	18bb      	adds	r3, r7, r2
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	18ba      	adds	r2, r7, r2
 8002e14:	1c59      	adds	r1, r3, #1
 8002e16:	7011      	strb	r1, [r2, #0]
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	18d3      	adds	r3, r2, r3
 8002e1e:	2219      	movs	r2, #25
 8002e20:	601a      	str	r2, [r3, #0]
                break;
 8002e22:	e018      	b.n	8002e56 <LTTO_IR_CONV_RawSignatureToPulses+0x1e6>
            case LTTO_IR_RAW_SIGNATURE_SFP_MEDIUM:
                destinationPulseTickMSBuffer[arrayIndex++] = 56;
 8002e24:	2216      	movs	r2, #22
 8002e26:	18bb      	adds	r3, r7, r2
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	18ba      	adds	r2, r7, r2
 8002e2c:	1c59      	adds	r1, r3, #1
 8002e2e:	7011      	strb	r1, [r2, #0]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	18d3      	adds	r3, r2, r3
 8002e36:	2238      	movs	r2, #56	; 0x38
 8002e38:	601a      	str	r2, [r3, #0]
                break;
 8002e3a:	e00c      	b.n	8002e56 <LTTO_IR_CONV_RawSignatureToPulses+0x1e6>
            case LTTO_IR_RAW_SIGNATURE_SFP_LONG:
                destinationPulseTickMSBuffer[arrayIndex++] = 80;
 8002e3c:	2216      	movs	r2, #22
 8002e3e:	18bb      	adds	r3, r7, r2
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	18ba      	adds	r2, r7, r2
 8002e44:	1c59      	adds	r1, r3, #1
 8002e46:	7011      	strb	r1, [r2, #0]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	18d3      	adds	r3, r2, r3
 8002e4e:	2250      	movs	r2, #80	; 0x50
 8002e50:	601a      	str	r2, [r3, #0]
                break;
 8002e52:	e000      	b.n	8002e56 <LTTO_IR_CONV_RawSignatureToPulses+0x1e6>
                break;
 8002e54:	46c0      	nop			; (mov r8, r8)
        }

        //And save the pulse count
        *destinationPulseCount = arrayIndex;
 8002e56:	2316      	movs	r3, #22
 8002e58:	18fb      	adds	r3, r7, r3
 8002e5a:	781a      	ldrb	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	601a      	str	r2, [r3, #0]
    }
}
 8002e60:	46c0      	nop			; (mov r8, r8)
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b006      	add	sp, #24
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <LTTO_IR_CONV_RawSignatureToSignature>:

void LTTO_IR_CONV_RawSignatureToSignature(LTTO_IR_RAW_SIGNATURE_t *sourceRawSignature, LTTO_IR_SIGNATURE_t *destinationSignature) {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
    //Clear the destination struct
    destinationSignature->signatureType = LTTO_IR_SIGNATURE_TYPE_UNKNOWN;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2200      	movs	r2, #0
 8002e76:	701a      	strb	r2, [r3, #0]
    destinationSignature->data = 0;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	805a      	strh	r2, [r3, #2]

    if(sourceRawSignature->valid) {
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	795b      	ldrb	r3, [r3, #5]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d100      	bne.n	8002e88 <LTTO_IR_CONV_RawSignatureToSignature+0x20>
 8002e86:	e05d      	b.n	8002f44 <LTTO_IR_CONV_RawSignatureToSignature+0xdc>
        //Start parsing the raw Signature->
        if(sourceRawSignature->headerType == LTTO_IR_RAW_SIGNATURE_HEADER_NORMAL) {
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d136      	bne.n	8002efe <LTTO_IR_CONV_RawSignatureToSignature+0x96>
            if(sourceRawSignature->bitCount == LTTO_IR_RAW_SIGNATURE_BIT_COUNT_5) {
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	785b      	ldrb	r3, [r3, #1]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d055      	beq.n	8002f44 <LTTO_IR_CONV_RawSignatureToSignature+0xdc>
                //Not known to be valid
            } else if(sourceRawSignature->bitCount == LTTO_IR_RAW_SIGNATURE_BIT_COUNT_7) {
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	785b      	ldrb	r3, [r3, #1]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d107      	bne.n	8002eb0 <LTTO_IR_CONV_RawSignatureToSignature+0x48>
                //Tag
                destinationSignature->signatureType = LTTO_IR_SIGNATURE_TYPE_TAG;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	701a      	strb	r2, [r3, #0]
                destinationSignature->data = sourceRawSignature->data;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	885a      	ldrh	r2, [r3, #2]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	805a      	strh	r2, [r3, #2]
                destinationSignature->signatureType = LTTO_IR_SIGNATURE_TYPE_LTAR_BEACON;
                destinationSignature->data = sourceRawSignature->data;
            }
        }
    }
}
 8002eae:	e049      	b.n	8002f44 <LTTO_IR_CONV_RawSignatureToSignature+0xdc>
            } else if(sourceRawSignature->bitCount == LTTO_IR_RAW_SIGNATURE_BIT_COUNT_8) {
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	785b      	ldrb	r3, [r3, #1]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d107      	bne.n	8002ec8 <LTTO_IR_CONV_RawSignatureToSignature+0x60>
                destinationSignature->signatureType = LTTO_IR_SIGNATURE_TYPE_MULTIBYTE_DATA;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	2205      	movs	r2, #5
 8002ebc:	701a      	strb	r2, [r3, #0]
                destinationSignature->data = sourceRawSignature->data;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	885a      	ldrh	r2, [r3, #2]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	805a      	strh	r2, [r3, #2]
}
 8002ec6:	e03d      	b.n	8002f44 <LTTO_IR_CONV_RawSignatureToSignature+0xdc>
            } else if(sourceRawSignature->bitCount == LTTO_IR_RAW_SIGNATURE_BIT_COUNT_9) {
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	785b      	ldrb	r3, [r3, #1]
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d139      	bne.n	8002f44 <LTTO_IR_CONV_RawSignatureToSignature+0xdc>
                if( (sourceRawSignature->data & 0x0100) == 0x0100) {
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	885b      	ldrh	r3, [r3, #2]
 8002ed4:	001a      	movs	r2, r3
 8002ed6:	2380      	movs	r3, #128	; 0x80
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	4013      	ands	r3, r2
 8002edc:	d007      	beq.n	8002eee <LTTO_IR_CONV_RawSignatureToSignature+0x86>
                    destinationSignature->signatureType = LTTO_IR_SIGNATURE_TYPE_MULTIBYTE_CSUM;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2206      	movs	r2, #6
 8002ee2:	701a      	strb	r2, [r3, #0]
                    destinationSignature->data = sourceRawSignature->data;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	885a      	ldrh	r2, [r3, #2]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	805a      	strh	r2, [r3, #2]
}
 8002eec:	e02a      	b.n	8002f44 <LTTO_IR_CONV_RawSignatureToSignature+0xdc>
                    destinationSignature->signatureType = LTTO_IR_SIGNATURE_TYPE_MULTIBYTE_PTYPE;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2204      	movs	r2, #4
 8002ef2:	701a      	strb	r2, [r3, #0]
                    destinationSignature->data = sourceRawSignature->data;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	885a      	ldrh	r2, [r3, #2]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	805a      	strh	r2, [r3, #2]
}
 8002efc:	e022      	b.n	8002f44 <LTTO_IR_CONV_RawSignatureToSignature+0xdc>
        } else if(sourceRawSignature->headerType == LTTO_IR_RAW_SIGNATURE_HEADER_BEACON) {
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d11e      	bne.n	8002f44 <LTTO_IR_CONV_RawSignatureToSignature+0xdc>
            if(sourceRawSignature->bitCount == LTTO_IR_RAW_SIGNATURE_BIT_COUNT_5) {
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	785b      	ldrb	r3, [r3, #1]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d107      	bne.n	8002f1e <LTTO_IR_CONV_RawSignatureToSignature+0xb6>
                destinationSignature->signatureType = LTTO_IR_SIGNATURE_TYPE_LTTO_BEACON;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2201      	movs	r2, #1
 8002f12:	701a      	strb	r2, [r3, #0]
                destinationSignature->data = sourceRawSignature->data;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	885a      	ldrh	r2, [r3, #2]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	805a      	strh	r2, [r3, #2]
}
 8002f1c:	e012      	b.n	8002f44 <LTTO_IR_CONV_RawSignatureToSignature+0xdc>
            } else if(sourceRawSignature->bitCount == LTTO_IR_RAW_SIGNATURE_BIT_COUNT_7) {
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	785b      	ldrb	r3, [r3, #1]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d00e      	beq.n	8002f44 <LTTO_IR_CONV_RawSignatureToSignature+0xdc>
            } else if(sourceRawSignature->bitCount == LTTO_IR_RAW_SIGNATURE_BIT_COUNT_8) {
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	785b      	ldrb	r3, [r3, #1]
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d00a      	beq.n	8002f44 <LTTO_IR_CONV_RawSignatureToSignature+0xdc>
            } else if(sourceRawSignature->bitCount == LTTO_IR_RAW_SIGNATURE_BIT_COUNT_9) {
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	785b      	ldrb	r3, [r3, #1]
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d106      	bne.n	8002f44 <LTTO_IR_CONV_RawSignatureToSignature+0xdc>
                destinationSignature->signatureType = LTTO_IR_SIGNATURE_TYPE_LTAR_BEACON;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2202      	movs	r2, #2
 8002f3a:	701a      	strb	r2, [r3, #0]
                destinationSignature->data = sourceRawSignature->data;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	885a      	ldrh	r2, [r3, #2]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	805a      	strh	r2, [r3, #2]
}
 8002f44:	46c0      	nop			; (mov r8, r8)
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b002      	add	sp, #8
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <LTTO_IR_CONV_SignatureToRawSignature>:

void LTTO_IR_CONV_SignatureToRawSignature(LTTO_IR_SIGNATURE_t *sourceSignature, LTTO_IR_RAW_SIGNATURE_t *destinationRawSignature) {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
    //Clear the destination struct.
    destinationRawSignature->valid = false;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	715a      	strb	r2, [r3, #5]
    destinationRawSignature->headerType = LTTO_IR_RAW_SIGNATURE_HEADER_UNKNOWN;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	701a      	strb	r2, [r3, #0]
    destinationRawSignature->bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_UNKNOWN;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2200      	movs	r2, #0
 8002f66:	705a      	strb	r2, [r3, #1]
    destinationRawSignature->data = 0;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	805a      	strh	r2, [r3, #2]
    destinationRawSignature->SFP = LTTO_IR_RAW_SIGNATURE_SFP_UNKNOWN;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2200      	movs	r2, #0
 8002f72:	711a      	strb	r2, [r3, #4]
    
    switch(sourceSignature->signatureType) {
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b06      	cmp	r3, #6
 8002f7a:	d872      	bhi.n	8003062 <LTTO_IR_CONV_SignatureToRawSignature+0x116>
 8002f7c:	009a      	lsls	r2, r3, #2
 8002f7e:	4b3b      	ldr	r3, [pc, #236]	; (800306c <LTTO_IR_CONV_SignatureToRawSignature+0x120>)
 8002f80:	18d3      	adds	r3, r2, r3
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	469f      	mov	pc, r3
        case LTTO_IR_SIGNATURE_TYPE_LTTO_BEACON:
            destinationRawSignature->headerType = LTTO_IR_RAW_SIGNATURE_HEADER_BEACON;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	701a      	strb	r2, [r3, #0]
            destinationRawSignature->bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_5;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	705a      	strb	r2, [r3, #1]
            destinationRawSignature->data = sourceSignature->data;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	885a      	ldrh	r2, [r3, #2]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	805a      	strh	r2, [r3, #2]
            destinationRawSignature->SFP = LTTO_IR_RAW_SIGNATURE_SFP_SHORT;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	711a      	strb	r2, [r3, #4]
            destinationRawSignature->valid = true;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	715a      	strb	r2, [r3, #5]
            break;
 8002fa6:	e05c      	b.n	8003062 <LTTO_IR_CONV_SignatureToRawSignature+0x116>
        case LTTO_IR_SIGNATURE_TYPE_LTAR_BEACON:
            destinationRawSignature->headerType = LTTO_IR_RAW_SIGNATURE_HEADER_BEACON;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2202      	movs	r2, #2
 8002fac:	701a      	strb	r2, [r3, #0]
            destinationRawSignature->bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_9;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2204      	movs	r2, #4
 8002fb2:	705a      	strb	r2, [r3, #1]
            destinationRawSignature->data = sourceSignature->data;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	885a      	ldrh	r2, [r3, #2]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	805a      	strh	r2, [r3, #2]
            destinationRawSignature->SFP = LTTO_IR_RAW_SIGNATURE_SFP_SHORT;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	711a      	strb	r2, [r3, #4]
            destinationRawSignature->valid = true;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	715a      	strb	r2, [r3, #5]
            break;
 8002fc8:	e04b      	b.n	8003062 <LTTO_IR_CONV_SignatureToRawSignature+0x116>
        case LTTO_IR_SIGNATURE_TYPE_TAG:
            destinationRawSignature->headerType = LTTO_IR_RAW_SIGNATURE_HEADER_NORMAL;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	701a      	strb	r2, [r3, #0]
            destinationRawSignature->bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_7;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	705a      	strb	r2, [r3, #1]
            destinationRawSignature->data = sourceSignature->data;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	885a      	ldrh	r2, [r3, #2]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	805a      	strh	r2, [r3, #2]
            destinationRawSignature->SFP = LTTO_IR_RAW_SIGNATURE_SFP_LONG;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	711a      	strb	r2, [r3, #4]
            destinationRawSignature->valid = true;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	715a      	strb	r2, [r3, #5]
            break;
 8002fea:	e03a      	b.n	8003062 <LTTO_IR_CONV_SignatureToRawSignature+0x116>
        case LTTO_IR_SIGNATURE_TYPE_MULTIBYTE_PTYPE:
            destinationRawSignature->headerType = LTTO_IR_RAW_SIGNATURE_HEADER_NORMAL;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	701a      	strb	r2, [r3, #0]
            destinationRawSignature->bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_9;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	705a      	strb	r2, [r3, #1]
            destinationRawSignature->data = (sourceSignature->data & ~(0x0100));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	885b      	ldrh	r3, [r3, #2]
 8002ffc:	4a1c      	ldr	r2, [pc, #112]	; (8003070 <LTTO_IR_CONV_SignatureToRawSignature+0x124>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	b29a      	uxth	r2, r3
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	805a      	strh	r2, [r3, #2]
            destinationRawSignature->SFP = LTTO_IR_RAW_SIGNATURE_SFP_SHORT;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2201      	movs	r2, #1
 800300a:	711a      	strb	r2, [r3, #4]
            destinationRawSignature->valid = true;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2201      	movs	r2, #1
 8003010:	715a      	strb	r2, [r3, #5]
            break;
 8003012:	e026      	b.n	8003062 <LTTO_IR_CONV_SignatureToRawSignature+0x116>
        case LTTO_IR_SIGNATURE_TYPE_MULTIBYTE_DATA:
            destinationRawSignature->headerType = LTTO_IR_RAW_SIGNATURE_HEADER_NORMAL;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	2201      	movs	r2, #1
 8003018:	701a      	strb	r2, [r3, #0]
            destinationRawSignature->bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_8;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2203      	movs	r2, #3
 800301e:	705a      	strb	r2, [r3, #1]
            destinationRawSignature->data = sourceSignature->data;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	885a      	ldrh	r2, [r3, #2]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	805a      	strh	r2, [r3, #2]
            destinationRawSignature->SFP = LTTO_IR_RAW_SIGNATURE_SFP_SHORT;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2201      	movs	r2, #1
 800302c:	711a      	strb	r2, [r3, #4]
            destinationRawSignature->valid = true;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2201      	movs	r2, #1
 8003032:	715a      	strb	r2, [r3, #5]
            break;
 8003034:	e015      	b.n	8003062 <LTTO_IR_CONV_SignatureToRawSignature+0x116>
        case LTTO_IR_SIGNATURE_TYPE_MULTIBYTE_CSUM:
            destinationRawSignature->headerType = LTTO_IR_RAW_SIGNATURE_HEADER_NORMAL;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2201      	movs	r2, #1
 800303a:	701a      	strb	r2, [r3, #0]
            destinationRawSignature->bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_9;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2204      	movs	r2, #4
 8003040:	705a      	strb	r2, [r3, #1]
            destinationRawSignature->data = (sourceSignature->data | 0x0100);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	885b      	ldrh	r3, [r3, #2]
 8003046:	2280      	movs	r2, #128	; 0x80
 8003048:	0052      	lsls	r2, r2, #1
 800304a:	4313      	orrs	r3, r2
 800304c:	b29a      	uxth	r2, r3
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	805a      	strh	r2, [r3, #2]
            destinationRawSignature->SFP = LTTO_IR_RAW_SIGNATURE_SFP_LONG;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2203      	movs	r2, #3
 8003056:	711a      	strb	r2, [r3, #4]
            destinationRawSignature->valid = true;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	2201      	movs	r2, #1
 800305c:	715a      	strb	r2, [r3, #5]
            break;
 800305e:	e000      	b.n	8003062 <LTTO_IR_CONV_SignatureToRawSignature+0x116>
        case LTTO_IR_SIGNATURE_TYPE_UNKNOWN:
        	break;
 8003060:	46c0      	nop			; (mov r8, r8)
    }
}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	46bd      	mov	sp, r7
 8003066:	b002      	add	sp, #8
 8003068:	bd80      	pop	{r7, pc}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	08005ec4 	.word	0x08005ec4
 8003070:	fffffeff 	.word	0xfffffeff

08003074 <LTTO_IR_CONV_SignatureToPulses>:
    LTTO_IR_CONV_PulsesToRawSignature(pulseTickMSBuffer, pulseCount, &tempRawSignature);

    LTTO_IR_CONV_RawSignatureToSignature(&tempRawSignature, destinationSignature);
}

void LTTO_IR_CONV_SignatureToPulses(LTTO_IR_SIGNATURE_t *sourceSignature, int destinationPulseTickMSBuffer[], int *destinationPulseCount) {
 8003074:	b590      	push	{r4, r7, lr}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
    LTTO_IR_RAW_SIGNATURE_t tempRawSignature;
    LTTO_IR_CONV_SignatureToRawSignature(sourceSignature, &tempRawSignature);
 8003080:	2410      	movs	r4, #16
 8003082:	193a      	adds	r2, r7, r4
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	0011      	movs	r1, r2
 8003088:	0018      	movs	r0, r3
 800308a:	f7ff ff5f 	bl	8002f4c <LTTO_IR_CONV_SignatureToRawSignature>
    LTTO_IR_CONV_RawSignatureToPulses(&tempRawSignature, destinationPulseTickMSBuffer, destinationPulseCount);
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	193b      	adds	r3, r7, r4
 8003094:	0018      	movs	r0, r3
 8003096:	f7ff fdeb 	bl	8002c70 <LTTO_IR_CONV_RawSignatureToPulses>
}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	46bd      	mov	sp, r7
 800309e:	b007      	add	sp, #28
 80030a0:	bd90      	pop	{r4, r7, pc}

080030a2 <LTTO_IR_CONV_ClearMultibyte>:
    LTTO_IR_SIGNATURE_t tempSignature;
    LTTO_IR_CONV_MultibyteChecksumToSignature(sourceMultibyte, &tempSignature);
    LTTO_IR_CONV_SignatureToPulses(&tempSignature, destinationPulseTickMSBuffer, destinationPulseCount);
}

void LTTO_IR_CONV_ClearMultibyte(LTTO_IR_MULTIBYTE_t *sourceMultibyte) {
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
    sourceMultibyte->dataByteCount = 0;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	759a      	strb	r2, [r3, #22]
    sourceMultibyte->runningChecksum = 0xFF;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	22ff      	movs	r2, #255	; 0xff
 80030b4:	75da      	strb	r2, [r3, #23]
    sourceMultibyte->valid = false;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	761a      	strb	r2, [r3, #24]
}
 80030bc:	46c0      	nop			; (mov r8, r8)
 80030be:	46bd      	mov	sp, r7
 80030c0:	b002      	add	sp, #8
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <LTTO_IR_CONV_AddSignatureToMultibyte>:

bool LTTO_IR_CONV_AddSignatureToMultibyte(LTTO_IR_SIGNATURE_t *sourceSignature, LTTO_IR_MULTIBYTE_t *destinationMultibyte) {
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
    bool multibyteOkay = true;
 80030ce:	230f      	movs	r3, #15
 80030d0:	18fb      	adds	r3, r7, r3
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]
    if(sourceSignature->signatureType == LTTO_IR_SIGNATURE_TYPE_MULTIBYTE_PTYPE) {
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d132      	bne.n	8003144 <LTTO_IR_CONV_AddSignatureToMultibyte+0x80>
        if(destinationMultibyte->dataByteCount == 0) {
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	7d9b      	ldrb	r3, [r3, #22]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d117      	bne.n	8003116 <LTTO_IR_CONV_AddSignatureToMultibyte+0x52>
            destinationMultibyte->dataBytes[0] = sourceSignature->data;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	885b      	ldrh	r3, [r3, #2]
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	701a      	strb	r2, [r3, #0]
            destinationMultibyte->dataByteCount += 1;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	7d9b      	ldrb	r3, [r3, #22]
 80030f4:	3301      	adds	r3, #1
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	759a      	strb	r2, [r3, #22]
            destinationMultibyte->runningChecksum -= sourceSignature->data;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	7dda      	ldrb	r2, [r3, #23]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	885b      	ldrh	r3, [r3, #2]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	b2da      	uxtb	r2, r3
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	75da      	strb	r2, [r3, #23]
            destinationMultibyte->valid = false;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2200      	movs	r2, #0
 8003112:	761a      	strb	r2, [r3, #24]
 8003114:	e056      	b.n	80031c4 <LTTO_IR_CONV_AddSignatureToMultibyte+0x100>
        } else {
            multibyteOkay = false;
 8003116:	230f      	movs	r3, #15
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]
            destinationMultibyte->dataBytes[0] = sourceSignature->data;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	885b      	ldrh	r3, [r3, #2]
 8003122:	b2da      	uxtb	r2, r3
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	701a      	strb	r2, [r3, #0]
            destinationMultibyte->dataByteCount = 1;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	2201      	movs	r2, #1
 800312c:	759a      	strb	r2, [r3, #22]
            destinationMultibyte->runningChecksum = (0xFF - sourceSignature->data);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	885b      	ldrh	r3, [r3, #2]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	b2da      	uxtb	r2, r3
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	75da      	strb	r2, [r3, #23]
            destinationMultibyte->valid = false;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2200      	movs	r2, #0
 8003140:	761a      	strb	r2, [r3, #24]
 8003142:	e03f      	b.n	80031c4 <LTTO_IR_CONV_AddSignatureToMultibyte+0x100>
        }
    } else if(sourceSignature->signatureType == LTTO_IR_SIGNATURE_TYPE_MULTIBYTE_DATA) {
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b05      	cmp	r3, #5
 800314a:	d124      	bne.n	8003196 <LTTO_IR_CONV_AddSignatureToMultibyte+0xd2>
        if(destinationMultibyte->dataByteCount != 0) {
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	7d9b      	ldrb	r3, [r3, #22]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d018      	beq.n	8003186 <LTTO_IR_CONV_AddSignatureToMultibyte+0xc2>
            destinationMultibyte->dataBytes[destinationMultibyte->dataByteCount++] = sourceSignature->data;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	8859      	ldrh	r1, [r3, #2]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	7d9b      	ldrb	r3, [r3, #22]
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	b2d0      	uxtb	r0, r2
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	7590      	strb	r0, [r2, #22]
 8003164:	001a      	movs	r2, r3
 8003166:	b2c9      	uxtb	r1, r1
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	5499      	strb	r1, [r3, r2]
            destinationMultibyte->runningChecksum -= sourceSignature->data;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	7dda      	ldrb	r2, [r3, #23]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	885b      	ldrh	r3, [r3, #2]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	b2da      	uxtb	r2, r3
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	75da      	strb	r2, [r3, #23]
            destinationMultibyte->valid = false;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2200      	movs	r2, #0
 8003182:	761a      	strb	r2, [r3, #24]
 8003184:	e01e      	b.n	80031c4 <LTTO_IR_CONV_AddSignatureToMultibyte+0x100>
        } else {
            multibyteOkay = false;
 8003186:	230f      	movs	r3, #15
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	2200      	movs	r2, #0
 800318c:	701a      	strb	r2, [r3, #0]
            destinationMultibyte->valid = false;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2200      	movs	r2, #0
 8003192:	761a      	strb	r2, [r3, #24]
 8003194:	e016      	b.n	80031c4 <LTTO_IR_CONV_AddSignatureToMultibyte+0x100>
        }
    } else if(sourceSignature->signatureType == LTTO_IR_SIGNATURE_TYPE_MULTIBYTE_CSUM) {
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b06      	cmp	r3, #6
 800319c:	d112      	bne.n	80031c4 <LTTO_IR_CONV_AddSignatureToMultibyte+0x100>
        if(destinationMultibyte->dataByteCount != 0) {
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	7d9b      	ldrb	r3, [r3, #22]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <LTTO_IR_CONV_AddSignatureToMultibyte+0xf8>
            if(destinationMultibyte->runningChecksum == sourceSignature->data) {
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	7ddb      	ldrb	r3, [r3, #23]
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	885b      	ldrh	r3, [r3, #2]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d107      	bne.n	80031c4 <LTTO_IR_CONV_AddSignatureToMultibyte+0x100>
                destinationMultibyte->valid = true;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	2201      	movs	r2, #1
 80031b8:	761a      	strb	r2, [r3, #24]
 80031ba:	e003      	b.n	80031c4 <LTTO_IR_CONV_AddSignatureToMultibyte+0x100>
            }
        } else {
            multibyteOkay = false;
 80031bc:	230f      	movs	r3, #15
 80031be:	18fb      	adds	r3, r7, r3
 80031c0:	2200      	movs	r2, #0
 80031c2:	701a      	strb	r2, [r3, #0]
        }
    }
    return multibyteOkay;
 80031c4:	230f      	movs	r3, #15
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	781b      	ldrb	r3, [r3, #0]
}
 80031ca:	0018      	movs	r0, r3
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b004      	add	sp, #16
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <LTTO_IR_RX_NewIRPulseReceived>:
volatile int LTTO_IR_RX_finalPulseCount = 0;

volatile LTTO_IR_RAW_SIGNATURE_t LTTO_IR_RX_wipSignature;
volatile LTTO_IR_RAW_SIGNATURE_t LTTO_IR_RX_finalSignature;

void LTTO_IR_RX_NewIRPulseReceived(int pulseLengthTicks, bool IRpresentThisPulse) {
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	000a      	movs	r2, r1
 80031de:	1cfb      	adds	r3, r7, #3
 80031e0:	701a      	strb	r2, [r3, #0]
    switch(LTTO_IR_RX_WIPpulseCount) {
 80031e2:	4bb4      	ldr	r3, [pc, #720]	; (80034b4 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b15      	cmp	r3, #21
 80031e8:	d900      	bls.n	80031ec <LTTO_IR_RX_NewIRPulseReceived+0x18>
 80031ea:	e1db      	b.n	80035a4 <LTTO_IR_RX_NewIRPulseReceived+0x3d0>
 80031ec:	009a      	lsls	r2, r3, #2
 80031ee:	4bb2      	ldr	r3, [pc, #712]	; (80034b8 <LTTO_IR_RX_NewIRPulseReceived+0x2e4>)
 80031f0:	18d3      	adds	r3, r2, r3
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	469f      	mov	pc, r3
        case 0:
            //Looking for a ~3ms pre-sync pulse
            if(IRpresentThisPulse && (pulseLengthTicks > (2.5*LTTO_IR_RX_TICKS_PER_MS)) && (pulseLengthTicks < (3.5*LTTO_IR_RX_TICKS_PER_MS)) ) {
 80031f6:	1cfb      	adds	r3, r7, #3
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d100      	bne.n	8003200 <LTTO_IR_RX_NewIRPulseReceived+0x2c>
 80031fe:	e1d0      	b.n	80035a2 <LTTO_IR_RX_NewIRPulseReceived+0x3ce>
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7fd f953 	bl	80004ac <__aeabi_i2d>
 8003206:	2200      	movs	r2, #0
 8003208:	4bac      	ldr	r3, [pc, #688]	; (80034bc <LTTO_IR_RX_NewIRPulseReceived+0x2e8>)
 800320a:	f7fd f833 	bl	8000274 <__aeabi_dcmpgt>
 800320e:	1e03      	subs	r3, r0, #0
 8003210:	d100      	bne.n	8003214 <LTTO_IR_RX_NewIRPulseReceived+0x40>
                //LTTO_IR_RX_WIPpulseMS[0] = 3;
                LTTO_IR_RX_WIPpulseCount++;
            }
            break;
 8003212:	e1c6      	b.n	80035a2 <LTTO_IR_RX_NewIRPulseReceived+0x3ce>
            if(IRpresentThisPulse && (pulseLengthTicks > (2.5*LTTO_IR_RX_TICKS_PER_MS)) && (pulseLengthTicks < (3.5*LTTO_IR_RX_TICKS_PER_MS)) ) {
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7fd f949 	bl	80004ac <__aeabi_i2d>
 800321a:	2200      	movs	r2, #0
 800321c:	4ba8      	ldr	r3, [pc, #672]	; (80034c0 <LTTO_IR_RX_NewIRPulseReceived+0x2ec>)
 800321e:	f7fd f815 	bl	800024c <__aeabi_dcmplt>
 8003222:	1e03      	subs	r3, r0, #0
 8003224:	d100      	bne.n	8003228 <LTTO_IR_RX_NewIRPulseReceived+0x54>
            break;
 8003226:	e1bc      	b.n	80035a2 <LTTO_IR_RX_NewIRPulseReceived+0x3ce>
                LTTO_IR_RX_WIPpulseCount++;
 8003228:	4ba2      	ldr	r3, [pc, #648]	; (80034b4 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	4ba1      	ldr	r3, [pc, #644]	; (80034b4 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 8003230:	601a      	str	r2, [r3, #0]
            break;
 8003232:	e1b6      	b.n	80035a2 <LTTO_IR_RX_NewIRPulseReceived+0x3ce>
        case 1:
            //Looking for a ~6ms pre-sync pause
            if(!IRpresentThisPulse && (pulseLengthTicks > (5.5*LTTO_IR_RX_TICKS_PER_MS)) && (pulseLengthTicks < (7.5*LTTO_IR_RX_TICKS_PER_MS)) ) {
 8003234:	1cfb      	adds	r3, r7, #3
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2201      	movs	r2, #1
 800323a:	4053      	eors	r3, r2
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d017      	beq.n	8003272 <LTTO_IR_RX_NewIRPulseReceived+0x9e>
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fd f932 	bl	80004ac <__aeabi_i2d>
 8003248:	2200      	movs	r2, #0
 800324a:	4b9e      	ldr	r3, [pc, #632]	; (80034c4 <LTTO_IR_RX_NewIRPulseReceived+0x2f0>)
 800324c:	f7fd f812 	bl	8000274 <__aeabi_dcmpgt>
 8003250:	1e03      	subs	r3, r0, #0
 8003252:	d00e      	beq.n	8003272 <LTTO_IR_RX_NewIRPulseReceived+0x9e>
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7fd f929 	bl	80004ac <__aeabi_i2d>
 800325a:	2200      	movs	r2, #0
 800325c:	4b9a      	ldr	r3, [pc, #616]	; (80034c8 <LTTO_IR_RX_NewIRPulseReceived+0x2f4>)
 800325e:	f7fc fff5 	bl	800024c <__aeabi_dcmplt>
 8003262:	1e03      	subs	r3, r0, #0
 8003264:	d005      	beq.n	8003272 <LTTO_IR_RX_NewIRPulseReceived+0x9e>
                //LTTO_IR_RX_WIPpulseMS[1] = 6;
                LTTO_IR_RX_WIPpulseCount++;
 8003266:	4b93      	ldr	r3, [pc, #588]	; (80034b4 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	4b91      	ldr	r3, [pc, #580]	; (80034b4 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 800326e:	601a      	str	r2, [r3, #0]
            } else {
                //Not what we're looking for.
                //Abort!
                LTTO_IR_RX_WIPpulseCount = 0;
            }
            break;
 8003270:	e198      	b.n	80035a4 <LTTO_IR_RX_NewIRPulseReceived+0x3d0>
                LTTO_IR_RX_WIPpulseCount = 0;
 8003272:	4b90      	ldr	r3, [pc, #576]	; (80034b4 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
            break;
 8003278:	e194      	b.n	80035a4 <LTTO_IR_RX_NewIRPulseReceived+0x3d0>
        case 2:
            //Looking for either a ~3ms Tag/Data Sync Pulse, or a ~6ms Beacon Sync Pulse.
            if(IRpresentThisPulse && (pulseLengthTicks > (2.5*LTTO_IR_RX_TICKS_PER_MS)) && (pulseLengthTicks < (3.5*LTTO_IR_RX_TICKS_PER_MS)) ) {
 800327a:	1cfb      	adds	r3, r7, #3
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d01a      	beq.n	80032b8 <LTTO_IR_RX_NewIRPulseReceived+0xe4>
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7fd f912 	bl	80004ac <__aeabi_i2d>
 8003288:	2200      	movs	r2, #0
 800328a:	4b8c      	ldr	r3, [pc, #560]	; (80034bc <LTTO_IR_RX_NewIRPulseReceived+0x2e8>)
 800328c:	f7fc fff2 	bl	8000274 <__aeabi_dcmpgt>
 8003290:	1e03      	subs	r3, r0, #0
 8003292:	d011      	beq.n	80032b8 <LTTO_IR_RX_NewIRPulseReceived+0xe4>
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7fd f909 	bl	80004ac <__aeabi_i2d>
 800329a:	2200      	movs	r2, #0
 800329c:	4b88      	ldr	r3, [pc, #544]	; (80034c0 <LTTO_IR_RX_NewIRPulseReceived+0x2ec>)
 800329e:	f7fc ffd5 	bl	800024c <__aeabi_dcmplt>
 80032a2:	1e03      	subs	r3, r0, #0
 80032a4:	d008      	beq.n	80032b8 <LTTO_IR_RX_NewIRPulseReceived+0xe4>
                //LTTO_IR_RX_WIPpulseMS[2] = 3;
            	LTTO_IR_RX_wipSignature.headerType = LTTO_IR_RAW_SIGNATURE_HEADER_NORMAL;
 80032a6:	4b89      	ldr	r3, [pc, #548]	; (80034cc <LTTO_IR_RX_NewIRPulseReceived+0x2f8>)
 80032a8:	2201      	movs	r2, #1
 80032aa:	701a      	strb	r2, [r3, #0]
                LTTO_IR_RX_WIPpulseCount++;
 80032ac:	4b81      	ldr	r3, [pc, #516]	; (80034b4 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	4b80      	ldr	r3, [pc, #512]	; (80034b4 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	e022      	b.n	80032fe <LTTO_IR_RX_NewIRPulseReceived+0x12a>
            } else if(IRpresentThisPulse && (pulseLengthTicks > (5.5*LTTO_IR_RX_TICKS_PER_MS)) && (pulseLengthTicks < (6.5*LTTO_IR_RX_TICKS_PER_MS)) ) {
 80032b8:	1cfb      	adds	r3, r7, #3
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d01a      	beq.n	80032f6 <LTTO_IR_RX_NewIRPulseReceived+0x122>
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7fd f8f3 	bl	80004ac <__aeabi_i2d>
 80032c6:	2200      	movs	r2, #0
 80032c8:	4b7e      	ldr	r3, [pc, #504]	; (80034c4 <LTTO_IR_RX_NewIRPulseReceived+0x2f0>)
 80032ca:	f7fc ffd3 	bl	8000274 <__aeabi_dcmpgt>
 80032ce:	1e03      	subs	r3, r0, #0
 80032d0:	d011      	beq.n	80032f6 <LTTO_IR_RX_NewIRPulseReceived+0x122>
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7fd f8ea 	bl	80004ac <__aeabi_i2d>
 80032d8:	2200      	movs	r2, #0
 80032da:	4b7d      	ldr	r3, [pc, #500]	; (80034d0 <LTTO_IR_RX_NewIRPulseReceived+0x2fc>)
 80032dc:	f7fc ffb6 	bl	800024c <__aeabi_dcmplt>
 80032e0:	1e03      	subs	r3, r0, #0
 80032e2:	d008      	beq.n	80032f6 <LTTO_IR_RX_NewIRPulseReceived+0x122>
                //LTTO_IR_RX_WIPpulseMS[2] = 6;
            	LTTO_IR_RX_wipSignature.headerType = LTTO_IR_RAW_SIGNATURE_HEADER_BEACON;
 80032e4:	4b79      	ldr	r3, [pc, #484]	; (80034cc <LTTO_IR_RX_NewIRPulseReceived+0x2f8>)
 80032e6:	2202      	movs	r2, #2
 80032e8:	701a      	strb	r2, [r3, #0]
                LTTO_IR_RX_WIPpulseCount++;
 80032ea:	4b72      	ldr	r3, [pc, #456]	; (80034b4 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	4b70      	ldr	r3, [pc, #448]	; (80034b4 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	e003      	b.n	80032fe <LTTO_IR_RX_NewIRPulseReceived+0x12a>
            } else {
                //Not what we're looking for.
                //Abort!
                LTTO_IR_RX_WIPpulseCount = 0;
 80032f6:	4b6f      	ldr	r3, [pc, #444]	; (80034b4 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
            }
            break;
 80032fc:	e152      	b.n	80035a4 <LTTO_IR_RX_NewIRPulseReceived+0x3d0>
 80032fe:	e151      	b.n	80035a4 <LTTO_IR_RX_NewIRPulseReceived+0x3d0>
        case 13:
        case 15:
        case 17:
        case 19:
            //Looking for a ~2ms data pause or something longer than ~2.5ms as a sign that either we're done or something got corrupted.
            if(!IRpresentThisPulse && (pulseLengthTicks > (1.5*LTTO_IR_RX_TICKS_PER_MS)) && (pulseLengthTicks < (2.5*LTTO_IR_RX_TICKS_PER_MS)) ) {
 8003300:	1cfb      	adds	r3, r7, #3
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2201      	movs	r2, #1
 8003306:	4053      	eors	r3, r2
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d017      	beq.n	800333e <LTTO_IR_RX_NewIRPulseReceived+0x16a>
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7fd f8cc 	bl	80004ac <__aeabi_i2d>
 8003314:	2200      	movs	r2, #0
 8003316:	4b6f      	ldr	r3, [pc, #444]	; (80034d4 <LTTO_IR_RX_NewIRPulseReceived+0x300>)
 8003318:	f7fc ffac 	bl	8000274 <__aeabi_dcmpgt>
 800331c:	1e03      	subs	r3, r0, #0
 800331e:	d00e      	beq.n	800333e <LTTO_IR_RX_NewIRPulseReceived+0x16a>
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7fd f8c3 	bl	80004ac <__aeabi_i2d>
 8003326:	2200      	movs	r2, #0
 8003328:	4b64      	ldr	r3, [pc, #400]	; (80034bc <LTTO_IR_RX_NewIRPulseReceived+0x2e8>)
 800332a:	f7fc ff8f 	bl	800024c <__aeabi_dcmplt>
 800332e:	1e03      	subs	r3, r0, #0
 8003330:	d005      	beq.n	800333e <LTTO_IR_RX_NewIRPulseReceived+0x16a>
                //LTTO_IR_RX_WIPpulseMS[LTTO_IR_RX_WIPpulseCount] = 2;
                LTTO_IR_RX_WIPpulseCount++;
 8003332:	4b60      	ldr	r3, [pc, #384]	; (80034b4 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	4b5e      	ldr	r3, [pc, #376]	; (80034b4 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	e05d      	b.n	80033fa <LTTO_IR_RX_NewIRPulseReceived+0x226>
            } else if(!IRpresentThisPulse && (pulseLengthTicks > (2.5*LTTO_IR_RX_TICKS_PER_MS)) ) {
 800333e:	1cfb      	adds	r3, r7, #3
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2201      	movs	r2, #1
 8003344:	4053      	eors	r3, r2
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d052      	beq.n	80033f2 <LTTO_IR_RX_NewIRPulseReceived+0x21e>
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7fd f8ad 	bl	80004ac <__aeabi_i2d>
 8003352:	2200      	movs	r2, #0
 8003354:	4b59      	ldr	r3, [pc, #356]	; (80034bc <LTTO_IR_RX_NewIRPulseReceived+0x2e8>)
 8003356:	f7fc ff8d 	bl	8000274 <__aeabi_dcmpgt>
 800335a:	1e03      	subs	r3, r0, #0
 800335c:	d049      	beq.n	80033f2 <LTTO_IR_RX_NewIRPulseReceived+0x21e>
                //We're done!
                //Copy things to the "forground" buffer, so that the gameplay loop can s  ee we got something.
                /*for(int i = 0;i < LTTO_IR_RX_WIPpulseCount;i++) {
                    LTTO_IR_RX_finalPulseMS[i] = LTTO_IR_RX_WIPpulseMS[i];
                }*/
            	uint8_t temp = ((LTTO_IR_RX_WIPpulseCount - 3) / 2);
 800335e:	4b55      	ldr	r3, [pc, #340]	; (80034b4 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3b03      	subs	r3, #3
 8003364:	2b00      	cmp	r3, #0
 8003366:	da00      	bge.n	800336a <LTTO_IR_RX_NewIRPulseReceived+0x196>
 8003368:	3301      	adds	r3, #1
 800336a:	105b      	asrs	r3, r3, #1
 800336c:	001a      	movs	r2, r3
 800336e:	210e      	movs	r1, #14
 8003370:	187b      	adds	r3, r7, r1
 8003372:	701a      	strb	r2, [r3, #0]
            	LTTO_IR_RX_finalSignature.headerType = LTTO_IR_RX_wipSignature.headerType;
 8003374:	4b55      	ldr	r3, [pc, #340]	; (80034cc <LTTO_IR_RX_NewIRPulseReceived+0x2f8>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	b2da      	uxtb	r2, r3
 800337a:	4b57      	ldr	r3, [pc, #348]	; (80034d8 <LTTO_IR_RX_NewIRPulseReceived+0x304>)
 800337c:	701a      	strb	r2, [r3, #0]
            	LTTO_IR_RX_finalSignature.data = LTTO_IR_RX_wipSignature.data;
 800337e:	4b53      	ldr	r3, [pc, #332]	; (80034cc <LTTO_IR_RX_NewIRPulseReceived+0x2f8>)
 8003380:	885b      	ldrh	r3, [r3, #2]
 8003382:	b29a      	uxth	r2, r3
 8003384:	4b54      	ldr	r3, [pc, #336]	; (80034d8 <LTTO_IR_RX_NewIRPulseReceived+0x304>)
 8003386:	805a      	strh	r2, [r3, #2]
            	//LTTO_IR_RX_finalSignature.bitCount = LTTO_IR_RX_wipSignature.bitCount;
            	switch(temp) {
 8003388:	187b      	adds	r3, r7, r1
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b07      	cmp	r3, #7
 800338e:	d00f      	beq.n	80033b0 <LTTO_IR_RX_NewIRPulseReceived+0x1dc>
 8003390:	dc02      	bgt.n	8003398 <LTTO_IR_RX_NewIRPulseReceived+0x1c4>
 8003392:	2b05      	cmp	r3, #5
 8003394:	d008      	beq.n	80033a8 <LTTO_IR_RX_NewIRPulseReceived+0x1d4>
 8003396:	e003      	b.n	80033a0 <LTTO_IR_RX_NewIRPulseReceived+0x1cc>
 8003398:	2b08      	cmp	r3, #8
 800339a:	d00d      	beq.n	80033b8 <LTTO_IR_RX_NewIRPulseReceived+0x1e4>
 800339c:	2b09      	cmp	r3, #9
 800339e:	d00f      	beq.n	80033c0 <LTTO_IR_RX_NewIRPulseReceived+0x1ec>
					default:
						LTTO_IR_RX_finalSignature.bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_UNKNOWN;
 80033a0:	4b4d      	ldr	r3, [pc, #308]	; (80034d8 <LTTO_IR_RX_NewIRPulseReceived+0x304>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	705a      	strb	r2, [r3, #1]
						break;
 80033a6:	e00f      	b.n	80033c8 <LTTO_IR_RX_NewIRPulseReceived+0x1f4>
					case 5:
						LTTO_IR_RX_finalSignature.bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_5;
 80033a8:	4b4b      	ldr	r3, [pc, #300]	; (80034d8 <LTTO_IR_RX_NewIRPulseReceived+0x304>)
 80033aa:	2201      	movs	r2, #1
 80033ac:	705a      	strb	r2, [r3, #1]
						break;
 80033ae:	e00b      	b.n	80033c8 <LTTO_IR_RX_NewIRPulseReceived+0x1f4>
					case 7:
						LTTO_IR_RX_finalSignature.bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_7;
 80033b0:	4b49      	ldr	r3, [pc, #292]	; (80034d8 <LTTO_IR_RX_NewIRPulseReceived+0x304>)
 80033b2:	2202      	movs	r2, #2
 80033b4:	705a      	strb	r2, [r3, #1]
						break;
 80033b6:	e007      	b.n	80033c8 <LTTO_IR_RX_NewIRPulseReceived+0x1f4>
					case 8:
						LTTO_IR_RX_finalSignature.bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_8;
 80033b8:	4b47      	ldr	r3, [pc, #284]	; (80034d8 <LTTO_IR_RX_NewIRPulseReceived+0x304>)
 80033ba:	2203      	movs	r2, #3
 80033bc:	705a      	strb	r2, [r3, #1]
						break;
 80033be:	e003      	b.n	80033c8 <LTTO_IR_RX_NewIRPulseReceived+0x1f4>
					case 9:
						LTTO_IR_RX_finalSignature.bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_9;
 80033c0:	4b45      	ldr	r3, [pc, #276]	; (80034d8 <LTTO_IR_RX_NewIRPulseReceived+0x304>)
 80033c2:	2204      	movs	r2, #4
 80033c4:	705a      	strb	r2, [r3, #1]
						break;
 80033c6:	46c0      	nop			; (mov r8, r8)
            	}
            	LTTO_IR_RX_finalSignature.SFP = LTTO_IR_RX_wipSignature.SFP;
 80033c8:	4b40      	ldr	r3, [pc, #256]	; (80034cc <LTTO_IR_RX_NewIRPulseReceived+0x2f8>)
 80033ca:	791b      	ldrb	r3, [r3, #4]
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	4b42      	ldr	r3, [pc, #264]	; (80034d8 <LTTO_IR_RX_NewIRPulseReceived+0x304>)
 80033d0:	711a      	strb	r2, [r3, #4]
            	if(LTTO_IR_RX_finalSignature.bitCount != LTTO_IR_RAW_SIGNATURE_BIT_COUNT_UNKNOWN) {
 80033d2:	4b41      	ldr	r3, [pc, #260]	; (80034d8 <LTTO_IR_RX_NewIRPulseReceived+0x304>)
 80033d4:	785b      	ldrb	r3, [r3, #1]
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d006      	beq.n	80033ea <LTTO_IR_RX_NewIRPulseReceived+0x216>
					LTTO_IR_RX_finalSignature.valid = true;
 80033dc:	4b3e      	ldr	r3, [pc, #248]	; (80034d8 <LTTO_IR_RX_NewIRPulseReceived+0x304>)
 80033de:	2201      	movs	r2, #1
 80033e0:	715a      	strb	r2, [r3, #5]
					LTTO_IR_RX_finalPulseCount = LTTO_IR_RX_WIPpulseCount;
 80033e2:	4b34      	ldr	r3, [pc, #208]	; (80034b4 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	4b3d      	ldr	r3, [pc, #244]	; (80034dc <LTTO_IR_RX_NewIRPulseReceived+0x308>)
 80033e8:	601a      	str	r2, [r3, #0]
            	}
                //And reset the receiver counter.
                LTTO_IR_RX_WIPpulseCount = 0;
 80033ea:	4b32      	ldr	r3, [pc, #200]	; (80034b4 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
            } else if(!IRpresentThisPulse && (pulseLengthTicks > (2.5*LTTO_IR_RX_TICKS_PER_MS)) ) {
 80033f0:	e003      	b.n	80033fa <LTTO_IR_RX_NewIRPulseReceived+0x226>
            } else {
                //Not what we're looking for. Abort!
                LTTO_IR_RX_WIPpulseCount = 0;
 80033f2:	4b30      	ldr	r3, [pc, #192]	; (80034b4 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
            }
            break;
 80033f8:	e0d4      	b.n	80035a4 <LTTO_IR_RX_NewIRPulseReceived+0x3d0>
 80033fa:	e0d3      	b.n	80035a4 <LTTO_IR_RX_NewIRPulseReceived+0x3d0>
        case 14:
        case 16:
        case 18:
        case 20:
            //Looking for either a ~1ms "0" data bit, or a ~2ms "1" data bit.
            if(IRpresentThisPulse && (pulseLengthTicks > (0.5*LTTO_IR_RX_TICKS_PER_MS)) && (pulseLengthTicks < (1.5*LTTO_IR_RX_TICKS_PER_MS)) ) {
 80033fc:	1cfb      	adds	r3, r7, #3
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d026      	beq.n	8003452 <LTTO_IR_RX_NewIRPulseReceived+0x27e>
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7fd f851 	bl	80004ac <__aeabi_i2d>
 800340a:	2200      	movs	r2, #0
 800340c:	4b34      	ldr	r3, [pc, #208]	; (80034e0 <LTTO_IR_RX_NewIRPulseReceived+0x30c>)
 800340e:	f7fc ff31 	bl	8000274 <__aeabi_dcmpgt>
 8003412:	1e03      	subs	r3, r0, #0
 8003414:	d01d      	beq.n	8003452 <LTTO_IR_RX_NewIRPulseReceived+0x27e>
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fd f848 	bl	80004ac <__aeabi_i2d>
 800341c:	2200      	movs	r2, #0
 800341e:	4b2d      	ldr	r3, [pc, #180]	; (80034d4 <LTTO_IR_RX_NewIRPulseReceived+0x300>)
 8003420:	f7fc ff14 	bl	800024c <__aeabi_dcmplt>
 8003424:	1e03      	subs	r3, r0, #0
 8003426:	d014      	beq.n	8003452 <LTTO_IR_RX_NewIRPulseReceived+0x27e>
                //LTTO_IR_RX_WIPpulseMS[LTTO_IR_RX_WIPpulseCount] = 1;
            	LTTO_IR_RX_wipSignature.data <<= 1;
 8003428:	4b28      	ldr	r3, [pc, #160]	; (80034cc <LTTO_IR_RX_NewIRPulseReceived+0x2f8>)
 800342a:	885b      	ldrh	r3, [r3, #2]
 800342c:	b29b      	uxth	r3, r3
 800342e:	18db      	adds	r3, r3, r3
 8003430:	b29a      	uxth	r2, r3
 8003432:	4b26      	ldr	r3, [pc, #152]	; (80034cc <LTTO_IR_RX_NewIRPulseReceived+0x2f8>)
 8003434:	805a      	strh	r2, [r3, #2]
            	LTTO_IR_RX_wipSignature.data &= ~(0x0001);
 8003436:	4b25      	ldr	r3, [pc, #148]	; (80034cc <LTTO_IR_RX_NewIRPulseReceived+0x2f8>)
 8003438:	885b      	ldrh	r3, [r3, #2]
 800343a:	b29b      	uxth	r3, r3
 800343c:	2201      	movs	r2, #1
 800343e:	4393      	bics	r3, r2
 8003440:	b29a      	uxth	r2, r3
 8003442:	4b22      	ldr	r3, [pc, #136]	; (80034cc <LTTO_IR_RX_NewIRPulseReceived+0x2f8>)
 8003444:	805a      	strh	r2, [r3, #2]
                LTTO_IR_RX_WIPpulseCount++;
 8003446:	4b1b      	ldr	r3, [pc, #108]	; (80034b4 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	4b19      	ldr	r3, [pc, #100]	; (80034b4 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	e02e      	b.n	80034b0 <LTTO_IR_RX_NewIRPulseReceived+0x2dc>
            } else if(IRpresentThisPulse && (pulseLengthTicks > (1.5*LTTO_IR_RX_TICKS_PER_MS)) && (pulseLengthTicks < (2.5*LTTO_IR_RX_TICKS_PER_MS)) ) {
 8003452:	1cfb      	adds	r3, r7, #3
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d026      	beq.n	80034a8 <LTTO_IR_RX_NewIRPulseReceived+0x2d4>
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7fd f826 	bl	80004ac <__aeabi_i2d>
 8003460:	2200      	movs	r2, #0
 8003462:	4b1c      	ldr	r3, [pc, #112]	; (80034d4 <LTTO_IR_RX_NewIRPulseReceived+0x300>)
 8003464:	f7fc ff06 	bl	8000274 <__aeabi_dcmpgt>
 8003468:	1e03      	subs	r3, r0, #0
 800346a:	d01d      	beq.n	80034a8 <LTTO_IR_RX_NewIRPulseReceived+0x2d4>
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7fd f81d 	bl	80004ac <__aeabi_i2d>
 8003472:	2200      	movs	r2, #0
 8003474:	4b11      	ldr	r3, [pc, #68]	; (80034bc <LTTO_IR_RX_NewIRPulseReceived+0x2e8>)
 8003476:	f7fc fee9 	bl	800024c <__aeabi_dcmplt>
 800347a:	1e03      	subs	r3, r0, #0
 800347c:	d014      	beq.n	80034a8 <LTTO_IR_RX_NewIRPulseReceived+0x2d4>
            	LTTO_IR_RX_wipSignature.data <<= 1;
 800347e:	4b13      	ldr	r3, [pc, #76]	; (80034cc <LTTO_IR_RX_NewIRPulseReceived+0x2f8>)
 8003480:	885b      	ldrh	r3, [r3, #2]
 8003482:	b29b      	uxth	r3, r3
 8003484:	18db      	adds	r3, r3, r3
 8003486:	b29a      	uxth	r2, r3
 8003488:	4b10      	ldr	r3, [pc, #64]	; (80034cc <LTTO_IR_RX_NewIRPulseReceived+0x2f8>)
 800348a:	805a      	strh	r2, [r3, #2]
				LTTO_IR_RX_wipSignature.data |= 0x0001;
 800348c:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <LTTO_IR_RX_NewIRPulseReceived+0x2f8>)
 800348e:	885b      	ldrh	r3, [r3, #2]
 8003490:	b29b      	uxth	r3, r3
 8003492:	2201      	movs	r2, #1
 8003494:	4313      	orrs	r3, r2
 8003496:	b29a      	uxth	r2, r3
 8003498:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <LTTO_IR_RX_NewIRPulseReceived+0x2f8>)
 800349a:	805a      	strh	r2, [r3, #2]
                LTTO_IR_RX_WIPpulseCount++;
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	e003      	b.n	80034b0 <LTTO_IR_RX_NewIRPulseReceived+0x2dc>
            } else {
                //Not what we're looking for.
                //Abort!
                LTTO_IR_RX_WIPpulseCount = 0;
 80034a8:	4b02      	ldr	r3, [pc, #8]	; (80034b4 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]
            }
            break;
 80034ae:	e079      	b.n	80035a4 <LTTO_IR_RX_NewIRPulseReceived+0x3d0>
 80034b0:	e078      	b.n	80035a4 <LTTO_IR_RX_NewIRPulseReceived+0x3d0>
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	20000030 	.word	0x20000030
 80034b8:	08005ee0 	.word	0x08005ee0
 80034bc:	40290000 	.word	0x40290000
 80034c0:	40318000 	.word	0x40318000
 80034c4:	403b8000 	.word	0x403b8000
 80034c8:	4042c000 	.word	0x4042c000
 80034cc:	20001a30 	.word	0x20001a30
 80034d0:	40404000 	.word	0x40404000
 80034d4:	401e0000 	.word	0x401e0000
 80034d8:	20001a38 	.word	0x20001a38
 80034dc:	20000034 	.word	0x20000034
 80034e0:	40040000 	.word	0x40040000
        case 21:
            //Looking for a period of silence, at least 2.5ms.
            if(!IRpresentThisPulse && (pulseLengthTicks > (2.5*LTTO_IR_RX_TICKS_PER_MS)) ) {
 80034e4:	1cfb      	adds	r3, r7, #3
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2201      	movs	r2, #1
 80034ea:	4053      	eors	r3, r2
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d053      	beq.n	800359a <LTTO_IR_RX_NewIRPulseReceived+0x3c6>
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7fc ffda 	bl	80004ac <__aeabi_i2d>
 80034f8:	2200      	movs	r2, #0
 80034fa:	4b2c      	ldr	r3, [pc, #176]	; (80035ac <LTTO_IR_RX_NewIRPulseReceived+0x3d8>)
 80034fc:	f7fc feba 	bl	8000274 <__aeabi_dcmpgt>
 8003500:	1e03      	subs	r3, r0, #0
 8003502:	d04a      	beq.n	800359a <LTTO_IR_RX_NewIRPulseReceived+0x3c6>
                //We're done!
            	//Copy things to the "forground" buffer, so that the gameplay loop can s  ee we got something.
				/*for(int i = 0;i < LTTO_IR_RX_WIPpulseCount;i++) {
					LTTO_IR_RX_finalPulseMS[i] = LTTO_IR_RX_WIPpulseMS[i];
				}*/
				uint8_t temp = ((LTTO_IR_RX_WIPpulseCount - 3) / 2);
 8003504:	4b2a      	ldr	r3, [pc, #168]	; (80035b0 <LTTO_IR_RX_NewIRPulseReceived+0x3dc>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3b03      	subs	r3, #3
 800350a:	2b00      	cmp	r3, #0
 800350c:	da00      	bge.n	8003510 <LTTO_IR_RX_NewIRPulseReceived+0x33c>
 800350e:	3301      	adds	r3, #1
 8003510:	105b      	asrs	r3, r3, #1
 8003512:	001a      	movs	r2, r3
 8003514:	210f      	movs	r1, #15
 8003516:	187b      	adds	r3, r7, r1
 8003518:	701a      	strb	r2, [r3, #0]
				LTTO_IR_RX_finalSignature.headerType = LTTO_IR_RX_wipSignature.headerType;
 800351a:	4b26      	ldr	r3, [pc, #152]	; (80035b4 <LTTO_IR_RX_NewIRPulseReceived+0x3e0>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	b2da      	uxtb	r2, r3
 8003520:	4b25      	ldr	r3, [pc, #148]	; (80035b8 <LTTO_IR_RX_NewIRPulseReceived+0x3e4>)
 8003522:	701a      	strb	r2, [r3, #0]
				LTTO_IR_RX_finalSignature.data = LTTO_IR_RX_wipSignature.data;
 8003524:	4b23      	ldr	r3, [pc, #140]	; (80035b4 <LTTO_IR_RX_NewIRPulseReceived+0x3e0>)
 8003526:	885b      	ldrh	r3, [r3, #2]
 8003528:	b29a      	uxth	r2, r3
 800352a:	4b23      	ldr	r3, [pc, #140]	; (80035b8 <LTTO_IR_RX_NewIRPulseReceived+0x3e4>)
 800352c:	805a      	strh	r2, [r3, #2]
				//LTTO_IR_RX_finalSignature.bitCount = LTTO_IR_RX_wipSignature.bitCount;
				switch(temp) {
 800352e:	187b      	adds	r3, r7, r1
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b07      	cmp	r3, #7
 8003534:	d00f      	beq.n	8003556 <LTTO_IR_RX_NewIRPulseReceived+0x382>
 8003536:	dc02      	bgt.n	800353e <LTTO_IR_RX_NewIRPulseReceived+0x36a>
 8003538:	2b05      	cmp	r3, #5
 800353a:	d008      	beq.n	800354e <LTTO_IR_RX_NewIRPulseReceived+0x37a>
 800353c:	e003      	b.n	8003546 <LTTO_IR_RX_NewIRPulseReceived+0x372>
 800353e:	2b08      	cmp	r3, #8
 8003540:	d00d      	beq.n	800355e <LTTO_IR_RX_NewIRPulseReceived+0x38a>
 8003542:	2b09      	cmp	r3, #9
 8003544:	d00f      	beq.n	8003566 <LTTO_IR_RX_NewIRPulseReceived+0x392>
					default:
						LTTO_IR_RX_finalSignature.bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_UNKNOWN;
 8003546:	4b1c      	ldr	r3, [pc, #112]	; (80035b8 <LTTO_IR_RX_NewIRPulseReceived+0x3e4>)
 8003548:	2200      	movs	r2, #0
 800354a:	705a      	strb	r2, [r3, #1]
						break;
 800354c:	e00f      	b.n	800356e <LTTO_IR_RX_NewIRPulseReceived+0x39a>
					case 5:
						LTTO_IR_RX_finalSignature.bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_5;
 800354e:	4b1a      	ldr	r3, [pc, #104]	; (80035b8 <LTTO_IR_RX_NewIRPulseReceived+0x3e4>)
 8003550:	2201      	movs	r2, #1
 8003552:	705a      	strb	r2, [r3, #1]
						break;
 8003554:	e00b      	b.n	800356e <LTTO_IR_RX_NewIRPulseReceived+0x39a>
					case 7:
						LTTO_IR_RX_finalSignature.bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_7;
 8003556:	4b18      	ldr	r3, [pc, #96]	; (80035b8 <LTTO_IR_RX_NewIRPulseReceived+0x3e4>)
 8003558:	2202      	movs	r2, #2
 800355a:	705a      	strb	r2, [r3, #1]
						break;
 800355c:	e007      	b.n	800356e <LTTO_IR_RX_NewIRPulseReceived+0x39a>
					case 8:
						LTTO_IR_RX_finalSignature.bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_8;
 800355e:	4b16      	ldr	r3, [pc, #88]	; (80035b8 <LTTO_IR_RX_NewIRPulseReceived+0x3e4>)
 8003560:	2203      	movs	r2, #3
 8003562:	705a      	strb	r2, [r3, #1]
						break;
 8003564:	e003      	b.n	800356e <LTTO_IR_RX_NewIRPulseReceived+0x39a>
					case 9:
						LTTO_IR_RX_finalSignature.bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_9;
 8003566:	4b14      	ldr	r3, [pc, #80]	; (80035b8 <LTTO_IR_RX_NewIRPulseReceived+0x3e4>)
 8003568:	2204      	movs	r2, #4
 800356a:	705a      	strb	r2, [r3, #1]
						break;
 800356c:	46c0      	nop			; (mov r8, r8)
				}
				LTTO_IR_RX_finalSignature.SFP = LTTO_IR_RX_wipSignature.SFP;
 800356e:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <LTTO_IR_RX_NewIRPulseReceived+0x3e0>)
 8003570:	791b      	ldrb	r3, [r3, #4]
 8003572:	b2da      	uxtb	r2, r3
 8003574:	4b10      	ldr	r3, [pc, #64]	; (80035b8 <LTTO_IR_RX_NewIRPulseReceived+0x3e4>)
 8003576:	711a      	strb	r2, [r3, #4]
				if(LTTO_IR_RX_finalSignature.bitCount != LTTO_IR_RAW_SIGNATURE_BIT_COUNT_UNKNOWN) {
 8003578:	4b0f      	ldr	r3, [pc, #60]	; (80035b8 <LTTO_IR_RX_NewIRPulseReceived+0x3e4>)
 800357a:	785b      	ldrb	r3, [r3, #1]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d006      	beq.n	8003590 <LTTO_IR_RX_NewIRPulseReceived+0x3bc>
					LTTO_IR_RX_finalSignature.valid = true;
 8003582:	4b0d      	ldr	r3, [pc, #52]	; (80035b8 <LTTO_IR_RX_NewIRPulseReceived+0x3e4>)
 8003584:	2201      	movs	r2, #1
 8003586:	715a      	strb	r2, [r3, #5]
					LTTO_IR_RX_finalPulseCount = LTTO_IR_RX_WIPpulseCount;
 8003588:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <LTTO_IR_RX_NewIRPulseReceived+0x3dc>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <LTTO_IR_RX_NewIRPulseReceived+0x3e8>)
 800358e:	601a      	str	r2, [r3, #0]
				}
				//And reset the receiver counter.
				LTTO_IR_RX_WIPpulseCount = 0;
 8003590:	4b07      	ldr	r3, [pc, #28]	; (80035b0 <LTTO_IR_RX_NewIRPulseReceived+0x3dc>)
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
            if(!IRpresentThisPulse && (pulseLengthTicks > (2.5*LTTO_IR_RX_TICKS_PER_MS)) ) {
 8003596:	46c0      	nop			; (mov r8, r8)
            } else {
                //Something's wrong. Nothing in the LTTO protocol is this long.
                //Abort!
                LTTO_IR_RX_WIPpulseCount = 0;
            }
            break;
 8003598:	e004      	b.n	80035a4 <LTTO_IR_RX_NewIRPulseReceived+0x3d0>
                LTTO_IR_RX_WIPpulseCount = 0;
 800359a:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <LTTO_IR_RX_NewIRPulseReceived+0x3dc>)
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
            break;
 80035a0:	e000      	b.n	80035a4 <LTTO_IR_RX_NewIRPulseReceived+0x3d0>
            break;
 80035a2:	46c0      	nop			; (mov r8, r8)
    }
}
 80035a4:	46c0      	nop			; (mov r8, r8)
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b004      	add	sp, #16
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40290000 	.word	0x40290000
 80035b0:	20000030 	.word	0x20000030
 80035b4:	20001a30 	.word	0x20001a30
 80035b8:	20001a38 	.word	0x20001a38
 80035bc:	20000034 	.word	0x20000034

080035c0 <LTTO_IR_RX_AC_NewIRPulseReceived>:

//LTTO_IR_RAW_SIGNATURE_t LTTO_IR_RX_AC_tempRawSignature;
LTTO_IR_SIGNATURE_t LTTO_IR_RX_AC_tempSignature;
LTTO_IR_MULTIBYTE_t LTTO_IR_RX_AC_tempMultibyte;

void LTTO_IR_RX_AC_NewIRPulseReceived(int pulseLengthTicks, bool IRpresentThisPulse) {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	000a      	movs	r2, r1
 80035ca:	1cfb      	adds	r3, r7, #3
 80035cc:	701a      	strb	r2, [r3, #0]
    LTTO_IR_RX_NewIRPulseReceived(pulseLengthTicks, IRpresentThisPulse);
 80035ce:	1cfb      	adds	r3, r7, #3
 80035d0:	781a      	ldrb	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	0011      	movs	r1, r2
 80035d6:	0018      	movs	r0, r3
 80035d8:	f7ff fdfc 	bl	80031d4 <LTTO_IR_RX_NewIRPulseReceived>

    if(LTTO_IR_RX_finalPulseCount) {
 80035dc:	4b21      	ldr	r3, [pc, #132]	; (8003664 <LTTO_IR_RX_AC_NewIRPulseReceived+0xa4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d03a      	beq.n	800365a <LTTO_IR_RX_AC_NewIRPulseReceived+0x9a>
        //New LTTO pulse train received...
        //Convert it on up
        //LTTO_IR_CONV_PulsesToRawSignature(LTTO_IR_RX_finalPulseMS, LTTO_IR_RX_finalPulseCount, &LTTO_IR_RX_AC_tempRawSignature);
        LTTO_IR_CONV_RawSignatureToSignature(&LTTO_IR_RX_finalSignature, &LTTO_IR_RX_AC_tempSignature);
 80035e4:	4a20      	ldr	r2, [pc, #128]	; (8003668 <LTTO_IR_RX_AC_NewIRPulseReceived+0xa8>)
 80035e6:	4b21      	ldr	r3, [pc, #132]	; (800366c <LTTO_IR_RX_AC_NewIRPulseReceived+0xac>)
 80035e8:	0011      	movs	r1, r2
 80035ea:	0018      	movs	r0, r3
 80035ec:	f7ff fc3c 	bl	8002e68 <LTTO_IR_CONV_RawSignatureToSignature>
        LTTO_IR_RX_finalSignature.valid = false;
 80035f0:	4b1e      	ldr	r3, [pc, #120]	; (800366c <LTTO_IR_RX_AC_NewIRPulseReceived+0xac>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	715a      	strb	r2, [r3, #5]
        //Check if this is a multibyte...
        if(LTTO_IR_RX_AC_tempSignature.signatureType == LTTO_IR_SIGNATURE_TYPE_MULTIBYTE_PTYPE) {
 80035f6:	4b1c      	ldr	r3, [pc, #112]	; (8003668 <LTTO_IR_RX_AC_NewIRPulseReceived+0xa8>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d10a      	bne.n	8003614 <LTTO_IR_RX_AC_NewIRPulseReceived+0x54>
            //Multibyte PType
            //Clear the temp multibyte
            LTTO_IR_CONV_ClearMultibyte(&LTTO_IR_RX_AC_tempMultibyte);
 80035fe:	4b1c      	ldr	r3, [pc, #112]	; (8003670 <LTTO_IR_RX_AC_NewIRPulseReceived+0xb0>)
 8003600:	0018      	movs	r0, r3
 8003602:	f7ff fd4e 	bl	80030a2 <LTTO_IR_CONV_ClearMultibyte>
            //Add the new signature
            LTTO_IR_CONV_AddSignatureToMultibyte(&LTTO_IR_RX_AC_tempSignature, &LTTO_IR_RX_AC_tempMultibyte);
 8003606:	4a1a      	ldr	r2, [pc, #104]	; (8003670 <LTTO_IR_RX_AC_NewIRPulseReceived+0xb0>)
 8003608:	4b17      	ldr	r3, [pc, #92]	; (8003668 <LTTO_IR_RX_AC_NewIRPulseReceived+0xa8>)
 800360a:	0011      	movs	r1, r2
 800360c:	0018      	movs	r0, r3
 800360e:	f7ff fd59 	bl	80030c4 <LTTO_IR_CONV_AddSignatureToMultibyte>
 8003612:	e01f      	b.n	8003654 <LTTO_IR_RX_AC_NewIRPulseReceived+0x94>
        } else if(LTTO_IR_RX_AC_tempSignature.signatureType == LTTO_IR_SIGNATURE_TYPE_MULTIBYTE_DATA) {
 8003614:	4b14      	ldr	r3, [pc, #80]	; (8003668 <LTTO_IR_RX_AC_NewIRPulseReceived+0xa8>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b05      	cmp	r3, #5
 800361a:	d106      	bne.n	800362a <LTTO_IR_RX_AC_NewIRPulseReceived+0x6a>
            //Multibyte data
            //Add the new signature
            LTTO_IR_CONV_AddSignatureToMultibyte(&LTTO_IR_RX_AC_tempSignature, &LTTO_IR_RX_AC_tempMultibyte);
 800361c:	4a14      	ldr	r2, [pc, #80]	; (8003670 <LTTO_IR_RX_AC_NewIRPulseReceived+0xb0>)
 800361e:	4b12      	ldr	r3, [pc, #72]	; (8003668 <LTTO_IR_RX_AC_NewIRPulseReceived+0xa8>)
 8003620:	0011      	movs	r1, r2
 8003622:	0018      	movs	r0, r3
 8003624:	f7ff fd4e 	bl	80030c4 <LTTO_IR_CONV_AddSignatureToMultibyte>
 8003628:	e014      	b.n	8003654 <LTTO_IR_RX_AC_NewIRPulseReceived+0x94>
        } else if(LTTO_IR_RX_AC_tempSignature.signatureType == LTTO_IR_SIGNATURE_TYPE_MULTIBYTE_CSUM) {
 800362a:	4b0f      	ldr	r3, [pc, #60]	; (8003668 <LTTO_IR_RX_AC_NewIRPulseReceived+0xa8>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b06      	cmp	r3, #6
 8003630:	d110      	bne.n	8003654 <LTTO_IR_RX_AC_NewIRPulseReceived+0x94>
            //Multibyte Checksum
            //Add the new signature
            LTTO_IR_CONV_AddSignatureToMultibyte(&LTTO_IR_RX_AC_tempSignature, &LTTO_IR_RX_AC_tempMultibyte);
 8003632:	4a0f      	ldr	r2, [pc, #60]	; (8003670 <LTTO_IR_RX_AC_NewIRPulseReceived+0xb0>)
 8003634:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <LTTO_IR_RX_AC_NewIRPulseReceived+0xa8>)
 8003636:	0011      	movs	r1, r2
 8003638:	0018      	movs	r0, r3
 800363a:	f7ff fd43 	bl	80030c4 <LTTO_IR_CONV_AddSignatureToMultibyte>
            if(!LTTO_IR_RX_AC_tempMultibyte.valid) {
 800363e:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <LTTO_IR_RX_AC_NewIRPulseReceived+0xb0>)
 8003640:	7e1b      	ldrb	r3, [r3, #24]
 8003642:	2201      	movs	r2, #1
 8003644:	4053      	eors	r3, r2
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <LTTO_IR_RX_AC_NewIRPulseReceived+0x94>
                //Checksum invalid, toss the packet.
                LTTO_IR_CONV_ClearMultibyte(&LTTO_IR_RX_AC_tempMultibyte);
 800364c:	4b08      	ldr	r3, [pc, #32]	; (8003670 <LTTO_IR_RX_AC_NewIRPulseReceived+0xb0>)
 800364e:	0018      	movs	r0, r3
 8003650:	f7ff fd27 	bl	80030a2 <LTTO_IR_CONV_ClearMultibyte>
            }
        }
        //And clear the pulse train, so we don't process this signature again.
        LTTO_IR_RX_finalPulseCount = 0;
 8003654:	4b03      	ldr	r3, [pc, #12]	; (8003664 <LTTO_IR_RX_AC_NewIRPulseReceived+0xa4>)
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
    }
}
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	46bd      	mov	sp, r7
 800365e:	b002      	add	sp, #8
 8003660:	bd80      	pop	{r7, pc}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	20000034 	.word	0x20000034
 8003668:	20001a5c 	.word	0x20001a5c
 800366c:	20001a38 	.word	0x20001a38
 8003670:	20001a40 	.word	0x20001a40

08003674 <LTTO_IR_RX_AC_NewSingleSignatureReady>:
    destinationRawSignature->data = LTTO_IR_RX_finalSignature.data;
    destinationRawSignature->SFP = LTTO_IR_RX_finalSignature.SFP;
    destinationRawSignature->valid = LTTO_IR_RX_finalSignature.valid;
}

bool LTTO_IR_RX_AC_NewSingleSignatureReady(void) {
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
    return (LTTO_IR_RX_AC_tempSignature.signatureType != LTTO_IR_SIGNATURE_TYPE_UNKNOWN);
 8003678:	4b03      	ldr	r3, [pc, #12]	; (8003688 <LTTO_IR_RX_AC_NewSingleSignatureReady+0x14>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	1e5a      	subs	r2, r3, #1
 800367e:	4193      	sbcs	r3, r2
 8003680:	b2db      	uxtb	r3, r3
}
 8003682:	0018      	movs	r0, r3
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	20001a5c 	.word	0x20001a5c

0800368c <LTTO_IR_RX_AC_GetSingleSignature>:

void LTTO_IR_RX_AC_GetSingleSignature(LTTO_IR_SIGNATURE_t *destinationSignature) {
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
    destinationSignature->data = LTTO_IR_RX_AC_tempSignature.data;
 8003694:	4b05      	ldr	r3, [pc, #20]	; (80036ac <LTTO_IR_RX_AC_GetSingleSignature+0x20>)
 8003696:	885a      	ldrh	r2, [r3, #2]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	805a      	strh	r2, [r3, #2]
    destinationSignature->signatureType = LTTO_IR_RX_AC_tempSignature.signatureType;
 800369c:	4b03      	ldr	r3, [pc, #12]	; (80036ac <LTTO_IR_RX_AC_GetSingleSignature+0x20>)
 800369e:	781a      	ldrb	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	701a      	strb	r2, [r3, #0]
}
 80036a4:	46c0      	nop			; (mov r8, r8)
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b002      	add	sp, #8
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20001a5c 	.word	0x20001a5c

080036b0 <LTTO_IR_RX_AC_Clear>:
    for(temp = 0;temp < LTTO_IR_RX_AC_tempMultibyte.dataByteCount;temp++) {
        destinationMultibyte->dataBytes[temp] = LTTO_IR_RX_AC_tempMultibyte.dataBytes[temp];
    }
}

void LTTO_IR_RX_AC_Clear(void) {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
    //Clear everything
	LTTO_IR_RX_finalSignature.valid = false;
 80036b4:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <LTTO_IR_RX_AC_Clear+0x20>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	715a      	strb	r2, [r3, #5]
    LTTO_IR_RX_AC_tempSignature.signatureType = LTTO_IR_SIGNATURE_TYPE_UNKNOWN;
 80036ba:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <LTTO_IR_RX_AC_Clear+0x24>)
 80036bc:	2200      	movs	r2, #0
 80036be:	701a      	strb	r2, [r3, #0]
    LTTO_IR_CONV_ClearMultibyte(&LTTO_IR_RX_AC_tempMultibyte);
 80036c0:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <LTTO_IR_RX_AC_Clear+0x28>)
 80036c2:	0018      	movs	r0, r3
 80036c4:	f7ff fced 	bl	80030a2 <LTTO_IR_CONV_ClearMultibyte>
}
 80036c8:	46c0      	nop			; (mov r8, r8)
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	20001a38 	.word	0x20001a38
 80036d4:	20001a5c 	.word	0x20001a5c
 80036d8:	20001a40 	.word	0x20001a40

080036dc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036e2:	f3ef 8305 	mrs	r3, IPSR
 80036e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80036e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ee:	f3ef 8310 	mrs	r3, PRIMASK
 80036f2:	607b      	str	r3, [r7, #4]
  return(result);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d007      	beq.n	800370a <osKernelInitialize+0x2e>
 80036fa:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <osKernelInitialize+0x54>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d103      	bne.n	800370a <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8003702:	2306      	movs	r3, #6
 8003704:	425b      	negs	r3, r3
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	e00c      	b.n	8003724 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <osKernelInitialize+0x54>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d105      	bne.n	800371e <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003712:	4b07      	ldr	r3, [pc, #28]	; (8003730 <osKernelInitialize+0x54>)
 8003714:	2201      	movs	r2, #1
 8003716:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	e002      	b.n	8003724 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 800371e:	2301      	movs	r3, #1
 8003720:	425b      	negs	r3, r3
 8003722:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003724:	68fb      	ldr	r3, [r7, #12]
}
 8003726:	0018      	movs	r0, r3
 8003728:	46bd      	mov	sp, r7
 800372a:	b004      	add	sp, #16
 800372c:	bd80      	pop	{r7, pc}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	20000038 	.word	0x20000038

08003734 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800373a:	f3ef 8305 	mrs	r3, IPSR
 800373e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003740:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003746:	f3ef 8310 	mrs	r3, PRIMASK
 800374a:	607b      	str	r3, [r7, #4]
  return(result);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d007      	beq.n	8003762 <osKernelStart+0x2e>
 8003752:	4b0e      	ldr	r3, [pc, #56]	; (800378c <osKernelStart+0x58>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d103      	bne.n	8003762 <osKernelStart+0x2e>
    stat = osErrorISR;
 800375a:	2306      	movs	r3, #6
 800375c:	425b      	negs	r3, r3
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	e00e      	b.n	8003780 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003762:	4b0a      	ldr	r3, [pc, #40]	; (800378c <osKernelStart+0x58>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d107      	bne.n	800377a <osKernelStart+0x46>
      KernelState = osKernelRunning;
 800376a:	4b08      	ldr	r3, [pc, #32]	; (800378c <osKernelStart+0x58>)
 800376c:	2202      	movs	r2, #2
 800376e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003770:	f001 f83c 	bl	80047ec <vTaskStartScheduler>
      stat = osOK;
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	e002      	b.n	8003780 <osKernelStart+0x4c>
    } else {
      stat = osError;
 800377a:	2301      	movs	r3, #1
 800377c:	425b      	negs	r3, r3
 800377e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003780:	68fb      	ldr	r3, [r7, #12]
}
 8003782:	0018      	movs	r0, r3
 8003784:	46bd      	mov	sp, r7
 8003786:	b004      	add	sp, #16
 8003788:	bd80      	pop	{r7, pc}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	20000038 	.word	0x20000038

08003790 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003790:	b5b0      	push	{r4, r5, r7, lr}
 8003792:	b090      	sub	sp, #64	; 0x40
 8003794:	af04      	add	r7, sp, #16
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800379c:	2300      	movs	r3, #0
 800379e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037a0:	f3ef 8305 	mrs	r3, IPSR
 80037a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80037a6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d000      	beq.n	80037ae <osThreadNew+0x1e>
 80037ac:	e090      	b.n	80038d0 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ae:	f3ef 8310 	mrs	r3, PRIMASK
 80037b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d004      	beq.n	80037c4 <osThreadNew+0x34>
 80037ba:	4b48      	ldr	r3, [pc, #288]	; (80038dc <osThreadNew+0x14c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d100      	bne.n	80037c4 <osThreadNew+0x34>
 80037c2:	e085      	b.n	80038d0 <osThreadNew+0x140>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d100      	bne.n	80037cc <osThreadNew+0x3c>
 80037ca:	e081      	b.n	80038d0 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 80037cc:	2380      	movs	r3, #128	; 0x80
 80037ce:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80037d0:	2318      	movs	r3, #24
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 80037d4:	2117      	movs	r1, #23
 80037d6:	187b      	adds	r3, r7, r1
 80037d8:	2200      	movs	r2, #0
 80037da:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 80037dc:	187b      	adds	r3, r7, r1
 80037de:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 80037e0:	2301      	movs	r3, #1
 80037e2:	425b      	negs	r3, r3
 80037e4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d044      	beq.n	8003876 <osThreadNew+0xe6>
      if (attr->name != NULL) {
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <osThreadNew+0x6a>
        name = attr->name;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d002      	beq.n	8003808 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	2b00      	cmp	r3, #0
 800380c:	d007      	beq.n	800381e <osThreadNew+0x8e>
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	2b38      	cmp	r3, #56	; 0x38
 8003812:	d804      	bhi.n	800381e <osThreadNew+0x8e>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	4013      	ands	r3, r2
 800381c:	d001      	beq.n	8003822 <osThreadNew+0x92>
        return (NULL);
 800381e:	2300      	movs	r3, #0
 8003820:	e057      	b.n	80038d2 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	089b      	lsrs	r3, r3, #2
 8003830:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00e      	beq.n	8003858 <osThreadNew+0xc8>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	2b5b      	cmp	r3, #91	; 0x5b
 8003840:	d90a      	bls.n	8003858 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003846:	2b00      	cmp	r3, #0
 8003848:	d006      	beq.n	8003858 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <osThreadNew+0xc8>
        mem = 1;
 8003852:	2301      	movs	r3, #1
 8003854:	623b      	str	r3, [r7, #32]
 8003856:	e010      	b.n	800387a <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10c      	bne.n	800387a <osThreadNew+0xea>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d108      	bne.n	800387a <osThreadNew+0xea>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d104      	bne.n	800387a <osThreadNew+0xea>
          mem = 0;
 8003870:	2300      	movs	r3, #0
 8003872:	623b      	str	r3, [r7, #32]
 8003874:	e001      	b.n	800387a <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8003876:	2300      	movs	r3, #0
 8003878:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d112      	bne.n	80038a6 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003888:	68bd      	ldr	r5, [r7, #8]
 800388a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800388c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	9302      	str	r3, [sp, #8]
 8003892:	9201      	str	r2, [sp, #4]
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	002b      	movs	r3, r5
 800389a:	0022      	movs	r2, r4
 800389c:	f000 fe07 	bl	80044ae <xTaskCreateStatic>
 80038a0:	0003      	movs	r3, r0
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	e014      	b.n	80038d0 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d111      	bne.n	80038d0 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80038ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68bc      	ldr	r4, [r7, #8]
 80038b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	2310      	movs	r3, #16
 80038b8:	18fb      	adds	r3, r7, r3
 80038ba:	9301      	str	r3, [sp, #4]
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	0023      	movs	r3, r4
 80038c2:	f000 fe37 	bl	8004534 <xTaskCreate>
 80038c6:	0003      	movs	r3, r0
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d001      	beq.n	80038d0 <osThreadNew+0x140>
          hTask = NULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80038d0:	693b      	ldr	r3, [r7, #16]
}
 80038d2:	0018      	movs	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b00c      	add	sp, #48	; 0x30
 80038d8:	bdb0      	pop	{r4, r5, r7, pc}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	20000038 	.word	0x20000038

080038e0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038e8:	f3ef 8305 	mrs	r3, IPSR
 80038ec:	613b      	str	r3, [r7, #16]
  return(result);
 80038ee:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d109      	bne.n	8003908 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038f4:	f3ef 8310 	mrs	r3, PRIMASK
 80038f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d007      	beq.n	8003910 <osDelay+0x30>
 8003900:	4b0a      	ldr	r3, [pc, #40]	; (800392c <osDelay+0x4c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b02      	cmp	r3, #2
 8003906:	d103      	bne.n	8003910 <osDelay+0x30>
    stat = osErrorISR;
 8003908:	2306      	movs	r3, #6
 800390a:	425b      	negs	r3, r3
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e008      	b.n	8003922 <osDelay+0x42>
  }
  else {
    stat = osOK;
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <osDelay+0x42>
      vTaskDelay(ticks);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	0018      	movs	r0, r3
 800391e:	f000 ff3f 	bl	80047a0 <vTaskDelay>
    }
  }

  return (stat);
 8003922:	697b      	ldr	r3, [r7, #20]
}
 8003924:	0018      	movs	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	b006      	add	sp, #24
 800392a:	bd80      	pop	{r7, pc}
 800392c:	20000038 	.word	0x20000038

08003930 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003930:	b590      	push	{r4, r7, lr}
 8003932:	b08d      	sub	sp, #52	; 0x34
 8003934:	af02      	add	r7, sp, #8
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800393c:	2300      	movs	r3, #0
 800393e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003940:	f3ef 8305 	mrs	r3, IPSR
 8003944:	61bb      	str	r3, [r7, #24]
  return(result);
 8003946:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003948:	2b00      	cmp	r3, #0
 800394a:	d000      	beq.n	800394e <osMessageQueueNew+0x1e>
 800394c:	e070      	b.n	8003a30 <osMessageQueueNew+0x100>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800394e:	f3ef 8310 	mrs	r3, PRIMASK
 8003952:	617b      	str	r3, [r7, #20]
  return(result);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d004      	beq.n	8003964 <osMessageQueueNew+0x34>
 800395a:	4b38      	ldr	r3, [pc, #224]	; (8003a3c <osMessageQueueNew+0x10c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b02      	cmp	r3, #2
 8003960:	d100      	bne.n	8003964 <osMessageQueueNew+0x34>
 8003962:	e065      	b.n	8003a30 <osMessageQueueNew+0x100>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d100      	bne.n	800396c <osMessageQueueNew+0x3c>
 800396a:	e061      	b.n	8003a30 <osMessageQueueNew+0x100>
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d05e      	beq.n	8003a30 <osMessageQueueNew+0x100>
    mem = -1;
 8003972:	2301      	movs	r3, #1
 8003974:	425b      	negs	r3, r3
 8003976:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d028      	beq.n	80039d0 <osMessageQueueNew+0xa0>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d011      	beq.n	80039aa <osMessageQueueNew+0x7a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	2b4f      	cmp	r3, #79	; 0x4f
 800398c:	d90d      	bls.n	80039aa <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695a      	ldr	r2, [r3, #20]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	434b      	muls	r3, r1
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d302      	bcc.n	80039aa <osMessageQueueNew+0x7a>
        mem = 1;
 80039a4:	2301      	movs	r3, #1
 80039a6:	623b      	str	r3, [r7, #32]
 80039a8:	e014      	b.n	80039d4 <osMessageQueueNew+0xa4>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d110      	bne.n	80039d4 <osMessageQueueNew+0xa4>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10c      	bne.n	80039d4 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d108      	bne.n	80039d4 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d104      	bne.n	80039d4 <osMessageQueueNew+0xa4>
          mem = 0;
 80039ca:	2300      	movs	r3, #0
 80039cc:	623b      	str	r3, [r7, #32]
 80039ce:	e001      	b.n	80039d4 <osMessageQueueNew+0xa4>
        }
      }
    }
    else {
      mem = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d10d      	bne.n	80039f6 <osMessageQueueNew+0xc6>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689c      	ldr	r4, [r3, #8]
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	2300      	movs	r3, #0
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	0023      	movs	r3, r4
 80039ec:	f000 f955 	bl	8003c9a <xQueueGenericCreateStatic>
 80039f0:	0003      	movs	r3, r0
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
 80039f4:	e00a      	b.n	8003a0c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d107      	bne.n	8003a0c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80039fc:	68b9      	ldr	r1, [r7, #8]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	0018      	movs	r0, r3
 8003a04:	f000 f994 	bl	8003d30 <xQueueGenericCreate>
 8003a08:	0003      	movs	r3, r0
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00e      	beq.n	8003a30 <osMessageQueueNew+0x100>
      if (attr != NULL) {
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <osMessageQueueNew+0xf0>
        name = attr->name;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	e001      	b.n	8003a24 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003a24:	69fa      	ldr	r2, [r7, #28]
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	0011      	movs	r1, r2
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f000 fce4 	bl	80043f8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a32:	0018      	movs	r0, r3
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b00b      	add	sp, #44	; 0x2c
 8003a38:	bd90      	pop	{r4, r7, pc}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	20000038 	.word	0x20000038

08003a40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4a06      	ldr	r2, [pc, #24]	; (8003a68 <vApplicationGetIdleTaskMemory+0x28>)
 8003a50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	4a05      	ldr	r2, [pc, #20]	; (8003a6c <vApplicationGetIdleTaskMemory+0x2c>)
 8003a56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2280      	movs	r2, #128	; 0x80
 8003a5c:	601a      	str	r2, [r3, #0]
}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	46bd      	mov	sp, r7
 8003a62:	b004      	add	sp, #16
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	2000003c 	.word	0x2000003c
 8003a6c:	20000098 	.word	0x20000098

08003a70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4a06      	ldr	r2, [pc, #24]	; (8003a98 <vApplicationGetTimerTaskMemory+0x28>)
 8003a80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	4a05      	ldr	r2, [pc, #20]	; (8003a9c <vApplicationGetTimerTaskMemory+0x2c>)
 8003a86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2280      	movs	r2, #128	; 0x80
 8003a8c:	0052      	lsls	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]
}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b004      	add	sp, #16
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	20000298 	.word	0x20000298
 8003a9c:	200002f4 	.word	0x200002f4

08003aa0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3308      	adds	r3, #8
 8003aac:	001a      	movs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	4252      	negs	r2, r2
 8003ab8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3308      	adds	r3, #8
 8003abe:	001a      	movs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3308      	adds	r3, #8
 8003ac8:	001a      	movs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ad4:	46c0      	nop			; (mov r8, r8)
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b002      	add	sp, #8
 8003ada:	bd80      	pop	{r7, pc}

08003adc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	46bd      	mov	sp, r7
 8003aee:	b002      	add	sp, #8
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b084      	sub	sp, #16
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	601a      	str	r2, [r3, #0]
}
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	46bd      	mov	sp, r7
 8003b32:	b004      	add	sp, #16
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b084      	sub	sp, #16
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	d103      	bne.n	8003b54 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	e00c      	b.n	8003b6e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3308      	adds	r3, #8
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	e002      	b.n	8003b62 <vListInsert+0x2c>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d2f6      	bcs.n	8003b5c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	601a      	str	r2, [r3, #0]
}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	b004      	add	sp, #16
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b084      	sub	sp, #16
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6892      	ldr	r2, [r2, #8]
 8003bb8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6852      	ldr	r2, [r2, #4]
 8003bc2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d103      	bne.n	8003bd6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	1e5a      	subs	r2, r3, #1
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
}
 8003bea:	0018      	movs	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	b004      	add	sp, #16
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <xQueueGenericReset+0x18>
 8003c06:	b672      	cpsid	i
 8003c08:	e7fe      	b.n	8003c08 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8003c0a:	f001 fe09 	bl	8005820 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	434b      	muls	r3, r1
 8003c1c:	18d2      	adds	r2, r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c38:	1e59      	subs	r1, r3, #1
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	434b      	muls	r3, r1
 8003c40:	18d2      	adds	r2, r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2244      	movs	r2, #68	; 0x44
 8003c4a:	21ff      	movs	r1, #255	; 0xff
 8003c4c:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2245      	movs	r2, #69	; 0x45
 8003c52:	21ff      	movs	r1, #255	; 0xff
 8003c54:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10d      	bne.n	8003c78 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d013      	beq.n	8003c8c <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3310      	adds	r3, #16
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f001 f803 	bl	8004c74 <xTaskRemoveFromEventList>
 8003c6e:	1e03      	subs	r3, r0, #0
 8003c70:	d00c      	beq.n	8003c8c <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c72:	f001 fdc5 	bl	8005800 <vPortYield>
 8003c76:	e009      	b.n	8003c8c <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	3310      	adds	r3, #16
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f7ff ff0f 	bl	8003aa0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3324      	adds	r3, #36	; 0x24
 8003c86:	0018      	movs	r0, r3
 8003c88:	f7ff ff0a 	bl	8003aa0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c8c:	f001 fdda 	bl	8005844 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c90:	2301      	movs	r3, #1
}
 8003c92:	0018      	movs	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b004      	add	sp, #16
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c9a:	b590      	push	{r4, r7, lr}
 8003c9c:	b089      	sub	sp, #36	; 0x24
 8003c9e:	af02      	add	r7, sp, #8
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	607a      	str	r2, [r7, #4]
 8003ca6:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <xQueueGenericCreateStatic+0x18>
 8003cae:	b672      	cpsid	i
 8003cb0:	e7fe      	b.n	8003cb0 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <xQueueGenericCreateStatic+0x22>
 8003cb8:	b672      	cpsid	i
 8003cba:	e7fe      	b.n	8003cba <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <xQueueGenericCreateStatic+0x2e>
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <xQueueGenericCreateStatic+0x32>
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e000      	b.n	8003cce <xQueueGenericCreateStatic+0x34>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <xQueueGenericCreateStatic+0x3c>
 8003cd2:	b672      	cpsid	i
 8003cd4:	e7fe      	b.n	8003cd4 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d102      	bne.n	8003ce2 <xQueueGenericCreateStatic+0x48>
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <xQueueGenericCreateStatic+0x4c>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <xQueueGenericCreateStatic+0x4e>
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <xQueueGenericCreateStatic+0x56>
 8003cec:	b672      	cpsid	i
 8003cee:	e7fe      	b.n	8003cee <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003cf0:	2350      	movs	r3, #80	; 0x50
 8003cf2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	2b50      	cmp	r3, #80	; 0x50
 8003cf8:	d001      	beq.n	8003cfe <xQueueGenericCreateStatic+0x64>
 8003cfa:	b672      	cpsid	i
 8003cfc:	e7fe      	b.n	8003cfc <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00e      	beq.n	8003d26 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	2246      	movs	r2, #70	; 0x46
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d10:	2328      	movs	r3, #40	; 0x28
 8003d12:	18fb      	adds	r3, r7, r3
 8003d14:	781c      	ldrb	r4, [r3, #0]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	0023      	movs	r3, r4
 8003d22:	f000 f83b 	bl	8003d9c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003d26:	697b      	ldr	r3, [r7, #20]
	}
 8003d28:	0018      	movs	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b007      	add	sp, #28
 8003d2e:	bd90      	pop	{r4, r7, pc}

08003d30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003d30:	b590      	push	{r4, r7, lr}
 8003d32:	b08b      	sub	sp, #44	; 0x2c
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	1dfb      	adds	r3, r7, #7
 8003d3c:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <xQueueGenericCreate+0x18>
 8003d44:	b672      	cpsid	i
 8003d46:	e7fe      	b.n	8003d46 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d102      	bne.n	8003d54 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61fb      	str	r3, [r7, #28]
 8003d52:	e003      	b.n	8003d5c <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	4353      	muls	r3, r2
 8003d5a:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	3350      	adds	r3, #80	; 0x50
 8003d60:	0018      	movs	r0, r3
 8003d62:	f001 fdf5 	bl	8005950 <pvPortMalloc>
 8003d66:	0003      	movs	r3, r0
 8003d68:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d010      	beq.n	8003d92 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	3350      	adds	r3, #80	; 0x50
 8003d74:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	2246      	movs	r2, #70	; 0x46
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d7e:	1dfb      	adds	r3, r7, #7
 8003d80:	781c      	ldrb	r4, [r3, #0]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	68b9      	ldr	r1, [r7, #8]
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	0023      	movs	r3, r4
 8003d8e:	f000 f805 	bl	8003d9c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003d92:	69bb      	ldr	r3, [r7, #24]
	}
 8003d94:	0018      	movs	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b009      	add	sp, #36	; 0x24
 8003d9a:	bd90      	pop	{r4, r7, pc}

08003d9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
 8003da8:	001a      	movs	r2, r3
 8003daa:	1cfb      	adds	r3, r7, #3
 8003dac:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d103      	bne.n	8003dbc <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	e002      	b.n	8003dc2 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f7ff ff0d 	bl	8003bf2 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	1cfa      	adds	r2, r7, #3
 8003ddc:	214c      	movs	r1, #76	; 0x4c
 8003dde:	7812      	ldrb	r2, [r2, #0]
 8003de0:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	46bd      	mov	sp, r7
 8003de6:	b004      	add	sp, #16
 8003de8:	bd80      	pop	{r7, pc}

08003dea <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b08a      	sub	sp, #40	; 0x28
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	607a      	str	r2, [r7, #4]
 8003df6:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <xQueueGenericSend+0x20>
 8003e06:	b672      	cpsid	i
 8003e08:	e7fe      	b.n	8003e08 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d103      	bne.n	8003e18 <xQueueGenericSend+0x2e>
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <xQueueGenericSend+0x32>
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e000      	b.n	8003e1e <xQueueGenericSend+0x34>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <xQueueGenericSend+0x3c>
 8003e22:	b672      	cpsid	i
 8003e24:	e7fe      	b.n	8003e24 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d103      	bne.n	8003e34 <xQueueGenericSend+0x4a>
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d101      	bne.n	8003e38 <xQueueGenericSend+0x4e>
 8003e34:	2301      	movs	r3, #1
 8003e36:	e000      	b.n	8003e3a <xQueueGenericSend+0x50>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <xQueueGenericSend+0x58>
 8003e3e:	b672      	cpsid	i
 8003e40:	e7fe      	b.n	8003e40 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e42:	f001 f8af 	bl	8004fa4 <xTaskGetSchedulerState>
 8003e46:	1e03      	subs	r3, r0, #0
 8003e48:	d102      	bne.n	8003e50 <xQueueGenericSend+0x66>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <xQueueGenericSend+0x6a>
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <xQueueGenericSend+0x6c>
 8003e54:	2300      	movs	r3, #0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <xQueueGenericSend+0x74>
 8003e5a:	b672      	cpsid	i
 8003e5c:	e7fe      	b.n	8003e5c <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e5e:	f001 fcdf 	bl	8005820 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d302      	bcc.n	8003e74 <xQueueGenericSend+0x8a>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d11e      	bne.n	8003eb2 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	68b9      	ldr	r1, [r7, #8]
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f000 f99f 	bl	80041be <prvCopyDataToQueue>
 8003e80:	0003      	movs	r3, r0
 8003e82:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d009      	beq.n	8003ea0 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	3324      	adds	r3, #36	; 0x24
 8003e90:	0018      	movs	r0, r3
 8003e92:	f000 feef 	bl	8004c74 <xTaskRemoveFromEventList>
 8003e96:	1e03      	subs	r3, r0, #0
 8003e98:	d007      	beq.n	8003eaa <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e9a:	f001 fcb1 	bl	8005800 <vPortYield>
 8003e9e:	e004      	b.n	8003eaa <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ea6:	f001 fcab 	bl	8005800 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003eaa:	f001 fccb 	bl	8005844 <vPortExitCritical>
				return pdPASS;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e05b      	b.n	8003f6a <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d103      	bne.n	8003ec0 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003eb8:	f001 fcc4 	bl	8005844 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e054      	b.n	8003f6a <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d106      	bne.n	8003ed4 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ec6:	2314      	movs	r3, #20
 8003ec8:	18fb      	adds	r3, r7, r3
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f000 ff2e 	bl	8004d2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ed4:	f001 fcb6 	bl	8005844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ed8:	f000 fcdc 	bl	8004894 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003edc:	f001 fca0 	bl	8005820 <vPortEnterCritical>
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	2244      	movs	r2, #68	; 0x44
 8003ee4:	5c9b      	ldrb	r3, [r3, r2]
 8003ee6:	b25b      	sxtb	r3, r3
 8003ee8:	3301      	adds	r3, #1
 8003eea:	d103      	bne.n	8003ef4 <xQueueGenericSend+0x10a>
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	2244      	movs	r2, #68	; 0x44
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	5499      	strb	r1, [r3, r2]
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	2245      	movs	r2, #69	; 0x45
 8003ef8:	5c9b      	ldrb	r3, [r3, r2]
 8003efa:	b25b      	sxtb	r3, r3
 8003efc:	3301      	adds	r3, #1
 8003efe:	d103      	bne.n	8003f08 <xQueueGenericSend+0x11e>
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	2245      	movs	r2, #69	; 0x45
 8003f04:	2100      	movs	r1, #0
 8003f06:	5499      	strb	r1, [r3, r2]
 8003f08:	f001 fc9c 	bl	8005844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f0c:	1d3a      	adds	r2, r7, #4
 8003f0e:	2314      	movs	r3, #20
 8003f10:	18fb      	adds	r3, r7, r3
 8003f12:	0011      	movs	r1, r2
 8003f14:	0018      	movs	r0, r3
 8003f16:	f000 ff1d 	bl	8004d54 <xTaskCheckForTimeOut>
 8003f1a:	1e03      	subs	r3, r0, #0
 8003f1c:	d11e      	bne.n	8003f5c <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	0018      	movs	r0, r3
 8003f22:	f000 fa51 	bl	80043c8 <prvIsQueueFull>
 8003f26:	1e03      	subs	r3, r0, #0
 8003f28:	d011      	beq.n	8003f4e <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	3310      	adds	r3, #16
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	0011      	movs	r1, r2
 8003f32:	0018      	movs	r0, r3
 8003f34:	f000 fe5a 	bl	8004bec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	f000 f9d0 	bl	80042e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f40:	f000 fcb4 	bl	80048ac <xTaskResumeAll>
 8003f44:	1e03      	subs	r3, r0, #0
 8003f46:	d18a      	bne.n	8003e5e <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8003f48:	f001 fc5a 	bl	8005800 <vPortYield>
 8003f4c:	e787      	b.n	8003e5e <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	0018      	movs	r0, r3
 8003f52:	f000 f9c5 	bl	80042e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f56:	f000 fca9 	bl	80048ac <xTaskResumeAll>
 8003f5a:	e780      	b.n	8003e5e <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f000 f9be 	bl	80042e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f64:	f000 fca2 	bl	80048ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f68:	2300      	movs	r3, #0
		}
	}
}
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	b00a      	add	sp, #40	; 0x28
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f72:	b590      	push	{r4, r7, lr}
 8003f74:	b089      	sub	sp, #36	; 0x24
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	60f8      	str	r0, [r7, #12]
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	607a      	str	r2, [r7, #4]
 8003f7e:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <xQueueGenericSendFromISR+0x1c>
 8003f8a:	b672      	cpsid	i
 8003f8c:	e7fe      	b.n	8003f8c <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d103      	bne.n	8003f9c <xQueueGenericSendFromISR+0x2a>
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <xQueueGenericSendFromISR+0x2e>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e000      	b.n	8003fa2 <xQueueGenericSendFromISR+0x30>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <xQueueGenericSendFromISR+0x38>
 8003fa6:	b672      	cpsid	i
 8003fa8:	e7fe      	b.n	8003fa8 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d103      	bne.n	8003fb8 <xQueueGenericSendFromISR+0x46>
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <xQueueGenericSendFromISR+0x4a>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <xQueueGenericSendFromISR+0x4c>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <xQueueGenericSendFromISR+0x54>
 8003fc2:	b672      	cpsid	i
 8003fc4:	e7fe      	b.n	8003fc4 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fc6:	f001 fc55 	bl	8005874 <ulSetInterruptMaskFromISR>
 8003fca:	0003      	movs	r3, r0
 8003fcc:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d302      	bcc.n	8003fe0 <xQueueGenericSendFromISR+0x6e>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d12e      	bne.n	800403e <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003fe0:	2413      	movs	r4, #19
 8003fe2:	193b      	adds	r3, r7, r4
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	2145      	movs	r1, #69	; 0x45
 8003fe8:	5c52      	ldrb	r2, [r2, r1]
 8003fea:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	68b9      	ldr	r1, [r7, #8]
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	f000 f8e3 	bl	80041be <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ff8:	193b      	adds	r3, r7, r4
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	b25b      	sxtb	r3, r3
 8003ffe:	3301      	adds	r3, #1
 8004000:	d111      	bne.n	8004026 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	2b00      	cmp	r3, #0
 8004008:	d016      	beq.n	8004038 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	3324      	adds	r3, #36	; 0x24
 800400e:	0018      	movs	r0, r3
 8004010:	f000 fe30 	bl	8004c74 <xTaskRemoveFromEventList>
 8004014:	1e03      	subs	r3, r0, #0
 8004016:	d00f      	beq.n	8004038 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00c      	beq.n	8004038 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	e008      	b.n	8004038 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004026:	2313      	movs	r3, #19
 8004028:	18fb      	adds	r3, r7, r3
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	3301      	adds	r3, #1
 800402e:	b2db      	uxtb	r3, r3
 8004030:	b259      	sxtb	r1, r3
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	2245      	movs	r2, #69	; 0x45
 8004036:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8004038:	2301      	movs	r3, #1
 800403a:	61fb      	str	r3, [r7, #28]
		{
 800403c:	e001      	b.n	8004042 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800403e:	2300      	movs	r3, #0
 8004040:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	0018      	movs	r0, r3
 8004046:	f001 fc1b 	bl	8005880 <vClearInterruptMaskFromISR>

	return xReturn;
 800404a:	69fb      	ldr	r3, [r7, #28]
}
 800404c:	0018      	movs	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	b009      	add	sp, #36	; 0x24
 8004052:	bd90      	pop	{r4, r7, pc}

08004054 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b08a      	sub	sp, #40	; 0x28
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004060:	2300      	movs	r3, #0
 8004062:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <xQueueReceive+0x1e>
 800406e:	b672      	cpsid	i
 8004070:	e7fe      	b.n	8004070 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d103      	bne.n	8004080 <xQueueReceive+0x2c>
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <xQueueReceive+0x30>
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <xQueueReceive+0x32>
 8004084:	2300      	movs	r3, #0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <xQueueReceive+0x3a>
 800408a:	b672      	cpsid	i
 800408c:	e7fe      	b.n	800408c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800408e:	f000 ff89 	bl	8004fa4 <xTaskGetSchedulerState>
 8004092:	1e03      	subs	r3, r0, #0
 8004094:	d102      	bne.n	800409c <xQueueReceive+0x48>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <xQueueReceive+0x4c>
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <xQueueReceive+0x4e>
 80040a0:	2300      	movs	r3, #0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <xQueueReceive+0x56>
 80040a6:	b672      	cpsid	i
 80040a8:	e7fe      	b.n	80040a8 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80040aa:	f001 fbb9 	bl	8005820 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d01a      	beq.n	80040f0 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	0011      	movs	r1, r2
 80040c0:	0018      	movs	r0, r3
 80040c2:	f000 f8e7 	bl	8004294 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	1e5a      	subs	r2, r3, #1
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d008      	beq.n	80040e8 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	3310      	adds	r3, #16
 80040da:	0018      	movs	r0, r3
 80040dc:	f000 fdca 	bl	8004c74 <xTaskRemoveFromEventList>
 80040e0:	1e03      	subs	r3, r0, #0
 80040e2:	d001      	beq.n	80040e8 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80040e4:	f001 fb8c 	bl	8005800 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80040e8:	f001 fbac 	bl	8005844 <vPortExitCritical>
				return pdPASS;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e062      	b.n	80041b6 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d103      	bne.n	80040fe <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040f6:	f001 fba5 	bl	8005844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80040fa:	2300      	movs	r3, #0
 80040fc:	e05b      	b.n	80041b6 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	2b00      	cmp	r3, #0
 8004102:	d106      	bne.n	8004112 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004104:	2314      	movs	r3, #20
 8004106:	18fb      	adds	r3, r7, r3
 8004108:	0018      	movs	r0, r3
 800410a:	f000 fe0f 	bl	8004d2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800410e:	2301      	movs	r3, #1
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004112:	f001 fb97 	bl	8005844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004116:	f000 fbbd 	bl	8004894 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800411a:	f001 fb81 	bl	8005820 <vPortEnterCritical>
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	2244      	movs	r2, #68	; 0x44
 8004122:	5c9b      	ldrb	r3, [r3, r2]
 8004124:	b25b      	sxtb	r3, r3
 8004126:	3301      	adds	r3, #1
 8004128:	d103      	bne.n	8004132 <xQueueReceive+0xde>
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	2244      	movs	r2, #68	; 0x44
 800412e:	2100      	movs	r1, #0
 8004130:	5499      	strb	r1, [r3, r2]
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	2245      	movs	r2, #69	; 0x45
 8004136:	5c9b      	ldrb	r3, [r3, r2]
 8004138:	b25b      	sxtb	r3, r3
 800413a:	3301      	adds	r3, #1
 800413c:	d103      	bne.n	8004146 <xQueueReceive+0xf2>
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	2245      	movs	r2, #69	; 0x45
 8004142:	2100      	movs	r1, #0
 8004144:	5499      	strb	r1, [r3, r2]
 8004146:	f001 fb7d 	bl	8005844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800414a:	1d3a      	adds	r2, r7, #4
 800414c:	2314      	movs	r3, #20
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	0011      	movs	r1, r2
 8004152:	0018      	movs	r0, r3
 8004154:	f000 fdfe 	bl	8004d54 <xTaskCheckForTimeOut>
 8004158:	1e03      	subs	r3, r0, #0
 800415a:	d11e      	bne.n	800419a <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	0018      	movs	r0, r3
 8004160:	f000 f91c 	bl	800439c <prvIsQueueEmpty>
 8004164:	1e03      	subs	r3, r0, #0
 8004166:	d011      	beq.n	800418c <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	3324      	adds	r3, #36	; 0x24
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	0011      	movs	r1, r2
 8004170:	0018      	movs	r0, r3
 8004172:	f000 fd3b 	bl	8004bec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	0018      	movs	r0, r3
 800417a:	f000 f8b1 	bl	80042e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800417e:	f000 fb95 	bl	80048ac <xTaskResumeAll>
 8004182:	1e03      	subs	r3, r0, #0
 8004184:	d191      	bne.n	80040aa <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8004186:	f001 fb3b 	bl	8005800 <vPortYield>
 800418a:	e78e      	b.n	80040aa <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	0018      	movs	r0, r3
 8004190:	f000 f8a6 	bl	80042e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004194:	f000 fb8a 	bl	80048ac <xTaskResumeAll>
 8004198:	e787      	b.n	80040aa <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	0018      	movs	r0, r3
 800419e:	f000 f89f 	bl	80042e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041a2:	f000 fb83 	bl	80048ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	0018      	movs	r0, r3
 80041aa:	f000 f8f7 	bl	800439c <prvIsQueueEmpty>
 80041ae:	1e03      	subs	r3, r0, #0
 80041b0:	d100      	bne.n	80041b4 <xQueueReceive+0x160>
 80041b2:	e77a      	b.n	80040aa <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80041b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80041b6:	0018      	movs	r0, r3
 80041b8:	46bd      	mov	sp, r7
 80041ba:	b00a      	add	sp, #40	; 0x28
 80041bc:	bd80      	pop	{r7, pc}

080041be <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b086      	sub	sp, #24
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10e      	bne.n	80041fa <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d14e      	bne.n	8004282 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	0018      	movs	r0, r3
 80041ea:	f000 fef7 	bl	8004fdc <xTaskPriorityDisinherit>
 80041ee:	0003      	movs	r3, r0
 80041f0:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	605a      	str	r2, [r3, #4]
 80041f8:	e043      	b.n	8004282 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d119      	bne.n	8004234 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6898      	ldr	r0, [r3, #8]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	0019      	movs	r1, r3
 800420c:	f001 fd6a 	bl	8005ce4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	18d2      	adds	r2, r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	689a      	ldr	r2, [r3, #8]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	429a      	cmp	r2, r3
 8004228:	d32b      	bcc.n	8004282 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	609a      	str	r2, [r3, #8]
 8004232:	e026      	b.n	8004282 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	68d8      	ldr	r0, [r3, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	0019      	movs	r1, r3
 8004240:	f001 fd50 	bl	8005ce4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	425b      	negs	r3, r3
 800424e:	18d2      	adds	r2, r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	68da      	ldr	r2, [r3, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d207      	bcs.n	8004270 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	425b      	negs	r3, r3
 800426a:	18d2      	adds	r2, r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d105      	bne.n	8004282 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	3b01      	subs	r3, #1
 8004280:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800428a:	697b      	ldr	r3, [r7, #20]
}
 800428c:	0018      	movs	r0, r3
 800428e:	46bd      	mov	sp, r7
 8004290:	b006      	add	sp, #24
 8004292:	bd80      	pop	{r7, pc}

08004294 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d018      	beq.n	80042d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	18d2      	adds	r2, r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68da      	ldr	r2, [r3, #12]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d303      	bcc.n	80042c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68d9      	ldr	r1, [r3, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	0018      	movs	r0, r3
 80042d4:	f001 fd06 	bl	8005ce4 <memcpy>
	}
}
 80042d8:	46c0      	nop			; (mov r8, r8)
 80042da:	46bd      	mov	sp, r7
 80042dc:	b002      	add	sp, #8
 80042de:	bd80      	pop	{r7, pc}

080042e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80042e8:	f001 fa9a 	bl	8005820 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80042ec:	230f      	movs	r3, #15
 80042ee:	18fb      	adds	r3, r7, r3
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	2145      	movs	r1, #69	; 0x45
 80042f4:	5c52      	ldrb	r2, [r2, r1]
 80042f6:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042f8:	e013      	b.n	8004322 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d016      	beq.n	8004330 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3324      	adds	r3, #36	; 0x24
 8004306:	0018      	movs	r0, r3
 8004308:	f000 fcb4 	bl	8004c74 <xTaskRemoveFromEventList>
 800430c:	1e03      	subs	r3, r0, #0
 800430e:	d001      	beq.n	8004314 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004310:	f000 fd70 	bl	8004df4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004314:	210f      	movs	r1, #15
 8004316:	187b      	adds	r3, r7, r1
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	3b01      	subs	r3, #1
 800431c:	b2da      	uxtb	r2, r3
 800431e:	187b      	adds	r3, r7, r1
 8004320:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004322:	230f      	movs	r3, #15
 8004324:	18fb      	adds	r3, r7, r3
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	b25b      	sxtb	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	dce5      	bgt.n	80042fa <prvUnlockQueue+0x1a>
 800432e:	e000      	b.n	8004332 <prvUnlockQueue+0x52>
					break;
 8004330:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2245      	movs	r2, #69	; 0x45
 8004336:	21ff      	movs	r1, #255	; 0xff
 8004338:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800433a:	f001 fa83 	bl	8005844 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800433e:	f001 fa6f 	bl	8005820 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004342:	230e      	movs	r3, #14
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	2144      	movs	r1, #68	; 0x44
 800434a:	5c52      	ldrb	r2, [r2, r1]
 800434c:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800434e:	e013      	b.n	8004378 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d016      	beq.n	8004386 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3310      	adds	r3, #16
 800435c:	0018      	movs	r0, r3
 800435e:	f000 fc89 	bl	8004c74 <xTaskRemoveFromEventList>
 8004362:	1e03      	subs	r3, r0, #0
 8004364:	d001      	beq.n	800436a <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8004366:	f000 fd45 	bl	8004df4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800436a:	210e      	movs	r1, #14
 800436c:	187b      	adds	r3, r7, r1
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	3b01      	subs	r3, #1
 8004372:	b2da      	uxtb	r2, r3
 8004374:	187b      	adds	r3, r7, r1
 8004376:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004378:	230e      	movs	r3, #14
 800437a:	18fb      	adds	r3, r7, r3
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	b25b      	sxtb	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	dce5      	bgt.n	8004350 <prvUnlockQueue+0x70>
 8004384:	e000      	b.n	8004388 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8004386:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2244      	movs	r2, #68	; 0x44
 800438c:	21ff      	movs	r1, #255	; 0xff
 800438e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004390:	f001 fa58 	bl	8005844 <vPortExitCritical>
}
 8004394:	46c0      	nop			; (mov r8, r8)
 8004396:	46bd      	mov	sp, r7
 8004398:	b004      	add	sp, #16
 800439a:	bd80      	pop	{r7, pc}

0800439c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043a4:	f001 fa3c 	bl	8005820 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d102      	bne.n	80043b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80043b0:	2301      	movs	r3, #1
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	e001      	b.n	80043ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80043ba:	f001 fa43 	bl	8005844 <vPortExitCritical>

	return xReturn;
 80043be:	68fb      	ldr	r3, [r7, #12]
}
 80043c0:	0018      	movs	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	b004      	add	sp, #16
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043d0:	f001 fa26 	bl	8005820 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043dc:	429a      	cmp	r2, r3
 80043de:	d102      	bne.n	80043e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80043e0:	2301      	movs	r3, #1
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	e001      	b.n	80043ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80043e6:	2300      	movs	r3, #0
 80043e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80043ea:	f001 fa2b 	bl	8005844 <vPortExitCritical>

	return xReturn;
 80043ee:	68fb      	ldr	r3, [r7, #12]
}
 80043f0:	0018      	movs	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	b004      	add	sp, #16
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	e015      	b.n	8004434 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004408:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <vQueueAddToRegistry+0x4c>)
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	00d2      	lsls	r2, r2, #3
 800440e:	58d3      	ldr	r3, [r2, r3]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10c      	bne.n	800442e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004414:	4b0b      	ldr	r3, [pc, #44]	; (8004444 <vQueueAddToRegistry+0x4c>)
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	00d2      	lsls	r2, r2, #3
 800441a:	6839      	ldr	r1, [r7, #0]
 800441c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800441e:	4a09      	ldr	r2, [pc, #36]	; (8004444 <vQueueAddToRegistry+0x4c>)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	18d3      	adds	r3, r2, r3
 8004426:	3304      	adds	r3, #4
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800442c:	e005      	b.n	800443a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3301      	adds	r3, #1
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b07      	cmp	r3, #7
 8004438:	d9e6      	bls.n	8004408 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	46bd      	mov	sp, r7
 800443e:	b004      	add	sp, #16
 8004440:	bd80      	pop	{r7, pc}
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	20001a60 	.word	0x20001a60

08004448 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004458:	f001 f9e2 	bl	8005820 <vPortEnterCritical>
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	2244      	movs	r2, #68	; 0x44
 8004460:	5c9b      	ldrb	r3, [r3, r2]
 8004462:	b25b      	sxtb	r3, r3
 8004464:	3301      	adds	r3, #1
 8004466:	d103      	bne.n	8004470 <vQueueWaitForMessageRestricted+0x28>
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	2244      	movs	r2, #68	; 0x44
 800446c:	2100      	movs	r1, #0
 800446e:	5499      	strb	r1, [r3, r2]
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	2245      	movs	r2, #69	; 0x45
 8004474:	5c9b      	ldrb	r3, [r3, r2]
 8004476:	b25b      	sxtb	r3, r3
 8004478:	3301      	adds	r3, #1
 800447a:	d103      	bne.n	8004484 <vQueueWaitForMessageRestricted+0x3c>
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2245      	movs	r2, #69	; 0x45
 8004480:	2100      	movs	r1, #0
 8004482:	5499      	strb	r1, [r3, r2]
 8004484:	f001 f9de 	bl	8005844 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	2b00      	cmp	r3, #0
 800448e:	d106      	bne.n	800449e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	3324      	adds	r3, #36	; 0x24
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	0018      	movs	r0, r3
 800449a:	f000 fbc5 	bl	8004c28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	0018      	movs	r0, r3
 80044a2:	f7ff ff1d 	bl	80042e0 <prvUnlockQueue>
	}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	46bd      	mov	sp, r7
 80044aa:	b006      	add	sp, #24
 80044ac:	bd80      	pop	{r7, pc}

080044ae <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80044ae:	b590      	push	{r4, r7, lr}
 80044b0:	b08d      	sub	sp, #52	; 0x34
 80044b2:	af04      	add	r7, sp, #16
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	607a      	str	r2, [r7, #4]
 80044ba:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80044bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <xTaskCreateStatic+0x18>
 80044c2:	b672      	cpsid	i
 80044c4:	e7fe      	b.n	80044c4 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80044c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <xTaskCreateStatic+0x22>
 80044cc:	b672      	cpsid	i
 80044ce:	e7fe      	b.n	80044ce <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80044d0:	235c      	movs	r3, #92	; 0x5c
 80044d2:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2b5c      	cmp	r3, #92	; 0x5c
 80044d8:	d001      	beq.n	80044de <xTaskCreateStatic+0x30>
 80044da:	b672      	cpsid	i
 80044dc:	e7fe      	b.n	80044dc <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80044de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d020      	beq.n	8004526 <xTaskCreateStatic+0x78>
 80044e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d01d      	beq.n	8004526 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ec:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044f2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	2259      	movs	r2, #89	; 0x59
 80044f8:	2102      	movs	r1, #2
 80044fa:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80044fc:	683c      	ldr	r4, [r7, #0]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	68b9      	ldr	r1, [r7, #8]
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	2300      	movs	r3, #0
 8004506:	9303      	str	r3, [sp, #12]
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	9302      	str	r3, [sp, #8]
 800450c:	2318      	movs	r3, #24
 800450e:	18fb      	adds	r3, r7, r3
 8004510:	9301      	str	r3, [sp, #4]
 8004512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	0023      	movs	r3, r4
 8004518:	f000 f858 	bl	80045cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	0018      	movs	r0, r3
 8004520:	f000 f8d6 	bl	80046d0 <prvAddNewTaskToReadyList>
 8004524:	e001      	b.n	800452a <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8004526:	2300      	movs	r3, #0
 8004528:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800452a:	69bb      	ldr	r3, [r7, #24]
	}
 800452c:	0018      	movs	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	b009      	add	sp, #36	; 0x24
 8004532:	bd90      	pop	{r4, r7, pc}

08004534 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004534:	b590      	push	{r4, r7, lr}
 8004536:	b08d      	sub	sp, #52	; 0x34
 8004538:	af04      	add	r7, sp, #16
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	603b      	str	r3, [r7, #0]
 8004540:	1dbb      	adds	r3, r7, #6
 8004542:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004544:	1dbb      	adds	r3, r7, #6
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	0018      	movs	r0, r3
 800454c:	f001 fa00 	bl	8005950 <pvPortMalloc>
 8004550:	0003      	movs	r3, r0
 8004552:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d010      	beq.n	800457c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800455a:	205c      	movs	r0, #92	; 0x5c
 800455c:	f001 f9f8 	bl	8005950 <pvPortMalloc>
 8004560:	0003      	movs	r3, r0
 8004562:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	631a      	str	r2, [r3, #48]	; 0x30
 8004570:	e006      	b.n	8004580 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	0018      	movs	r0, r3
 8004576:	f001 fa91 	bl	8005a9c <vPortFree>
 800457a:	e001      	b.n	8004580 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800457c:	2300      	movs	r3, #0
 800457e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d01a      	beq.n	80045bc <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	2259      	movs	r2, #89	; 0x59
 800458a:	2100      	movs	r1, #0
 800458c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800458e:	1dbb      	adds	r3, r7, #6
 8004590:	881a      	ldrh	r2, [r3, #0]
 8004592:	683c      	ldr	r4, [r7, #0]
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	2300      	movs	r3, #0
 800459a:	9303      	str	r3, [sp, #12]
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	9302      	str	r3, [sp, #8]
 80045a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a2:	9301      	str	r3, [sp, #4]
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	0023      	movs	r3, r4
 80045aa:	f000 f80f 	bl	80045cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	0018      	movs	r0, r3
 80045b2:	f000 f88d 	bl	80046d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80045b6:	2301      	movs	r3, #1
 80045b8:	61bb      	str	r3, [r7, #24]
 80045ba:	e002      	b.n	80045c2 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045bc:	2301      	movs	r3, #1
 80045be:	425b      	negs	r3, r3
 80045c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80045c2:	69bb      	ldr	r3, [r7, #24]
	}
 80045c4:	0018      	movs	r0, r3
 80045c6:	46bd      	mov	sp, r7
 80045c8:	b009      	add	sp, #36	; 0x24
 80045ca:	bd90      	pop	{r4, r7, pc}

080045cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
 80045d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80045da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	001a      	movs	r2, r3
 80045e4:	21a5      	movs	r1, #165	; 0xa5
 80045e6:	f001 fb86 	bl	8005cf6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80045ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4936      	ldr	r1, [pc, #216]	; (80046cc <prvInitialiseNewTask+0x100>)
 80045f2:	468c      	mov	ip, r1
 80045f4:	4463      	add	r3, ip
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	18d3      	adds	r3, r2, r3
 80045fa:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	2207      	movs	r2, #7
 8004600:	4393      	bics	r3, r2
 8004602:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	2207      	movs	r2, #7
 8004608:	4013      	ands	r3, r2
 800460a:	d001      	beq.n	8004610 <prvInitialiseNewTask+0x44>
 800460c:	b672      	cpsid	i
 800460e:	e7fe      	b.n	800460e <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	e013      	b.n	800463e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	18d3      	adds	r3, r2, r3
 800461c:	7818      	ldrb	r0, [r3, #0]
 800461e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004620:	2134      	movs	r1, #52	; 0x34
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	18d3      	adds	r3, r2, r3
 8004626:	185b      	adds	r3, r3, r1
 8004628:	1c02      	adds	r2, r0, #0
 800462a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	18d3      	adds	r3, r2, r3
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d006      	beq.n	8004646 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	3301      	adds	r3, #1
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2b0f      	cmp	r3, #15
 8004642:	d9e8      	bls.n	8004616 <prvInitialiseNewTask+0x4a>
 8004644:	e000      	b.n	8004648 <prvInitialiseNewTask+0x7c>
		{
			break;
 8004646:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464a:	2243      	movs	r2, #67	; 0x43
 800464c:	2100      	movs	r1, #0
 800464e:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	2b37      	cmp	r3, #55	; 0x37
 8004654:	d901      	bls.n	800465a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004656:	2337      	movs	r3, #55	; 0x37
 8004658:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800465a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465c:	6a3a      	ldr	r2, [r7, #32]
 800465e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004662:	6a3a      	ldr	r2, [r7, #32]
 8004664:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004668:	2200      	movs	r2, #0
 800466a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800466c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466e:	3304      	adds	r3, #4
 8004670:	0018      	movs	r0, r3
 8004672:	f7ff fa33 	bl	8003adc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004678:	3318      	adds	r3, #24
 800467a:	0018      	movs	r0, r3
 800467c:	f7ff fa2e 	bl	8003adc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004684:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	2238      	movs	r2, #56	; 0x38
 800468a:	1ad2      	subs	r2, r2, r3
 800468c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004694:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004698:	2200      	movs	r2, #0
 800469a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800469c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469e:	2258      	movs	r2, #88	; 0x58
 80046a0:	2100      	movs	r1, #0
 80046a2:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	68f9      	ldr	r1, [r7, #12]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	0018      	movs	r0, r3
 80046ac:	f001 f81c 	bl	80056e8 <pxPortInitialiseStack>
 80046b0:	0002      	movs	r2, r0
 80046b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046c2:	46c0      	nop			; (mov r8, r8)
 80046c4:	46bd      	mov	sp, r7
 80046c6:	b006      	add	sp, #24
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	46c0      	nop			; (mov r8, r8)
 80046cc:	3fffffff 	.word	0x3fffffff

080046d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80046d8:	f001 f8a2 	bl	8005820 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80046dc:	4b2a      	ldr	r3, [pc, #168]	; (8004788 <prvAddNewTaskToReadyList+0xb8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	4b29      	ldr	r3, [pc, #164]	; (8004788 <prvAddNewTaskToReadyList+0xb8>)
 80046e4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80046e6:	4b29      	ldr	r3, [pc, #164]	; (800478c <prvAddNewTaskToReadyList+0xbc>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d109      	bne.n	8004702 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80046ee:	4b27      	ldr	r3, [pc, #156]	; (800478c <prvAddNewTaskToReadyList+0xbc>)
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80046f4:	4b24      	ldr	r3, [pc, #144]	; (8004788 <prvAddNewTaskToReadyList+0xb8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d110      	bne.n	800471e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80046fc:	f000 fb94 	bl	8004e28 <prvInitialiseTaskLists>
 8004700:	e00d      	b.n	800471e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004702:	4b23      	ldr	r3, [pc, #140]	; (8004790 <prvAddNewTaskToReadyList+0xc0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d109      	bne.n	800471e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800470a:	4b20      	ldr	r3, [pc, #128]	; (800478c <prvAddNewTaskToReadyList+0xbc>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	429a      	cmp	r2, r3
 8004716:	d802      	bhi.n	800471e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004718:	4b1c      	ldr	r3, [pc, #112]	; (800478c <prvAddNewTaskToReadyList+0xbc>)
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800471e:	4b1d      	ldr	r3, [pc, #116]	; (8004794 <prvAddNewTaskToReadyList+0xc4>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	4b1b      	ldr	r3, [pc, #108]	; (8004794 <prvAddNewTaskToReadyList+0xc4>)
 8004726:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004728:	4b1a      	ldr	r3, [pc, #104]	; (8004794 <prvAddNewTaskToReadyList+0xc4>)
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004734:	4b18      	ldr	r3, [pc, #96]	; (8004798 <prvAddNewTaskToReadyList+0xc8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d903      	bls.n	8004744 <prvAddNewTaskToReadyList+0x74>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004740:	4b15      	ldr	r3, [pc, #84]	; (8004798 <prvAddNewTaskToReadyList+0xc8>)
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004748:	0013      	movs	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	189b      	adds	r3, r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4a12      	ldr	r2, [pc, #72]	; (800479c <prvAddNewTaskToReadyList+0xcc>)
 8004752:	189a      	adds	r2, r3, r2
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3304      	adds	r3, #4
 8004758:	0019      	movs	r1, r3
 800475a:	0010      	movs	r0, r2
 800475c:	f7ff f9c9 	bl	8003af2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004760:	f001 f870 	bl	8005844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004764:	4b0a      	ldr	r3, [pc, #40]	; (8004790 <prvAddNewTaskToReadyList+0xc0>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d008      	beq.n	800477e <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800476c:	4b07      	ldr	r3, [pc, #28]	; (800478c <prvAddNewTaskToReadyList+0xbc>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	429a      	cmp	r2, r3
 8004778:	d201      	bcs.n	800477e <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800477a:	f001 f841 	bl	8005800 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800477e:	46c0      	nop			; (mov r8, r8)
 8004780:	46bd      	mov	sp, r7
 8004782:	b002      	add	sp, #8
 8004784:	bd80      	pop	{r7, pc}
 8004786:	46c0      	nop			; (mov r8, r8)
 8004788:	20000bc8 	.word	0x20000bc8
 800478c:	200006f4 	.word	0x200006f4
 8004790:	20000bd4 	.word	0x20000bd4
 8004794:	20000be4 	.word	0x20000be4
 8004798:	20000bd0 	.word	0x20000bd0
 800479c:	200006f8 	.word	0x200006f8

080047a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80047a8:	2300      	movs	r3, #0
 80047aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d010      	beq.n	80047d4 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80047b2:	4b0d      	ldr	r3, [pc, #52]	; (80047e8 <vTaskDelay+0x48>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <vTaskDelay+0x1e>
 80047ba:	b672      	cpsid	i
 80047bc:	e7fe      	b.n	80047bc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80047be:	f000 f869 	bl	8004894 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2100      	movs	r1, #0
 80047c6:	0018      	movs	r0, r3
 80047c8:	f000 fc64 	bl	8005094 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80047cc:	f000 f86e 	bl	80048ac <xTaskResumeAll>
 80047d0:	0003      	movs	r3, r0
 80047d2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80047da:	f001 f811 	bl	8005800 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	46bd      	mov	sp, r7
 80047e2:	b004      	add	sp, #16
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	46c0      	nop			; (mov r8, r8)
 80047e8:	20000bf0 	.word	0x20000bf0

080047ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80047ec:	b590      	push	{r4, r7, lr}
 80047ee:	b089      	sub	sp, #36	; 0x24
 80047f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80047fa:	003a      	movs	r2, r7
 80047fc:	1d39      	adds	r1, r7, #4
 80047fe:	2308      	movs	r3, #8
 8004800:	18fb      	adds	r3, r7, r3
 8004802:	0018      	movs	r0, r3
 8004804:	f7ff f91c 	bl	8003a40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004808:	683c      	ldr	r4, [r7, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	491b      	ldr	r1, [pc, #108]	; (800487c <vTaskStartScheduler+0x90>)
 8004810:	481b      	ldr	r0, [pc, #108]	; (8004880 <vTaskStartScheduler+0x94>)
 8004812:	9202      	str	r2, [sp, #8]
 8004814:	9301      	str	r3, [sp, #4]
 8004816:	2300      	movs	r3, #0
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	2300      	movs	r3, #0
 800481c:	0022      	movs	r2, r4
 800481e:	f7ff fe46 	bl	80044ae <xTaskCreateStatic>
 8004822:	0002      	movs	r2, r0
 8004824:	4b17      	ldr	r3, [pc, #92]	; (8004884 <vTaskStartScheduler+0x98>)
 8004826:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004828:	4b16      	ldr	r3, [pc, #88]	; (8004884 <vTaskStartScheduler+0x98>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d002      	beq.n	8004836 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004830:	2301      	movs	r3, #1
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	e001      	b.n	800483a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d103      	bne.n	8004848 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8004840:	f000 fc7c 	bl	800513c <xTimerCreateTimerTask>
 8004844:	0003      	movs	r3, r0
 8004846:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d10d      	bne.n	800486a <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800484e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004850:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <vTaskStartScheduler+0x9c>)
 8004852:	2201      	movs	r2, #1
 8004854:	4252      	negs	r2, r2
 8004856:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004858:	4b0c      	ldr	r3, [pc, #48]	; (800488c <vTaskStartScheduler+0xa0>)
 800485a:	2201      	movs	r2, #1
 800485c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800485e:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <vTaskStartScheduler+0xa4>)
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004864:	f000 ffa8 	bl	80057b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004868:	e004      	b.n	8004874 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	3301      	adds	r3, #1
 800486e:	d101      	bne.n	8004874 <vTaskStartScheduler+0x88>
 8004870:	b672      	cpsid	i
 8004872:	e7fe      	b.n	8004872 <vTaskStartScheduler+0x86>
}
 8004874:	46c0      	nop			; (mov r8, r8)
 8004876:	46bd      	mov	sp, r7
 8004878:	b005      	add	sp, #20
 800487a:	bd90      	pop	{r4, r7, pc}
 800487c:	08005db8 	.word	0x08005db8
 8004880:	08004e09 	.word	0x08004e09
 8004884:	20000bec 	.word	0x20000bec
 8004888:	20000be8 	.word	0x20000be8
 800488c:	20000bd4 	.word	0x20000bd4
 8004890:	20000bcc 	.word	0x20000bcc

08004894 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004898:	4b03      	ldr	r3, [pc, #12]	; (80048a8 <vTaskSuspendAll+0x14>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	1c5a      	adds	r2, r3, #1
 800489e:	4b02      	ldr	r3, [pc, #8]	; (80048a8 <vTaskSuspendAll+0x14>)
 80048a0:	601a      	str	r2, [r3, #0]
}
 80048a2:	46c0      	nop			; (mov r8, r8)
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	20000bf0 	.word	0x20000bf0

080048ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80048b6:	2300      	movs	r3, #0
 80048b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80048ba:	4b3a      	ldr	r3, [pc, #232]	; (80049a4 <xTaskResumeAll+0xf8>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <xTaskResumeAll+0x1a>
 80048c2:	b672      	cpsid	i
 80048c4:	e7fe      	b.n	80048c4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80048c6:	f000 ffab 	bl	8005820 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80048ca:	4b36      	ldr	r3, [pc, #216]	; (80049a4 <xTaskResumeAll+0xf8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	1e5a      	subs	r2, r3, #1
 80048d0:	4b34      	ldr	r3, [pc, #208]	; (80049a4 <xTaskResumeAll+0xf8>)
 80048d2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048d4:	4b33      	ldr	r3, [pc, #204]	; (80049a4 <xTaskResumeAll+0xf8>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d15b      	bne.n	8004994 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048dc:	4b32      	ldr	r3, [pc, #200]	; (80049a8 <xTaskResumeAll+0xfc>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d057      	beq.n	8004994 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048e4:	e02f      	b.n	8004946 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80048e6:	4b31      	ldr	r3, [pc, #196]	; (80049ac <xTaskResumeAll+0x100>)
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3318      	adds	r3, #24
 80048f2:	0018      	movs	r0, r3
 80048f4:	f7ff f955 	bl	8003ba2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	3304      	adds	r3, #4
 80048fc:	0018      	movs	r0, r3
 80048fe:	f7ff f950 	bl	8003ba2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004906:	4b2a      	ldr	r3, [pc, #168]	; (80049b0 <xTaskResumeAll+0x104>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d903      	bls.n	8004916 <xTaskResumeAll+0x6a>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004912:	4b27      	ldr	r3, [pc, #156]	; (80049b0 <xTaskResumeAll+0x104>)
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800491a:	0013      	movs	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	189b      	adds	r3, r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4a24      	ldr	r2, [pc, #144]	; (80049b4 <xTaskResumeAll+0x108>)
 8004924:	189a      	adds	r2, r3, r2
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	3304      	adds	r3, #4
 800492a:	0019      	movs	r1, r3
 800492c:	0010      	movs	r0, r2
 800492e:	f7ff f8e0 	bl	8003af2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004936:	4b20      	ldr	r3, [pc, #128]	; (80049b8 <xTaskResumeAll+0x10c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	429a      	cmp	r2, r3
 800493e:	d302      	bcc.n	8004946 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004940:	4b1e      	ldr	r3, [pc, #120]	; (80049bc <xTaskResumeAll+0x110>)
 8004942:	2201      	movs	r2, #1
 8004944:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004946:	4b19      	ldr	r3, [pc, #100]	; (80049ac <xTaskResumeAll+0x100>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1cb      	bne.n	80048e6 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004954:	f000 fb02 	bl	8004f5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004958:	4b19      	ldr	r3, [pc, #100]	; (80049c0 <xTaskResumeAll+0x114>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00f      	beq.n	8004984 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004964:	f000 f83c 	bl	80049e0 <xTaskIncrementTick>
 8004968:	1e03      	subs	r3, r0, #0
 800496a:	d002      	beq.n	8004972 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800496c:	4b13      	ldr	r3, [pc, #76]	; (80049bc <xTaskResumeAll+0x110>)
 800496e:	2201      	movs	r2, #1
 8004970:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3b01      	subs	r3, #1
 8004976:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1f2      	bne.n	8004964 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800497e:	4b10      	ldr	r3, [pc, #64]	; (80049c0 <xTaskResumeAll+0x114>)
 8004980:	2200      	movs	r2, #0
 8004982:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004984:	4b0d      	ldr	r3, [pc, #52]	; (80049bc <xTaskResumeAll+0x110>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800498c:	2301      	movs	r3, #1
 800498e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004990:	f000 ff36 	bl	8005800 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004994:	f000 ff56 	bl	8005844 <vPortExitCritical>

	return xAlreadyYielded;
 8004998:	68bb      	ldr	r3, [r7, #8]
}
 800499a:	0018      	movs	r0, r3
 800499c:	46bd      	mov	sp, r7
 800499e:	b004      	add	sp, #16
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	20000bf0 	.word	0x20000bf0
 80049a8:	20000bc8 	.word	0x20000bc8
 80049ac:	20000b88 	.word	0x20000b88
 80049b0:	20000bd0 	.word	0x20000bd0
 80049b4:	200006f8 	.word	0x200006f8
 80049b8:	200006f4 	.word	0x200006f4
 80049bc:	20000bdc 	.word	0x20000bdc
 80049c0:	20000bd8 	.word	0x20000bd8

080049c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80049ca:	4b04      	ldr	r3, [pc, #16]	; (80049dc <xTaskGetTickCount+0x18>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80049d0:	687b      	ldr	r3, [r7, #4]
}
 80049d2:	0018      	movs	r0, r3
 80049d4:	46bd      	mov	sp, r7
 80049d6:	b002      	add	sp, #8
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	20000bcc 	.word	0x20000bcc

080049e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80049e6:	2300      	movs	r3, #0
 80049e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049ea:	4b4c      	ldr	r3, [pc, #304]	; (8004b1c <xTaskIncrementTick+0x13c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d000      	beq.n	80049f4 <xTaskIncrementTick+0x14>
 80049f2:	e083      	b.n	8004afc <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049f4:	4b4a      	ldr	r3, [pc, #296]	; (8004b20 <xTaskIncrementTick+0x140>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3301      	adds	r3, #1
 80049fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80049fc:	4b48      	ldr	r3, [pc, #288]	; (8004b20 <xTaskIncrementTick+0x140>)
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d117      	bne.n	8004a38 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a08:	4b46      	ldr	r3, [pc, #280]	; (8004b24 <xTaskIncrementTick+0x144>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <xTaskIncrementTick+0x36>
 8004a12:	b672      	cpsid	i
 8004a14:	e7fe      	b.n	8004a14 <xTaskIncrementTick+0x34>
 8004a16:	4b43      	ldr	r3, [pc, #268]	; (8004b24 <xTaskIncrementTick+0x144>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	4b42      	ldr	r3, [pc, #264]	; (8004b28 <xTaskIncrementTick+0x148>)
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	4b40      	ldr	r3, [pc, #256]	; (8004b24 <xTaskIncrementTick+0x144>)
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	4b40      	ldr	r3, [pc, #256]	; (8004b28 <xTaskIncrementTick+0x148>)
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	4b40      	ldr	r3, [pc, #256]	; (8004b2c <xTaskIncrementTick+0x14c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	4b3e      	ldr	r3, [pc, #248]	; (8004b2c <xTaskIncrementTick+0x14c>)
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	f000 fa92 	bl	8004f5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a38:	4b3d      	ldr	r3, [pc, #244]	; (8004b30 <xTaskIncrementTick+0x150>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d34e      	bcc.n	8004ae0 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a42:	4b38      	ldr	r3, [pc, #224]	; (8004b24 <xTaskIncrementTick+0x144>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <xTaskIncrementTick+0x70>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e000      	b.n	8004a52 <xTaskIncrementTick+0x72>
 8004a50:	2300      	movs	r3, #0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d004      	beq.n	8004a60 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a56:	4b36      	ldr	r3, [pc, #216]	; (8004b30 <xTaskIncrementTick+0x150>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	4252      	negs	r2, r2
 8004a5c:	601a      	str	r2, [r3, #0]
					break;
 8004a5e:	e03f      	b.n	8004ae0 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a60:	4b30      	ldr	r3, [pc, #192]	; (8004b24 <xTaskIncrementTick+0x144>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d203      	bcs.n	8004a80 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a78:	4b2d      	ldr	r3, [pc, #180]	; (8004b30 <xTaskIncrementTick+0x150>)
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	601a      	str	r2, [r3, #0]
						break;
 8004a7e:	e02f      	b.n	8004ae0 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	3304      	adds	r3, #4
 8004a84:	0018      	movs	r0, r3
 8004a86:	f7ff f88c 	bl	8003ba2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d004      	beq.n	8004a9c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	3318      	adds	r3, #24
 8004a96:	0018      	movs	r0, r3
 8004a98:	f7ff f883 	bl	8003ba2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa0:	4b24      	ldr	r3, [pc, #144]	; (8004b34 <xTaskIncrementTick+0x154>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d903      	bls.n	8004ab0 <xTaskIncrementTick+0xd0>
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aac:	4b21      	ldr	r3, [pc, #132]	; (8004b34 <xTaskIncrementTick+0x154>)
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab4:	0013      	movs	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	189b      	adds	r3, r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4a1e      	ldr	r2, [pc, #120]	; (8004b38 <xTaskIncrementTick+0x158>)
 8004abe:	189a      	adds	r2, r3, r2
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	0019      	movs	r1, r3
 8004ac6:	0010      	movs	r0, r2
 8004ac8:	f7ff f813 	bl	8003af2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad0:	4b1a      	ldr	r3, [pc, #104]	; (8004b3c <xTaskIncrementTick+0x15c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d3b3      	bcc.n	8004a42 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8004ada:	2301      	movs	r3, #1
 8004adc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ade:	e7b0      	b.n	8004a42 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ae0:	4b16      	ldr	r3, [pc, #88]	; (8004b3c <xTaskIncrementTick+0x15c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae6:	4914      	ldr	r1, [pc, #80]	; (8004b38 <xTaskIncrementTick+0x158>)
 8004ae8:	0013      	movs	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	189b      	adds	r3, r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	585b      	ldr	r3, [r3, r1]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d907      	bls.n	8004b06 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004af6:	2301      	movs	r3, #1
 8004af8:	617b      	str	r3, [r7, #20]
 8004afa:	e004      	b.n	8004b06 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004afc:	4b10      	ldr	r3, [pc, #64]	; (8004b40 <xTaskIncrementTick+0x160>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	4b0f      	ldr	r3, [pc, #60]	; (8004b40 <xTaskIncrementTick+0x160>)
 8004b04:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004b06:	4b0f      	ldr	r3, [pc, #60]	; (8004b44 <xTaskIncrementTick+0x164>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004b12:	697b      	ldr	r3, [r7, #20]
}
 8004b14:	0018      	movs	r0, r3
 8004b16:	46bd      	mov	sp, r7
 8004b18:	b006      	add	sp, #24
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	20000bf0 	.word	0x20000bf0
 8004b20:	20000bcc 	.word	0x20000bcc
 8004b24:	20000b80 	.word	0x20000b80
 8004b28:	20000b84 	.word	0x20000b84
 8004b2c:	20000be0 	.word	0x20000be0
 8004b30:	20000be8 	.word	0x20000be8
 8004b34:	20000bd0 	.word	0x20000bd0
 8004b38:	200006f8 	.word	0x200006f8
 8004b3c:	200006f4 	.word	0x200006f4
 8004b40:	20000bd8 	.word	0x20000bd8
 8004b44:	20000bdc 	.word	0x20000bdc

08004b48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b4e:	4b22      	ldr	r3, [pc, #136]	; (8004bd8 <vTaskSwitchContext+0x90>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b56:	4b21      	ldr	r3, [pc, #132]	; (8004bdc <vTaskSwitchContext+0x94>)
 8004b58:	2201      	movs	r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b5c:	e037      	b.n	8004bce <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8004b5e:	4b1f      	ldr	r3, [pc, #124]	; (8004bdc <vTaskSwitchContext+0x94>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004b64:	4b1e      	ldr	r3, [pc, #120]	; (8004be0 <vTaskSwitchContext+0x98>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	607b      	str	r3, [r7, #4]
 8004b6a:	e007      	b.n	8004b7c <vTaskSwitchContext+0x34>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <vTaskSwitchContext+0x2e>
 8004b72:	b672      	cpsid	i
 8004b74:	e7fe      	b.n	8004b74 <vTaskSwitchContext+0x2c>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	607b      	str	r3, [r7, #4]
 8004b7c:	4919      	ldr	r1, [pc, #100]	; (8004be4 <vTaskSwitchContext+0x9c>)
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	0013      	movs	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	189b      	adds	r3, r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	585b      	ldr	r3, [r3, r1]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0ee      	beq.n	8004b6c <vTaskSwitchContext+0x24>
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	0013      	movs	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	189b      	adds	r3, r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4a12      	ldr	r2, [pc, #72]	; (8004be4 <vTaskSwitchContext+0x9c>)
 8004b9a:	189b      	adds	r3, r3, r2
 8004b9c:	603b      	str	r3, [r7, #0]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	605a      	str	r2, [r3, #4]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	3308      	adds	r3, #8
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d104      	bne.n	8004bbe <vTaskSwitchContext+0x76>
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	605a      	str	r2, [r3, #4]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	4b08      	ldr	r3, [pc, #32]	; (8004be8 <vTaskSwitchContext+0xa0>)
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <vTaskSwitchContext+0x98>)
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	601a      	str	r2, [r3, #0]
}
 8004bce:	46c0      	nop			; (mov r8, r8)
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	b002      	add	sp, #8
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	20000bf0 	.word	0x20000bf0
 8004bdc:	20000bdc 	.word	0x20000bdc
 8004be0:	20000bd0 	.word	0x20000bd0
 8004be4:	200006f8 	.word	0x200006f8
 8004be8:	200006f4 	.word	0x200006f4

08004bec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <vTaskPlaceOnEventList+0x14>
 8004bfc:	b672      	cpsid	i
 8004bfe:	e7fe      	b.n	8004bfe <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c00:	4b08      	ldr	r3, [pc, #32]	; (8004c24 <vTaskPlaceOnEventList+0x38>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3318      	adds	r3, #24
 8004c06:	001a      	movs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	0011      	movs	r1, r2
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f7fe ff92 	bl	8003b36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2101      	movs	r1, #1
 8004c16:	0018      	movs	r0, r3
 8004c18:	f000 fa3c 	bl	8005094 <prvAddCurrentTaskToDelayedList>
}
 8004c1c:	46c0      	nop			; (mov r8, r8)
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	b002      	add	sp, #8
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	200006f4 	.word	0x200006f4

08004c28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <vTaskPlaceOnEventListRestricted+0x16>
 8004c3a:	b672      	cpsid	i
 8004c3c:	e7fe      	b.n	8004c3c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c3e:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <vTaskPlaceOnEventListRestricted+0x48>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3318      	adds	r3, #24
 8004c44:	001a      	movs	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	0011      	movs	r1, r2
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f7fe ff51 	bl	8003af2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8004c56:	2301      	movs	r3, #1
 8004c58:	425b      	negs	r3, r3
 8004c5a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	0011      	movs	r1, r2
 8004c62:	0018      	movs	r0, r3
 8004c64:	f000 fa16 	bl	8005094 <prvAddCurrentTaskToDelayedList>
	}
 8004c68:	46c0      	nop			; (mov r8, r8)
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	b004      	add	sp, #16
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	200006f4 	.word	0x200006f4

08004c74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <xTaskRemoveFromEventList+0x1a>
 8004c8a:	b672      	cpsid	i
 8004c8c:	e7fe      	b.n	8004c8c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	3318      	adds	r3, #24
 8004c92:	0018      	movs	r0, r3
 8004c94:	f7fe ff85 	bl	8003ba2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c98:	4b1e      	ldr	r3, [pc, #120]	; (8004d14 <xTaskRemoveFromEventList+0xa0>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d11d      	bne.n	8004cdc <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	f7fe ff7c 	bl	8003ba2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cae:	4b1a      	ldr	r3, [pc, #104]	; (8004d18 <xTaskRemoveFromEventList+0xa4>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d903      	bls.n	8004cbe <xTaskRemoveFromEventList+0x4a>
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cba:	4b17      	ldr	r3, [pc, #92]	; (8004d18 <xTaskRemoveFromEventList+0xa4>)
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc2:	0013      	movs	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	189b      	adds	r3, r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4a14      	ldr	r2, [pc, #80]	; (8004d1c <xTaskRemoveFromEventList+0xa8>)
 8004ccc:	189a      	adds	r2, r3, r2
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	0019      	movs	r1, r3
 8004cd4:	0010      	movs	r0, r2
 8004cd6:	f7fe ff0c 	bl	8003af2 <vListInsertEnd>
 8004cda:	e007      	b.n	8004cec <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	3318      	adds	r3, #24
 8004ce0:	001a      	movs	r2, r3
 8004ce2:	4b0f      	ldr	r3, [pc, #60]	; (8004d20 <xTaskRemoveFromEventList+0xac>)
 8004ce4:	0011      	movs	r1, r2
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	f7fe ff03 	bl	8003af2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf0:	4b0c      	ldr	r3, [pc, #48]	; (8004d24 <xTaskRemoveFromEventList+0xb0>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d905      	bls.n	8004d06 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004cfe:	4b0a      	ldr	r3, [pc, #40]	; (8004d28 <xTaskRemoveFromEventList+0xb4>)
 8004d00:	2201      	movs	r2, #1
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	e001      	b.n	8004d0a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
}
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	b004      	add	sp, #16
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	20000bf0 	.word	0x20000bf0
 8004d18:	20000bd0 	.word	0x20000bd0
 8004d1c:	200006f8 	.word	0x200006f8
 8004d20:	20000b88 	.word	0x20000b88
 8004d24:	200006f4 	.word	0x200006f4
 8004d28:	20000bdc 	.word	0x20000bdc

08004d2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d34:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <vTaskInternalSetTimeOutState+0x20>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d3c:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <vTaskInternalSetTimeOutState+0x24>)
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	605a      	str	r2, [r3, #4]
}
 8004d44:	46c0      	nop			; (mov r8, r8)
 8004d46:	46bd      	mov	sp, r7
 8004d48:	b002      	add	sp, #8
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	20000be0 	.word	0x20000be0
 8004d50:	20000bcc 	.word	0x20000bcc

08004d54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <xTaskCheckForTimeOut+0x14>
 8004d64:	b672      	cpsid	i
 8004d66:	e7fe      	b.n	8004d66 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <xTaskCheckForTimeOut+0x1e>
 8004d6e:	b672      	cpsid	i
 8004d70:	e7fe      	b.n	8004d70 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8004d72:	f000 fd55 	bl	8005820 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d76:	4b1d      	ldr	r3, [pc, #116]	; (8004dec <xTaskCheckForTimeOut+0x98>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	d102      	bne.n	8004d94 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	617b      	str	r3, [r7, #20]
 8004d92:	e024      	b.n	8004dde <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	4b15      	ldr	r3, [pc, #84]	; (8004df0 <xTaskCheckForTimeOut+0x9c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d007      	beq.n	8004db0 <xTaskCheckForTimeOut+0x5c>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d302      	bcc.n	8004db0 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004daa:	2301      	movs	r3, #1
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	e016      	b.n	8004dde <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d20c      	bcs.n	8004dd4 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	1ad2      	subs	r2, r2, r3
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f7ff ffaf 	bl	8004d2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	617b      	str	r3, [r7, #20]
 8004dd2:	e004      	b.n	8004dde <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004dde:	f000 fd31 	bl	8005844 <vPortExitCritical>

	return xReturn;
 8004de2:	697b      	ldr	r3, [r7, #20]
}
 8004de4:	0018      	movs	r0, r3
 8004de6:	46bd      	mov	sp, r7
 8004de8:	b006      	add	sp, #24
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	20000bcc 	.word	0x20000bcc
 8004df0:	20000be0 	.word	0x20000be0

08004df4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004df8:	4b02      	ldr	r3, [pc, #8]	; (8004e04 <vTaskMissedYield+0x10>)
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]
}
 8004dfe:	46c0      	nop			; (mov r8, r8)
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	20000bdc 	.word	0x20000bdc

08004e08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e10:	f000 f84e 	bl	8004eb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e14:	4b03      	ldr	r3, [pc, #12]	; (8004e24 <prvIdleTask+0x1c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d9f9      	bls.n	8004e10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e1c:	f000 fcf0 	bl	8005800 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004e20:	e7f6      	b.n	8004e10 <prvIdleTask+0x8>
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	200006f8 	.word	0x200006f8

08004e28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e2e:	2300      	movs	r3, #0
 8004e30:	607b      	str	r3, [r7, #4]
 8004e32:	e00c      	b.n	8004e4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	0013      	movs	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	189b      	adds	r3, r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4a14      	ldr	r2, [pc, #80]	; (8004e90 <prvInitialiseTaskLists+0x68>)
 8004e40:	189b      	adds	r3, r3, r2
 8004e42:	0018      	movs	r0, r3
 8004e44:	f7fe fe2c 	bl	8003aa0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	607b      	str	r3, [r7, #4]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b37      	cmp	r3, #55	; 0x37
 8004e52:	d9ef      	bls.n	8004e34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e54:	4b0f      	ldr	r3, [pc, #60]	; (8004e94 <prvInitialiseTaskLists+0x6c>)
 8004e56:	0018      	movs	r0, r3
 8004e58:	f7fe fe22 	bl	8003aa0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e5c:	4b0e      	ldr	r3, [pc, #56]	; (8004e98 <prvInitialiseTaskLists+0x70>)
 8004e5e:	0018      	movs	r0, r3
 8004e60:	f7fe fe1e 	bl	8003aa0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e64:	4b0d      	ldr	r3, [pc, #52]	; (8004e9c <prvInitialiseTaskLists+0x74>)
 8004e66:	0018      	movs	r0, r3
 8004e68:	f7fe fe1a 	bl	8003aa0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <prvInitialiseTaskLists+0x78>)
 8004e6e:	0018      	movs	r0, r3
 8004e70:	f7fe fe16 	bl	8003aa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e74:	4b0b      	ldr	r3, [pc, #44]	; (8004ea4 <prvInitialiseTaskLists+0x7c>)
 8004e76:	0018      	movs	r0, r3
 8004e78:	f7fe fe12 	bl	8003aa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ea8 <prvInitialiseTaskLists+0x80>)
 8004e7e:	4a05      	ldr	r2, [pc, #20]	; (8004e94 <prvInitialiseTaskLists+0x6c>)
 8004e80:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e82:	4b0a      	ldr	r3, [pc, #40]	; (8004eac <prvInitialiseTaskLists+0x84>)
 8004e84:	4a04      	ldr	r2, [pc, #16]	; (8004e98 <prvInitialiseTaskLists+0x70>)
 8004e86:	601a      	str	r2, [r3, #0]
}
 8004e88:	46c0      	nop			; (mov r8, r8)
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	b002      	add	sp, #8
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	200006f8 	.word	0x200006f8
 8004e94:	20000b58 	.word	0x20000b58
 8004e98:	20000b6c 	.word	0x20000b6c
 8004e9c:	20000b88 	.word	0x20000b88
 8004ea0:	20000b9c 	.word	0x20000b9c
 8004ea4:	20000bb4 	.word	0x20000bb4
 8004ea8:	20000b80 	.word	0x20000b80
 8004eac:	20000b84 	.word	0x20000b84

08004eb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004eb6:	e01a      	b.n	8004eee <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004eb8:	f000 fcb2 	bl	8005820 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004ebc:	4b10      	ldr	r3, [pc, #64]	; (8004f00 <prvCheckTasksWaitingTermination+0x50>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	0018      	movs	r0, r3
 8004eca:	f7fe fe6a 	bl	8003ba2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ece:	4b0d      	ldr	r3, [pc, #52]	; (8004f04 <prvCheckTasksWaitingTermination+0x54>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	1e5a      	subs	r2, r3, #1
 8004ed4:	4b0b      	ldr	r3, [pc, #44]	; (8004f04 <prvCheckTasksWaitingTermination+0x54>)
 8004ed6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ed8:	4b0b      	ldr	r3, [pc, #44]	; (8004f08 <prvCheckTasksWaitingTermination+0x58>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	1e5a      	subs	r2, r3, #1
 8004ede:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <prvCheckTasksWaitingTermination+0x58>)
 8004ee0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004ee2:	f000 fcaf 	bl	8005844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	0018      	movs	r0, r3
 8004eea:	f000 f80f 	bl	8004f0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004eee:	4b06      	ldr	r3, [pc, #24]	; (8004f08 <prvCheckTasksWaitingTermination+0x58>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1e0      	bne.n	8004eb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	b002      	add	sp, #8
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	46c0      	nop			; (mov r8, r8)
 8004f00:	20000b9c 	.word	0x20000b9c
 8004f04:	20000bc8 	.word	0x20000bc8
 8004f08:	20000bb0 	.word	0x20000bb0

08004f0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2259      	movs	r2, #89	; 0x59
 8004f18:	5c9b      	ldrb	r3, [r3, r2]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d109      	bne.n	8004f32 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	0018      	movs	r0, r3
 8004f24:	f000 fdba 	bl	8005a9c <vPortFree>
				vPortFree( pxTCB );
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	f000 fdb6 	bl	8005a9c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f30:	e010      	b.n	8004f54 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2259      	movs	r2, #89	; 0x59
 8004f36:	5c9b      	ldrb	r3, [r3, r2]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d104      	bne.n	8004f46 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	0018      	movs	r0, r3
 8004f40:	f000 fdac 	bl	8005a9c <vPortFree>
	}
 8004f44:	e006      	b.n	8004f54 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2259      	movs	r2, #89	; 0x59
 8004f4a:	5c9b      	ldrb	r3, [r3, r2]
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d001      	beq.n	8004f54 <prvDeleteTCB+0x48>
 8004f50:	b672      	cpsid	i
 8004f52:	e7fe      	b.n	8004f52 <prvDeleteTCB+0x46>
	}
 8004f54:	46c0      	nop			; (mov r8, r8)
 8004f56:	46bd      	mov	sp, r7
 8004f58:	b002      	add	sp, #8
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f62:	4b0e      	ldr	r3, [pc, #56]	; (8004f9c <prvResetNextTaskUnblockTime+0x40>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <prvResetNextTaskUnblockTime+0x14>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e000      	b.n	8004f72 <prvResetNextTaskUnblockTime+0x16>
 8004f70:	2300      	movs	r3, #0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d004      	beq.n	8004f80 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f76:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <prvResetNextTaskUnblockTime+0x44>)
 8004f78:	2201      	movs	r2, #1
 8004f7a:	4252      	negs	r2, r2
 8004f7c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f7e:	e008      	b.n	8004f92 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f80:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <prvResetNextTaskUnblockTime+0x40>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	4b04      	ldr	r3, [pc, #16]	; (8004fa0 <prvResetNextTaskUnblockTime+0x44>)
 8004f90:	601a      	str	r2, [r3, #0]
}
 8004f92:	46c0      	nop			; (mov r8, r8)
 8004f94:	46bd      	mov	sp, r7
 8004f96:	b002      	add	sp, #8
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	46c0      	nop			; (mov r8, r8)
 8004f9c:	20000b80 	.word	0x20000b80
 8004fa0:	20000be8 	.word	0x20000be8

08004fa4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004faa:	4b0a      	ldr	r3, [pc, #40]	; (8004fd4 <xTaskGetSchedulerState+0x30>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d102      	bne.n	8004fb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	607b      	str	r3, [r7, #4]
 8004fb6:	e008      	b.n	8004fca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fb8:	4b07      	ldr	r3, [pc, #28]	; (8004fd8 <xTaskGetSchedulerState+0x34>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d102      	bne.n	8004fc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	607b      	str	r3, [r7, #4]
 8004fc4:	e001      	b.n	8004fca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004fca:	687b      	ldr	r3, [r7, #4]
	}
 8004fcc:	0018      	movs	r0, r3
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	b002      	add	sp, #8
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	20000bd4 	.word	0x20000bd4
 8004fd8:	20000bf0 	.word	0x20000bf0

08004fdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d044      	beq.n	800507c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ff2:	4b25      	ldr	r3, [pc, #148]	; (8005088 <xTaskPriorityDisinherit+0xac>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d001      	beq.n	8005000 <xTaskPriorityDisinherit+0x24>
 8004ffc:	b672      	cpsid	i
 8004ffe:	e7fe      	b.n	8004ffe <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <xTaskPriorityDisinherit+0x30>
 8005008:	b672      	cpsid	i
 800500a:	e7fe      	b.n	800500a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005010:	1e5a      	subs	r2, r3, #1
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800501e:	429a      	cmp	r2, r3
 8005020:	d02c      	beq.n	800507c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005026:	2b00      	cmp	r3, #0
 8005028:	d128      	bne.n	800507c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	3304      	adds	r3, #4
 800502e:	0018      	movs	r0, r3
 8005030:	f7fe fdb7 	bl	8003ba2 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	2238      	movs	r2, #56	; 0x38
 8005042:	1ad2      	subs	r2, r2, r3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800504c:	4b0f      	ldr	r3, [pc, #60]	; (800508c <xTaskPriorityDisinherit+0xb0>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	429a      	cmp	r2, r3
 8005052:	d903      	bls.n	800505c <xTaskPriorityDisinherit+0x80>
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005058:	4b0c      	ldr	r3, [pc, #48]	; (800508c <xTaskPriorityDisinherit+0xb0>)
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005060:	0013      	movs	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	189b      	adds	r3, r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4a09      	ldr	r2, [pc, #36]	; (8005090 <xTaskPriorityDisinherit+0xb4>)
 800506a:	189a      	adds	r2, r3, r2
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	3304      	adds	r3, #4
 8005070:	0019      	movs	r1, r3
 8005072:	0010      	movs	r0, r2
 8005074:	f7fe fd3d 	bl	8003af2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005078:	2301      	movs	r3, #1
 800507a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800507c:	68fb      	ldr	r3, [r7, #12]
	}
 800507e:	0018      	movs	r0, r3
 8005080:	46bd      	mov	sp, r7
 8005082:	b004      	add	sp, #16
 8005084:	bd80      	pop	{r7, pc}
 8005086:	46c0      	nop			; (mov r8, r8)
 8005088:	200006f4 	.word	0x200006f4
 800508c:	20000bd0 	.word	0x20000bd0
 8005090:	200006f8 	.word	0x200006f8

08005094 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800509e:	4b21      	ldr	r3, [pc, #132]	; (8005124 <prvAddCurrentTaskToDelayedList+0x90>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050a4:	4b20      	ldr	r3, [pc, #128]	; (8005128 <prvAddCurrentTaskToDelayedList+0x94>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3304      	adds	r3, #4
 80050aa:	0018      	movs	r0, r3
 80050ac:	f7fe fd79 	bl	8003ba2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3301      	adds	r3, #1
 80050b4:	d10b      	bne.n	80050ce <prvAddCurrentTaskToDelayedList+0x3a>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d008      	beq.n	80050ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050bc:	4b1a      	ldr	r3, [pc, #104]	; (8005128 <prvAddCurrentTaskToDelayedList+0x94>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	1d1a      	adds	r2, r3, #4
 80050c2:	4b1a      	ldr	r3, [pc, #104]	; (800512c <prvAddCurrentTaskToDelayedList+0x98>)
 80050c4:	0011      	movs	r1, r2
 80050c6:	0018      	movs	r0, r3
 80050c8:	f7fe fd13 	bl	8003af2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050cc:	e026      	b.n	800511c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	18d3      	adds	r3, r2, r3
 80050d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050d6:	4b14      	ldr	r3, [pc, #80]	; (8005128 <prvAddCurrentTaskToDelayedList+0x94>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d209      	bcs.n	80050fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050e6:	4b12      	ldr	r3, [pc, #72]	; (8005130 <prvAddCurrentTaskToDelayedList+0x9c>)
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <prvAddCurrentTaskToDelayedList+0x94>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3304      	adds	r3, #4
 80050f0:	0019      	movs	r1, r3
 80050f2:	0010      	movs	r0, r2
 80050f4:	f7fe fd1f 	bl	8003b36 <vListInsert>
}
 80050f8:	e010      	b.n	800511c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050fa:	4b0e      	ldr	r3, [pc, #56]	; (8005134 <prvAddCurrentTaskToDelayedList+0xa0>)
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <prvAddCurrentTaskToDelayedList+0x94>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3304      	adds	r3, #4
 8005104:	0019      	movs	r1, r3
 8005106:	0010      	movs	r0, r2
 8005108:	f7fe fd15 	bl	8003b36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800510c:	4b0a      	ldr	r3, [pc, #40]	; (8005138 <prvAddCurrentTaskToDelayedList+0xa4>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	429a      	cmp	r2, r3
 8005114:	d202      	bcs.n	800511c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005116:	4b08      	ldr	r3, [pc, #32]	; (8005138 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	601a      	str	r2, [r3, #0]
}
 800511c:	46c0      	nop			; (mov r8, r8)
 800511e:	46bd      	mov	sp, r7
 8005120:	b004      	add	sp, #16
 8005122:	bd80      	pop	{r7, pc}
 8005124:	20000bcc 	.word	0x20000bcc
 8005128:	200006f4 	.word	0x200006f4
 800512c:	20000bb4 	.word	0x20000bb4
 8005130:	20000b84 	.word	0x20000b84
 8005134:	20000b80 	.word	0x20000b80
 8005138:	20000be8 	.word	0x20000be8

0800513c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800513c:	b590      	push	{r4, r7, lr}
 800513e:	b089      	sub	sp, #36	; 0x24
 8005140:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005142:	2300      	movs	r3, #0
 8005144:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005146:	f000 fa8b 	bl	8005660 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800514a:	4b17      	ldr	r3, [pc, #92]	; (80051a8 <xTimerCreateTimerTask+0x6c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d020      	beq.n	8005194 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005152:	2300      	movs	r3, #0
 8005154:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005156:	2300      	movs	r3, #0
 8005158:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800515a:	003a      	movs	r2, r7
 800515c:	1d39      	adds	r1, r7, #4
 800515e:	2308      	movs	r3, #8
 8005160:	18fb      	adds	r3, r7, r3
 8005162:	0018      	movs	r0, r3
 8005164:	f7fe fc84 	bl	8003a70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005168:	683c      	ldr	r4, [r7, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	490f      	ldr	r1, [pc, #60]	; (80051ac <xTimerCreateTimerTask+0x70>)
 8005170:	480f      	ldr	r0, [pc, #60]	; (80051b0 <xTimerCreateTimerTask+0x74>)
 8005172:	9202      	str	r2, [sp, #8]
 8005174:	9301      	str	r3, [sp, #4]
 8005176:	2302      	movs	r3, #2
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	2300      	movs	r3, #0
 800517c:	0022      	movs	r2, r4
 800517e:	f7ff f996 	bl	80044ae <xTaskCreateStatic>
 8005182:	0002      	movs	r2, r0
 8005184:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <xTimerCreateTimerTask+0x78>)
 8005186:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005188:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <xTimerCreateTimerTask+0x78>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8005190:	2301      	movs	r3, #1
 8005192:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <xTimerCreateTimerTask+0x62>
 800519a:	b672      	cpsid	i
 800519c:	e7fe      	b.n	800519c <xTimerCreateTimerTask+0x60>
	return xReturn;
 800519e:	68fb      	ldr	r3, [r7, #12]
}
 80051a0:	0018      	movs	r0, r3
 80051a2:	46bd      	mov	sp, r7
 80051a4:	b005      	add	sp, #20
 80051a6:	bd90      	pop	{r4, r7, pc}
 80051a8:	20000c24 	.word	0x20000c24
 80051ac:	08005dc0 	.word	0x08005dc0
 80051b0:	080052c1 	.word	0x080052c1
 80051b4:	20000c28 	.word	0x20000c28

080051b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08a      	sub	sp, #40	; 0x28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80051c6:	2300      	movs	r3, #0
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <xTimerGenericCommand+0x1c>
 80051d0:	b672      	cpsid	i
 80051d2:	e7fe      	b.n	80051d2 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051d4:	4b1d      	ldr	r3, [pc, #116]	; (800524c <xTimerGenericCommand+0x94>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d031      	beq.n	8005240 <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80051dc:	2114      	movs	r1, #20
 80051de:	187b      	adds	r3, r7, r1
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80051e4:	187b      	adds	r3, r7, r1
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80051ea:	187b      	adds	r3, r7, r1
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b05      	cmp	r3, #5
 80051f4:	dc1a      	bgt.n	800522c <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80051f6:	f7ff fed5 	bl	8004fa4 <xTaskGetSchedulerState>
 80051fa:	0003      	movs	r3, r0
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d10a      	bne.n	8005216 <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005200:	4b12      	ldr	r3, [pc, #72]	; (800524c <xTimerGenericCommand+0x94>)
 8005202:	6818      	ldr	r0, [r3, #0]
 8005204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005206:	2314      	movs	r3, #20
 8005208:	18f9      	adds	r1, r7, r3
 800520a:	2300      	movs	r3, #0
 800520c:	f7fe fded 	bl	8003dea <xQueueGenericSend>
 8005210:	0003      	movs	r3, r0
 8005212:	627b      	str	r3, [r7, #36]	; 0x24
 8005214:	e014      	b.n	8005240 <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005216:	4b0d      	ldr	r3, [pc, #52]	; (800524c <xTimerGenericCommand+0x94>)
 8005218:	6818      	ldr	r0, [r3, #0]
 800521a:	2314      	movs	r3, #20
 800521c:	18f9      	adds	r1, r7, r3
 800521e:	2300      	movs	r3, #0
 8005220:	2200      	movs	r2, #0
 8005222:	f7fe fde2 	bl	8003dea <xQueueGenericSend>
 8005226:	0003      	movs	r3, r0
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
 800522a:	e009      	b.n	8005240 <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800522c:	4b07      	ldr	r3, [pc, #28]	; (800524c <xTimerGenericCommand+0x94>)
 800522e:	6818      	ldr	r0, [r3, #0]
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	2314      	movs	r3, #20
 8005234:	18f9      	adds	r1, r7, r3
 8005236:	2300      	movs	r3, #0
 8005238:	f7fe fe9b 	bl	8003f72 <xQueueGenericSendFromISR>
 800523c:	0003      	movs	r3, r0
 800523e:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005242:	0018      	movs	r0, r3
 8005244:	46bd      	mov	sp, r7
 8005246:	b00a      	add	sp, #40	; 0x28
 8005248:	bd80      	pop	{r7, pc}
 800524a:	46c0      	nop			; (mov r8, r8)
 800524c:	20000c24 	.word	0x20000c24

08005250 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af02      	add	r7, sp, #8
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800525a:	4b18      	ldr	r3, [pc, #96]	; (80052bc <prvProcessExpiredTimer+0x6c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3304      	adds	r3, #4
 8005268:	0018      	movs	r0, r3
 800526a:	f7fe fc9a 	bl	8003ba2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d119      	bne.n	80052aa <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	699a      	ldr	r2, [r3, #24]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	18d1      	adds	r1, r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 f8b6 	bl	80053f4 <prvInsertTimerInActiveList>
 8005288:	1e03      	subs	r3, r0, #0
 800528a:	d00e      	beq.n	80052aa <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	2300      	movs	r3, #0
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	2300      	movs	r3, #0
 8005296:	2100      	movs	r1, #0
 8005298:	f7ff ff8e 	bl	80051b8 <xTimerGenericCommand>
 800529c:	0003      	movs	r3, r0
 800529e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <prvProcessExpiredTimer+0x5a>
 80052a6:	b672      	cpsid	i
 80052a8:	e7fe      	b.n	80052a8 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	0010      	movs	r0, r2
 80052b2:	4798      	blx	r3
}
 80052b4:	46c0      	nop			; (mov r8, r8)
 80052b6:	46bd      	mov	sp, r7
 80052b8:	b004      	add	sp, #16
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	20000c1c 	.word	0x20000c1c

080052c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052c8:	2308      	movs	r3, #8
 80052ca:	18fb      	adds	r3, r7, r3
 80052cc:	0018      	movs	r0, r3
 80052ce:	f000 f851 	bl	8005374 <prvGetNextExpireTime>
 80052d2:	0003      	movs	r3, r0
 80052d4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	0011      	movs	r1, r2
 80052dc:	0018      	movs	r0, r3
 80052de:	f000 f803 	bl	80052e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80052e2:	f000 f8c9 	bl	8005478 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052e6:	e7ef      	b.n	80052c8 <prvTimerTask+0x8>

080052e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80052f2:	f7ff facf 	bl	8004894 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052f6:	2308      	movs	r3, #8
 80052f8:	18fb      	adds	r3, r7, r3
 80052fa:	0018      	movs	r0, r3
 80052fc:	f000 f85a 	bl	80053b4 <prvSampleTimeNow>
 8005300:	0003      	movs	r3, r0
 8005302:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d129      	bne.n	800535e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10c      	bne.n	800532a <prvProcessTimerOrBlockTask+0x42>
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	429a      	cmp	r2, r3
 8005316:	d808      	bhi.n	800532a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8005318:	f7ff fac8 	bl	80048ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	0011      	movs	r1, r2
 8005322:	0018      	movs	r0, r3
 8005324:	f7ff ff94 	bl	8005250 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005328:	e01b      	b.n	8005362 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d006      	beq.n	800533e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005330:	4b0e      	ldr	r3, [pc, #56]	; (800536c <prvProcessTimerOrBlockTask+0x84>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	425a      	negs	r2, r3
 8005338:	4153      	adcs	r3, r2
 800533a:	b2db      	uxtb	r3, r3
 800533c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800533e:	4b0c      	ldr	r3, [pc, #48]	; (8005370 <prvProcessTimerOrBlockTask+0x88>)
 8005340:	6818      	ldr	r0, [r3, #0]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	0019      	movs	r1, r3
 800534c:	f7ff f87c 	bl	8004448 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005350:	f7ff faac 	bl	80048ac <xTaskResumeAll>
 8005354:	1e03      	subs	r3, r0, #0
 8005356:	d104      	bne.n	8005362 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8005358:	f000 fa52 	bl	8005800 <vPortYield>
}
 800535c:	e001      	b.n	8005362 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800535e:	f7ff faa5 	bl	80048ac <xTaskResumeAll>
}
 8005362:	46c0      	nop			; (mov r8, r8)
 8005364:	46bd      	mov	sp, r7
 8005366:	b004      	add	sp, #16
 8005368:	bd80      	pop	{r7, pc}
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	20000c20 	.word	0x20000c20
 8005370:	20000c24 	.word	0x20000c24

08005374 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800537c:	4b0c      	ldr	r3, [pc, #48]	; (80053b0 <prvGetNextExpireTime+0x3c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	425a      	negs	r2, r3
 8005384:	4153      	adcs	r3, r2
 8005386:	b2db      	uxtb	r3, r3
 8005388:	001a      	movs	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d105      	bne.n	80053a2 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <prvGetNextExpireTime+0x3c>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	e001      	b.n	80053a6 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053a6:	68fb      	ldr	r3, [r7, #12]
}
 80053a8:	0018      	movs	r0, r3
 80053aa:	46bd      	mov	sp, r7
 80053ac:	b004      	add	sp, #16
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	20000c1c 	.word	0x20000c1c

080053b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80053bc:	f7ff fb02 	bl	80049c4 <xTaskGetTickCount>
 80053c0:	0003      	movs	r3, r0
 80053c2:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 80053c4:	4b0a      	ldr	r3, [pc, #40]	; (80053f0 <prvSampleTimeNow+0x3c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d205      	bcs.n	80053da <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 80053ce:	f000 f8ed 	bl	80055ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	e002      	b.n	80053e0 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80053e0:	4b03      	ldr	r3, [pc, #12]	; (80053f0 <prvSampleTimeNow+0x3c>)
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80053e6:	68fb      	ldr	r3, [r7, #12]
}
 80053e8:	0018      	movs	r0, r3
 80053ea:	46bd      	mov	sp, r7
 80053ec:	b004      	add	sp, #16
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	20000c2c 	.word	0x20000c2c

080053f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005402:	2300      	movs	r3, #0
 8005404:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	429a      	cmp	r2, r3
 8005418:	d812      	bhi.n	8005440 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	1ad2      	subs	r2, r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	429a      	cmp	r2, r3
 8005426:	d302      	bcc.n	800542e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005428:	2301      	movs	r3, #1
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	e01b      	b.n	8005466 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800542e:	4b10      	ldr	r3, [pc, #64]	; (8005470 <prvInsertTimerInActiveList+0x7c>)
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	3304      	adds	r3, #4
 8005436:	0019      	movs	r1, r3
 8005438:	0010      	movs	r0, r2
 800543a:	f7fe fb7c 	bl	8003b36 <vListInsert>
 800543e:	e012      	b.n	8005466 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	429a      	cmp	r2, r3
 8005446:	d206      	bcs.n	8005456 <prvInsertTimerInActiveList+0x62>
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	429a      	cmp	r2, r3
 800544e:	d302      	bcc.n	8005456 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005450:	2301      	movs	r3, #1
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	e007      	b.n	8005466 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005456:	4b07      	ldr	r3, [pc, #28]	; (8005474 <prvInsertTimerInActiveList+0x80>)
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3304      	adds	r3, #4
 800545e:	0019      	movs	r1, r3
 8005460:	0010      	movs	r0, r2
 8005462:	f7fe fb68 	bl	8003b36 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005466:	697b      	ldr	r3, [r7, #20]
}
 8005468:	0018      	movs	r0, r3
 800546a:	46bd      	mov	sp, r7
 800546c:	b006      	add	sp, #24
 800546e:	bd80      	pop	{r7, pc}
 8005470:	20000c20 	.word	0x20000c20
 8005474:	20000c1c 	.word	0x20000c1c

08005478 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b08c      	sub	sp, #48	; 0x30
 800547c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800547e:	e082      	b.n	8005586 <prvProcessReceivedCommands+0x10e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005480:	2308      	movs	r3, #8
 8005482:	18fb      	adds	r3, r7, r3
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	da10      	bge.n	80054ac <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800548a:	2308      	movs	r3, #8
 800548c:	18fb      	adds	r3, r7, r3
 800548e:	3304      	adds	r3, #4
 8005490:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <prvProcessReceivedCommands+0x24>
 8005498:	b672      	cpsid	i
 800549a:	e7fe      	b.n	800549a <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	6858      	ldr	r0, [r3, #4]
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	0019      	movs	r1, r3
 80054aa:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80054ac:	2308      	movs	r3, #8
 80054ae:	18fb      	adds	r3, r7, r3
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	db66      	blt.n	8005584 <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80054b6:	2308      	movs	r3, #8
 80054b8:	18fb      	adds	r3, r7, r3
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d004      	beq.n	80054d0 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	3304      	adds	r3, #4
 80054ca:	0018      	movs	r0, r3
 80054cc:	f7fe fb69 	bl	8003ba2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054d0:	1d3b      	adds	r3, r7, #4
 80054d2:	0018      	movs	r0, r3
 80054d4:	f7ff ff6e 	bl	80053b4 <prvSampleTimeNow>
 80054d8:	0003      	movs	r3, r0
 80054da:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 80054dc:	2308      	movs	r3, #8
 80054de:	18fb      	adds	r3, r7, r3
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b09      	cmp	r3, #9
 80054e4:	d84f      	bhi.n	8005586 <prvProcessReceivedCommands+0x10e>
 80054e6:	009a      	lsls	r2, r3, #2
 80054e8:	4b2e      	ldr	r3, [pc, #184]	; (80055a4 <prvProcessReceivedCommands+0x12c>)
 80054ea:	18d3      	adds	r3, r2, r3
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80054f0:	2008      	movs	r0, #8
 80054f2:	183b      	adds	r3, r7, r0
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	18d1      	adds	r1, r2, r3
 80054fc:	183b      	adds	r3, r7, r0
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	69fa      	ldr	r2, [r7, #28]
 8005502:	6a38      	ldr	r0, [r7, #32]
 8005504:	f7ff ff76 	bl	80053f4 <prvInsertTimerInActiveList>
 8005508:	1e03      	subs	r3, r0, #0
 800550a:	d03c      	beq.n	8005586 <prvProcessReceivedCommands+0x10e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	6a3a      	ldr	r2, [r7, #32]
 8005512:	0010      	movs	r0, r2
 8005514:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d133      	bne.n	8005586 <prvProcessReceivedCommands+0x10e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800551e:	2308      	movs	r3, #8
 8005520:	18fb      	adds	r3, r7, r3
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	18d2      	adds	r2, r2, r3
 800552a:	6a38      	ldr	r0, [r7, #32]
 800552c:	2300      	movs	r3, #0
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	2300      	movs	r3, #0
 8005532:	2100      	movs	r1, #0
 8005534:	f7ff fe40 	bl	80051b8 <xTimerGenericCommand>
 8005538:	0003      	movs	r3, r0
 800553a:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d121      	bne.n	8005586 <prvProcessReceivedCommands+0x10e>
 8005542:	b672      	cpsid	i
 8005544:	e7fe      	b.n	8005544 <prvProcessReceivedCommands+0xcc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005546:	2308      	movs	r3, #8
 8005548:	18fb      	adds	r3, r7, r3
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <prvProcessReceivedCommands+0xe4>
 8005558:	b672      	cpsid	i
 800555a:	e7fe      	b.n	800555a <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	699a      	ldr	r2, [r3, #24]
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	18d1      	adds	r1, r2, r3
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	69fa      	ldr	r2, [r7, #28]
 8005568:	6a38      	ldr	r0, [r7, #32]
 800556a:	f7ff ff43 	bl	80053f4 <prvInsertTimerInActiveList>
					break;
 800556e:	e00a      	b.n	8005586 <prvProcessReceivedCommands+0x10e>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	222c      	movs	r2, #44	; 0x2c
 8005574:	5c9b      	ldrb	r3, [r3, r2]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d105      	bne.n	8005586 <prvProcessReceivedCommands+0x10e>
						{
							vPortFree( pxTimer );
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	0018      	movs	r0, r3
 800557e:	f000 fa8d 	bl	8005a9c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005582:	e000      	b.n	8005586 <prvProcessReceivedCommands+0x10e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005584:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005586:	4b08      	ldr	r3, [pc, #32]	; (80055a8 <prvProcessReceivedCommands+0x130>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2208      	movs	r2, #8
 800558c:	18b9      	adds	r1, r7, r2
 800558e:	2200      	movs	r2, #0
 8005590:	0018      	movs	r0, r3
 8005592:	f7fe fd5f 	bl	8004054 <xQueueReceive>
 8005596:	1e03      	subs	r3, r0, #0
 8005598:	d000      	beq.n	800559c <prvProcessReceivedCommands+0x124>
 800559a:	e771      	b.n	8005480 <prvProcessReceivedCommands+0x8>
	}
}
 800559c:	46c0      	nop			; (mov r8, r8)
 800559e:	46bd      	mov	sp, r7
 80055a0:	b00a      	add	sp, #40	; 0x28
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	08005f38 	.word	0x08005f38
 80055a8:	20000c24 	.word	0x20000c24

080055ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055b2:	e03e      	b.n	8005632 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055b4:	4b28      	ldr	r3, [pc, #160]	; (8005658 <prvSwitchTimerLists+0xac>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055be:	4b26      	ldr	r3, [pc, #152]	; (8005658 <prvSwitchTimerLists+0xac>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	3304      	adds	r3, #4
 80055cc:	0018      	movs	r0, r3
 80055ce:	f7fe fae8 	bl	8003ba2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	0010      	movs	r0, r2
 80055da:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d126      	bne.n	8005632 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	18d3      	adds	r3, r2, r3
 80055ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d90e      	bls.n	8005614 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005602:	4b15      	ldr	r3, [pc, #84]	; (8005658 <prvSwitchTimerLists+0xac>)
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3304      	adds	r3, #4
 800560a:	0019      	movs	r1, r3
 800560c:	0010      	movs	r0, r2
 800560e:	f7fe fa92 	bl	8003b36 <vListInsert>
 8005612:	e00e      	b.n	8005632 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	2300      	movs	r3, #0
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	2300      	movs	r3, #0
 800561e:	2100      	movs	r1, #0
 8005620:	f7ff fdca 	bl	80051b8 <xTimerGenericCommand>
 8005624:	0003      	movs	r3, r0
 8005626:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <prvSwitchTimerLists+0x86>
 800562e:	b672      	cpsid	i
 8005630:	e7fe      	b.n	8005630 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005632:	4b09      	ldr	r3, [pc, #36]	; (8005658 <prvSwitchTimerLists+0xac>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1bb      	bne.n	80055b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800563c:	4b06      	ldr	r3, [pc, #24]	; (8005658 <prvSwitchTimerLists+0xac>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005642:	4b06      	ldr	r3, [pc, #24]	; (800565c <prvSwitchTimerLists+0xb0>)
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	4b04      	ldr	r3, [pc, #16]	; (8005658 <prvSwitchTimerLists+0xac>)
 8005648:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800564a:	4b04      	ldr	r3, [pc, #16]	; (800565c <prvSwitchTimerLists+0xb0>)
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	601a      	str	r2, [r3, #0]
}
 8005650:	46c0      	nop			; (mov r8, r8)
 8005652:	46bd      	mov	sp, r7
 8005654:	b006      	add	sp, #24
 8005656:	bd80      	pop	{r7, pc}
 8005658:	20000c1c 	.word	0x20000c1c
 800565c:	20000c20 	.word	0x20000c20

08005660 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005666:	f000 f8db 	bl	8005820 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800566a:	4b17      	ldr	r3, [pc, #92]	; (80056c8 <prvCheckForValidListAndQueue+0x68>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d124      	bne.n	80056bc <prvCheckForValidListAndQueue+0x5c>
		{
			vListInitialise( &xActiveTimerList1 );
 8005672:	4b16      	ldr	r3, [pc, #88]	; (80056cc <prvCheckForValidListAndQueue+0x6c>)
 8005674:	0018      	movs	r0, r3
 8005676:	f7fe fa13 	bl	8003aa0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800567a:	4b15      	ldr	r3, [pc, #84]	; (80056d0 <prvCheckForValidListAndQueue+0x70>)
 800567c:	0018      	movs	r0, r3
 800567e:	f7fe fa0f 	bl	8003aa0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005682:	4b14      	ldr	r3, [pc, #80]	; (80056d4 <prvCheckForValidListAndQueue+0x74>)
 8005684:	4a11      	ldr	r2, [pc, #68]	; (80056cc <prvCheckForValidListAndQueue+0x6c>)
 8005686:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005688:	4b13      	ldr	r3, [pc, #76]	; (80056d8 <prvCheckForValidListAndQueue+0x78>)
 800568a:	4a11      	ldr	r2, [pc, #68]	; (80056d0 <prvCheckForValidListAndQueue+0x70>)
 800568c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800568e:	4913      	ldr	r1, [pc, #76]	; (80056dc <prvCheckForValidListAndQueue+0x7c>)
 8005690:	4a13      	ldr	r2, [pc, #76]	; (80056e0 <prvCheckForValidListAndQueue+0x80>)
 8005692:	2300      	movs	r3, #0
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	000b      	movs	r3, r1
 8005698:	2110      	movs	r1, #16
 800569a:	200a      	movs	r0, #10
 800569c:	f7fe fafd 	bl	8003c9a <xQueueGenericCreateStatic>
 80056a0:	0002      	movs	r2, r0
 80056a2:	4b09      	ldr	r3, [pc, #36]	; (80056c8 <prvCheckForValidListAndQueue+0x68>)
 80056a4:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80056a6:	4b08      	ldr	r3, [pc, #32]	; (80056c8 <prvCheckForValidListAndQueue+0x68>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d006      	beq.n	80056bc <prvCheckForValidListAndQueue+0x5c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80056ae:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <prvCheckForValidListAndQueue+0x68>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a0c      	ldr	r2, [pc, #48]	; (80056e4 <prvCheckForValidListAndQueue+0x84>)
 80056b4:	0011      	movs	r1, r2
 80056b6:	0018      	movs	r0, r3
 80056b8:	f7fe fe9e 	bl	80043f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056bc:	f000 f8c2 	bl	8005844 <vPortExitCritical>
}
 80056c0:	46c0      	nop			; (mov r8, r8)
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	46c0      	nop			; (mov r8, r8)
 80056c8:	20000c24 	.word	0x20000c24
 80056cc:	20000bf4 	.word	0x20000bf4
 80056d0:	20000c08 	.word	0x20000c08
 80056d4:	20000c1c 	.word	0x20000c1c
 80056d8:	20000c20 	.word	0x20000c20
 80056dc:	20000cd0 	.word	0x20000cd0
 80056e0:	20000c30 	.word	0x20000c30
 80056e4:	08005dc8 	.word	0x08005dc8

080056e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	3b04      	subs	r3, #4
 80056f8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2280      	movs	r2, #128	; 0x80
 80056fe:	0452      	lsls	r2, r2, #17
 8005700:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	3b04      	subs	r3, #4
 8005706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3b04      	subs	r3, #4
 8005712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005714:	4a08      	ldr	r2, [pc, #32]	; (8005738 <pxPortInitialiseStack+0x50>)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3b14      	subs	r3, #20
 800571e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	3b20      	subs	r3, #32
 800572a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800572c:	68fb      	ldr	r3, [r7, #12]
}
 800572e:	0018      	movs	r0, r3
 8005730:	46bd      	mov	sp, r7
 8005732:	b004      	add	sp, #16
 8005734:	bd80      	pop	{r7, pc}
 8005736:	46c0      	nop			; (mov r8, r8)
 8005738:	0800573d 	.word	0x0800573d

0800573c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005742:	2300      	movs	r3, #0
 8005744:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005746:	4b07      	ldr	r3, [pc, #28]	; (8005764 <prvTaskExitError+0x28>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3301      	adds	r3, #1
 800574c:	d001      	beq.n	8005752 <prvTaskExitError+0x16>
 800574e:	b672      	cpsid	i
 8005750:	e7fe      	b.n	8005750 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005752:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005754:	46c0      	nop			; (mov r8, r8)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0fc      	beq.n	8005756 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800575c:	46c0      	nop			; (mov r8, r8)
 800575e:	46bd      	mov	sp, r7
 8005760:	b002      	add	sp, #8
 8005762:	bd80      	pop	{r7, pc}
 8005764:	2000000c 	.word	0x2000000c

08005768 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800576c:	46c0      	nop			; (mov r8, r8)
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
	...

08005780 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005780:	4a0b      	ldr	r2, [pc, #44]	; (80057b0 <pxCurrentTCBConst2>)
 8005782:	6813      	ldr	r3, [r2, #0]
 8005784:	6818      	ldr	r0, [r3, #0]
 8005786:	3020      	adds	r0, #32
 8005788:	f380 8809 	msr	PSP, r0
 800578c:	2002      	movs	r0, #2
 800578e:	f380 8814 	msr	CONTROL, r0
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005798:	46ae      	mov	lr, r5
 800579a:	bc08      	pop	{r3}
 800579c:	bc04      	pop	{r2}
 800579e:	b662      	cpsie	i
 80057a0:	4718      	bx	r3
 80057a2:	46c0      	nop			; (mov r8, r8)
 80057a4:	46c0      	nop			; (mov r8, r8)
 80057a6:	46c0      	nop			; (mov r8, r8)
 80057a8:	46c0      	nop			; (mov r8, r8)
 80057aa:	46c0      	nop			; (mov r8, r8)
 80057ac:	46c0      	nop			; (mov r8, r8)
 80057ae:	46c0      	nop			; (mov r8, r8)

080057b0 <pxCurrentTCBConst2>:
 80057b0:	200006f4 	.word	0x200006f4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80057b4:	46c0      	nop			; (mov r8, r8)
 80057b6:	46c0      	nop			; (mov r8, r8)

080057b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80057bc:	4b0e      	ldr	r3, [pc, #56]	; (80057f8 <xPortStartScheduler+0x40>)
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	4b0d      	ldr	r3, [pc, #52]	; (80057f8 <xPortStartScheduler+0x40>)
 80057c2:	21ff      	movs	r1, #255	; 0xff
 80057c4:	0409      	lsls	r1, r1, #16
 80057c6:	430a      	orrs	r2, r1
 80057c8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80057ca:	4b0b      	ldr	r3, [pc, #44]	; (80057f8 <xPortStartScheduler+0x40>)
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	4b0a      	ldr	r3, [pc, #40]	; (80057f8 <xPortStartScheduler+0x40>)
 80057d0:	21ff      	movs	r1, #255	; 0xff
 80057d2:	0609      	lsls	r1, r1, #24
 80057d4:	430a      	orrs	r2, r1
 80057d6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80057d8:	f000 f898 	bl	800590c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80057dc:	4b07      	ldr	r3, [pc, #28]	; (80057fc <xPortStartScheduler+0x44>)
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80057e2:	f7ff ffcd 	bl	8005780 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80057e6:	f7ff f9af 	bl	8004b48 <vTaskSwitchContext>
	prvTaskExitError();
 80057ea:	f7ff ffa7 	bl	800573c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	0018      	movs	r0, r3
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	46c0      	nop			; (mov r8, r8)
 80057f8:	e000ed20 	.word	0xe000ed20
 80057fc:	2000000c 	.word	0x2000000c

08005800 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005804:	4b05      	ldr	r3, [pc, #20]	; (800581c <vPortYield+0x1c>)
 8005806:	2280      	movs	r2, #128	; 0x80
 8005808:	0552      	lsls	r2, r2, #21
 800580a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800580c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005810:	f3bf 8f6f 	isb	sy
}
 8005814:	46c0      	nop			; (mov r8, r8)
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	46c0      	nop			; (mov r8, r8)
 800581c:	e000ed04 	.word	0xe000ed04

08005820 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005824:	b672      	cpsid	i
    uxCriticalNesting++;
 8005826:	4b06      	ldr	r3, [pc, #24]	; (8005840 <vPortEnterCritical+0x20>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	1c5a      	adds	r2, r3, #1
 800582c:	4b04      	ldr	r3, [pc, #16]	; (8005840 <vPortEnterCritical+0x20>)
 800582e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005830:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005834:	f3bf 8f6f 	isb	sy
}
 8005838:	46c0      	nop			; (mov r8, r8)
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	46c0      	nop			; (mov r8, r8)
 8005840:	2000000c 	.word	0x2000000c

08005844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005848:	4b09      	ldr	r3, [pc, #36]	; (8005870 <vPortExitCritical+0x2c>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <vPortExitCritical+0x10>
 8005850:	b672      	cpsid	i
 8005852:	e7fe      	b.n	8005852 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005854:	4b06      	ldr	r3, [pc, #24]	; (8005870 <vPortExitCritical+0x2c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	1e5a      	subs	r2, r3, #1
 800585a:	4b05      	ldr	r3, [pc, #20]	; (8005870 <vPortExitCritical+0x2c>)
 800585c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800585e:	4b04      	ldr	r3, [pc, #16]	; (8005870 <vPortExitCritical+0x2c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d100      	bne.n	8005868 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8005866:	b662      	cpsie	i
    }
}
 8005868:	46c0      	nop			; (mov r8, r8)
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	46c0      	nop			; (mov r8, r8)
 8005870:	2000000c 	.word	0x2000000c

08005874 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005874:	f3ef 8010 	mrs	r0, PRIMASK
 8005878:	b672      	cpsid	i
 800587a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800587c:	46c0      	nop			; (mov r8, r8)
 800587e:	0018      	movs	r0, r3

08005880 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005880:	f380 8810 	msr	PRIMASK, r0
 8005884:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005886:	46c0      	nop			; (mov r8, r8)
	...

08005890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005890:	f3ef 8009 	mrs	r0, PSP
 8005894:	4b0e      	ldr	r3, [pc, #56]	; (80058d0 <pxCurrentTCBConst>)
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	3820      	subs	r0, #32
 800589a:	6010      	str	r0, [r2, #0]
 800589c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800589e:	4644      	mov	r4, r8
 80058a0:	464d      	mov	r5, r9
 80058a2:	4656      	mov	r6, sl
 80058a4:	465f      	mov	r7, fp
 80058a6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80058a8:	b508      	push	{r3, lr}
 80058aa:	b672      	cpsid	i
 80058ac:	f7ff f94c 	bl	8004b48 <vTaskSwitchContext>
 80058b0:	b662      	cpsie	i
 80058b2:	bc0c      	pop	{r2, r3}
 80058b4:	6811      	ldr	r1, [r2, #0]
 80058b6:	6808      	ldr	r0, [r1, #0]
 80058b8:	3010      	adds	r0, #16
 80058ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80058bc:	46a0      	mov	r8, r4
 80058be:	46a9      	mov	r9, r5
 80058c0:	46b2      	mov	sl, r6
 80058c2:	46bb      	mov	fp, r7
 80058c4:	f380 8809 	msr	PSP, r0
 80058c8:	3820      	subs	r0, #32
 80058ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80058cc:	4718      	bx	r3
 80058ce:	46c0      	nop			; (mov r8, r8)

080058d0 <pxCurrentTCBConst>:
 80058d0:	200006f4 	.word	0x200006f4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80058d4:	46c0      	nop			; (mov r8, r8)
 80058d6:	46c0      	nop			; (mov r8, r8)

080058d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80058de:	f7ff ffc9 	bl	8005874 <ulSetInterruptMaskFromISR>
 80058e2:	0003      	movs	r3, r0
 80058e4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80058e6:	f7ff f87b 	bl	80049e0 <xTaskIncrementTick>
 80058ea:	1e03      	subs	r3, r0, #0
 80058ec:	d003      	beq.n	80058f6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80058ee:	4b06      	ldr	r3, [pc, #24]	; (8005908 <SysTick_Handler+0x30>)
 80058f0:	2280      	movs	r2, #128	; 0x80
 80058f2:	0552      	lsls	r2, r2, #21
 80058f4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	0018      	movs	r0, r3
 80058fa:	f7ff ffc1 	bl	8005880 <vClearInterruptMaskFromISR>
}
 80058fe:	46c0      	nop			; (mov r8, r8)
 8005900:	46bd      	mov	sp, r7
 8005902:	b002      	add	sp, #8
 8005904:	bd80      	pop	{r7, pc}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	e000ed04 	.word	0xe000ed04

0800590c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005910:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <prvSetupTimerInterrupt+0x34>)
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005916:	4b0b      	ldr	r3, [pc, #44]	; (8005944 <prvSetupTimerInterrupt+0x38>)
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800591c:	4b0a      	ldr	r3, [pc, #40]	; (8005948 <prvSetupTimerInterrupt+0x3c>)
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	23fa      	movs	r3, #250	; 0xfa
 8005922:	0099      	lsls	r1, r3, #2
 8005924:	0010      	movs	r0, r2
 8005926:	f7fa fbef 	bl	8000108 <__udivsi3>
 800592a:	0003      	movs	r3, r0
 800592c:	001a      	movs	r2, r3
 800592e:	4b07      	ldr	r3, [pc, #28]	; (800594c <prvSetupTimerInterrupt+0x40>)
 8005930:	3a01      	subs	r2, #1
 8005932:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005934:	4b02      	ldr	r3, [pc, #8]	; (8005940 <prvSetupTimerInterrupt+0x34>)
 8005936:	2207      	movs	r2, #7
 8005938:	601a      	str	r2, [r3, #0]
}
 800593a:	46c0      	nop			; (mov r8, r8)
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	e000e010 	.word	0xe000e010
 8005944:	e000e018 	.word	0xe000e018
 8005948:	20000004 	.word	0x20000004
 800594c:	e000e014 	.word	0xe000e014

08005950 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005958:	2300      	movs	r3, #0
 800595a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800595c:	f7fe ff9a 	bl	8004894 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005960:	4b49      	ldr	r3, [pc, #292]	; (8005a88 <pvPortMalloc+0x138>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005968:	f000 f8e0 	bl	8005b2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800596c:	4b47      	ldr	r3, [pc, #284]	; (8005a8c <pvPortMalloc+0x13c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	4013      	ands	r3, r2
 8005974:	d000      	beq.n	8005978 <pvPortMalloc+0x28>
 8005976:	e079      	b.n	8005a6c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d012      	beq.n	80059a4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800597e:	2208      	movs	r2, #8
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	189b      	adds	r3, r3, r2
 8005984:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2207      	movs	r2, #7
 800598a:	4013      	ands	r3, r2
 800598c:	d00a      	beq.n	80059a4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2207      	movs	r2, #7
 8005992:	4393      	bics	r3, r2
 8005994:	3308      	adds	r3, #8
 8005996:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2207      	movs	r2, #7
 800599c:	4013      	ands	r3, r2
 800599e:	d001      	beq.n	80059a4 <pvPortMalloc+0x54>
 80059a0:	b672      	cpsid	i
 80059a2:	e7fe      	b.n	80059a2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d060      	beq.n	8005a6c <pvPortMalloc+0x11c>
 80059aa:	4b39      	ldr	r3, [pc, #228]	; (8005a90 <pvPortMalloc+0x140>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d85b      	bhi.n	8005a6c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80059b4:	4b37      	ldr	r3, [pc, #220]	; (8005a94 <pvPortMalloc+0x144>)
 80059b6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80059b8:	4b36      	ldr	r3, [pc, #216]	; (8005a94 <pvPortMalloc+0x144>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059be:	e004      	b.n	80059ca <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d903      	bls.n	80059dc <pvPortMalloc+0x8c>
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1f1      	bne.n	80059c0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80059dc:	4b2a      	ldr	r3, [pc, #168]	; (8005a88 <pvPortMalloc+0x138>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d042      	beq.n	8005a6c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2208      	movs	r2, #8
 80059ec:	189b      	adds	r3, r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	1ad2      	subs	r2, r2, r3
 8005a00:	2308      	movs	r3, #8
 8005a02:	005b      	lsls	r3, r3, #1
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d916      	bls.n	8005a36 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	18d3      	adds	r3, r2, r3
 8005a0e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2207      	movs	r2, #7
 8005a14:	4013      	ands	r3, r2
 8005a16:	d001      	beq.n	8005a1c <pvPortMalloc+0xcc>
 8005a18:	b672      	cpsid	i
 8005a1a:	e7fe      	b.n	8005a1a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	1ad2      	subs	r2, r2, r3
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	0018      	movs	r0, r3
 8005a32:	f000 f8db 	bl	8005bec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a36:	4b16      	ldr	r3, [pc, #88]	; (8005a90 <pvPortMalloc+0x140>)
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	1ad2      	subs	r2, r2, r3
 8005a40:	4b13      	ldr	r3, [pc, #76]	; (8005a90 <pvPortMalloc+0x140>)
 8005a42:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a44:	4b12      	ldr	r3, [pc, #72]	; (8005a90 <pvPortMalloc+0x140>)
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	4b13      	ldr	r3, [pc, #76]	; (8005a98 <pvPortMalloc+0x148>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d203      	bcs.n	8005a58 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a50:	4b0f      	ldr	r3, [pc, #60]	; (8005a90 <pvPortMalloc+0x140>)
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	4b10      	ldr	r3, [pc, #64]	; (8005a98 <pvPortMalloc+0x148>)
 8005a56:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	4b0b      	ldr	r3, [pc, #44]	; (8005a8c <pvPortMalloc+0x13c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	431a      	orrs	r2, r3
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a6c:	f7fe ff1e 	bl	80048ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2207      	movs	r2, #7
 8005a74:	4013      	ands	r3, r2
 8005a76:	d001      	beq.n	8005a7c <pvPortMalloc+0x12c>
 8005a78:	b672      	cpsid	i
 8005a7a:	e7fe      	b.n	8005a7a <pvPortMalloc+0x12a>
	return pvReturn;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
}
 8005a7e:	0018      	movs	r0, r3
 8005a80:	46bd      	mov	sp, r7
 8005a82:	b006      	add	sp, #24
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	20001928 	.word	0x20001928
 8005a8c:	20001934 	.word	0x20001934
 8005a90:	2000192c 	.word	0x2000192c
 8005a94:	20001920 	.word	0x20001920
 8005a98:	20001930 	.word	0x20001930

08005a9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d035      	beq.n	8005b1a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005aae:	2308      	movs	r3, #8
 8005ab0:	425b      	negs	r3, r3
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	18d3      	adds	r3, r2, r3
 8005ab6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	4b18      	ldr	r3, [pc, #96]	; (8005b24 <vPortFree+0x88>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	d101      	bne.n	8005acc <vPortFree+0x30>
 8005ac8:	b672      	cpsid	i
 8005aca:	e7fe      	b.n	8005aca <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <vPortFree+0x3c>
 8005ad4:	b672      	cpsid	i
 8005ad6:	e7fe      	b.n	8005ad6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	4b11      	ldr	r3, [pc, #68]	; (8005b24 <vPortFree+0x88>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	d01a      	beq.n	8005b1a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d116      	bne.n	8005b1a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	4b0c      	ldr	r3, [pc, #48]	; (8005b24 <vPortFree+0x88>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	43db      	mvns	r3, r3
 8005af6:	401a      	ands	r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005afc:	f7fe feca 	bl	8004894 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	4b08      	ldr	r3, [pc, #32]	; (8005b28 <vPortFree+0x8c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	18d2      	adds	r2, r2, r3
 8005b0a:	4b07      	ldr	r3, [pc, #28]	; (8005b28 <vPortFree+0x8c>)
 8005b0c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	0018      	movs	r0, r3
 8005b12:	f000 f86b 	bl	8005bec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005b16:	f7fe fec9 	bl	80048ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b1a:	46c0      	nop			; (mov r8, r8)
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	b004      	add	sp, #16
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	46c0      	nop			; (mov r8, r8)
 8005b24:	20001934 	.word	0x20001934
 8005b28:	2000192c 	.word	0x2000192c

08005b2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b32:	23c0      	movs	r3, #192	; 0xc0
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b38:	4b26      	ldr	r3, [pc, #152]	; (8005bd4 <prvHeapInit+0xa8>)
 8005b3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2207      	movs	r2, #7
 8005b40:	4013      	ands	r3, r2
 8005b42:	d00c      	beq.n	8005b5e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	3307      	adds	r3, #7
 8005b48:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2207      	movs	r2, #7
 8005b4e:	4393      	bics	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	1ad2      	subs	r2, r2, r3
 8005b58:	4b1e      	ldr	r3, [pc, #120]	; (8005bd4 <prvHeapInit+0xa8>)
 8005b5a:	18d3      	adds	r3, r2, r3
 8005b5c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b62:	4b1d      	ldr	r3, [pc, #116]	; (8005bd8 <prvHeapInit+0xac>)
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b68:	4b1b      	ldr	r3, [pc, #108]	; (8005bd8 <prvHeapInit+0xac>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	18d3      	adds	r3, r2, r3
 8005b74:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b76:	2208      	movs	r2, #8
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	1a9b      	subs	r3, r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2207      	movs	r2, #7
 8005b82:	4393      	bics	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	4b14      	ldr	r3, [pc, #80]	; (8005bdc <prvHeapInit+0xb0>)
 8005b8a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005b8c:	4b13      	ldr	r3, [pc, #76]	; (8005bdc <prvHeapInit+0xb0>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2200      	movs	r2, #0
 8005b92:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b94:	4b11      	ldr	r3, [pc, #68]	; (8005bdc <prvHeapInit+0xb0>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	1ad2      	subs	r2, r2, r3
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005baa:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <prvHeapInit+0xb0>)
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	4b0a      	ldr	r3, [pc, #40]	; (8005be0 <prvHeapInit+0xb4>)
 8005bb8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	4b09      	ldr	r3, [pc, #36]	; (8005be4 <prvHeapInit+0xb8>)
 8005bc0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005bc2:	4b09      	ldr	r3, [pc, #36]	; (8005be8 <prvHeapInit+0xbc>)
 8005bc4:	2280      	movs	r2, #128	; 0x80
 8005bc6:	0612      	lsls	r2, r2, #24
 8005bc8:	601a      	str	r2, [r3, #0]
}
 8005bca:	46c0      	nop			; (mov r8, r8)
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	b004      	add	sp, #16
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	46c0      	nop			; (mov r8, r8)
 8005bd4:	20000d20 	.word	0x20000d20
 8005bd8:	20001920 	.word	0x20001920
 8005bdc:	20001928 	.word	0x20001928
 8005be0:	20001930 	.word	0x20001930
 8005be4:	2000192c 	.word	0x2000192c
 8005be8:	20001934 	.word	0x20001934

08005bec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005bf4:	4b27      	ldr	r3, [pc, #156]	; (8005c94 <prvInsertBlockIntoFreeList+0xa8>)
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	e002      	b.n	8005c00 <prvInsertBlockIntoFreeList+0x14>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d8f7      	bhi.n	8005bfa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	18d3      	adds	r3, r2, r3
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d108      	bne.n	8005c2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	18d2      	adds	r2, r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	18d2      	adds	r2, r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d118      	bne.n	8005c74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	4b14      	ldr	r3, [pc, #80]	; (8005c98 <prvInsertBlockIntoFreeList+0xac>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d00d      	beq.n	8005c6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	18d2      	adds	r2, r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	e008      	b.n	8005c7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c6a:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <prvInsertBlockIntoFreeList+0xac>)
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	e003      	b.n	8005c7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d002      	beq.n	8005c8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c8a:	46c0      	nop			; (mov r8, r8)
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	b004      	add	sp, #16
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	46c0      	nop			; (mov r8, r8)
 8005c94:	20001920 	.word	0x20001920
 8005c98:	20001928 	.word	0x20001928

08005c9c <__libc_init_array>:
 8005c9c:	b570      	push	{r4, r5, r6, lr}
 8005c9e:	2600      	movs	r6, #0
 8005ca0:	4d0c      	ldr	r5, [pc, #48]	; (8005cd4 <__libc_init_array+0x38>)
 8005ca2:	4c0d      	ldr	r4, [pc, #52]	; (8005cd8 <__libc_init_array+0x3c>)
 8005ca4:	1b64      	subs	r4, r4, r5
 8005ca6:	10a4      	asrs	r4, r4, #2
 8005ca8:	42a6      	cmp	r6, r4
 8005caa:	d109      	bne.n	8005cc0 <__libc_init_array+0x24>
 8005cac:	2600      	movs	r6, #0
 8005cae:	f000 f82b 	bl	8005d08 <_init>
 8005cb2:	4d0a      	ldr	r5, [pc, #40]	; (8005cdc <__libc_init_array+0x40>)
 8005cb4:	4c0a      	ldr	r4, [pc, #40]	; (8005ce0 <__libc_init_array+0x44>)
 8005cb6:	1b64      	subs	r4, r4, r5
 8005cb8:	10a4      	asrs	r4, r4, #2
 8005cba:	42a6      	cmp	r6, r4
 8005cbc:	d105      	bne.n	8005cca <__libc_init_array+0x2e>
 8005cbe:	bd70      	pop	{r4, r5, r6, pc}
 8005cc0:	00b3      	lsls	r3, r6, #2
 8005cc2:	58eb      	ldr	r3, [r5, r3]
 8005cc4:	4798      	blx	r3
 8005cc6:	3601      	adds	r6, #1
 8005cc8:	e7ee      	b.n	8005ca8 <__libc_init_array+0xc>
 8005cca:	00b3      	lsls	r3, r6, #2
 8005ccc:	58eb      	ldr	r3, [r5, r3]
 8005cce:	4798      	blx	r3
 8005cd0:	3601      	adds	r6, #1
 8005cd2:	e7f2      	b.n	8005cba <__libc_init_array+0x1e>
 8005cd4:	08005f60 	.word	0x08005f60
 8005cd8:	08005f60 	.word	0x08005f60
 8005cdc:	08005f60 	.word	0x08005f60
 8005ce0:	08005f64 	.word	0x08005f64

08005ce4 <memcpy>:
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	b510      	push	{r4, lr}
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d100      	bne.n	8005cee <memcpy+0xa>
 8005cec:	bd10      	pop	{r4, pc}
 8005cee:	5ccc      	ldrb	r4, [r1, r3]
 8005cf0:	54c4      	strb	r4, [r0, r3]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	e7f8      	b.n	8005ce8 <memcpy+0x4>

08005cf6 <memset>:
 8005cf6:	0003      	movs	r3, r0
 8005cf8:	1812      	adds	r2, r2, r0
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d100      	bne.n	8005d00 <memset+0xa>
 8005cfe:	4770      	bx	lr
 8005d00:	7019      	strb	r1, [r3, #0]
 8005d02:	3301      	adds	r3, #1
 8005d04:	e7f9      	b.n	8005cfa <memset+0x4>
	...

08005d08 <_init>:
 8005d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0a:	46c0      	nop			; (mov r8, r8)
 8005d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d0e:	bc08      	pop	{r3}
 8005d10:	469e      	mov	lr, r3
 8005d12:	4770      	bx	lr

08005d14 <_fini>:
 8005d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d16:	46c0      	nop			; (mov r8, r8)
 8005d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1a:	bc08      	pop	{r3}
 8005d1c:	469e      	mov	lr, r3
 8005d1e:	4770      	bx	lr
