
TaggerRetrofitSTM32F070CBT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c00  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08005cc0  08005cc0  00015cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ecc  08005ecc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005ecc  08005ecc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ecc  08005ecc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ecc  08005ecc  00015ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ed0  08005ed0  00015ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005ed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a8c  20000010  08005ee4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a9c  08005ee4  00021a9c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136e7  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a3f  00000000  00000000  0003371f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001188  00000000  00000000  00036160  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001048  00000000  00000000  000372e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002700  00000000  00000000  00038330  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e356  00000000  00000000  0003aa30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d675  00000000  00000000  00048d86  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b63fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f2c  00000000  00000000  000b6478  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005ca8 	.word	0x08005ca8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08005ca8 	.word	0x08005ca8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f000 f8d3 	bl	80003dc <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 f82b 	bl	800029c <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 f8c5 	bl	80003dc <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 f8bb 	bl	80003dc <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 f84d 	bl	8000314 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 f843 	bl	8000314 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__eqdf2>:
 800029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029e:	464f      	mov	r7, r9
 80002a0:	4646      	mov	r6, r8
 80002a2:	46d6      	mov	lr, sl
 80002a4:	4684      	mov	ip, r0
 80002a6:	b5c0      	push	{r6, r7, lr}
 80002a8:	4680      	mov	r8, r0
 80002aa:	4e19      	ldr	r6, [pc, #100]	; (8000310 <__eqdf2+0x74>)
 80002ac:	0318      	lsls	r0, r3, #12
 80002ae:	030f      	lsls	r7, r1, #12
 80002b0:	004d      	lsls	r5, r1, #1
 80002b2:	0b00      	lsrs	r0, r0, #12
 80002b4:	005c      	lsls	r4, r3, #1
 80002b6:	4682      	mov	sl, r0
 80002b8:	0b3f      	lsrs	r7, r7, #12
 80002ba:	0d6d      	lsrs	r5, r5, #21
 80002bc:	0fc9      	lsrs	r1, r1, #31
 80002be:	4691      	mov	r9, r2
 80002c0:	0d64      	lsrs	r4, r4, #21
 80002c2:	0fdb      	lsrs	r3, r3, #31
 80002c4:	2001      	movs	r0, #1
 80002c6:	42b5      	cmp	r5, r6
 80002c8:	d00a      	beq.n	80002e0 <__eqdf2+0x44>
 80002ca:	42b4      	cmp	r4, r6
 80002cc:	d003      	beq.n	80002d6 <__eqdf2+0x3a>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d101      	bne.n	80002d6 <__eqdf2+0x3a>
 80002d2:	4557      	cmp	r7, sl
 80002d4:	d00c      	beq.n	80002f0 <__eqdf2+0x54>
 80002d6:	bc1c      	pop	{r2, r3, r4}
 80002d8:	4690      	mov	r8, r2
 80002da:	4699      	mov	r9, r3
 80002dc:	46a2      	mov	sl, r4
 80002de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002e0:	4666      	mov	r6, ip
 80002e2:	433e      	orrs	r6, r7
 80002e4:	d1f7      	bne.n	80002d6 <__eqdf2+0x3a>
 80002e6:	42ac      	cmp	r4, r5
 80002e8:	d1f5      	bne.n	80002d6 <__eqdf2+0x3a>
 80002ea:	4654      	mov	r4, sl
 80002ec:	4314      	orrs	r4, r2
 80002ee:	d1f2      	bne.n	80002d6 <__eqdf2+0x3a>
 80002f0:	2001      	movs	r0, #1
 80002f2:	45c8      	cmp	r8, r9
 80002f4:	d1ef      	bne.n	80002d6 <__eqdf2+0x3a>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	d007      	beq.n	800030a <__eqdf2+0x6e>
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d1eb      	bne.n	80002d6 <__eqdf2+0x3a>
 80002fe:	4663      	mov	r3, ip
 8000300:	431f      	orrs	r7, r3
 8000302:	0038      	movs	r0, r7
 8000304:	1e47      	subs	r7, r0, #1
 8000306:	41b8      	sbcs	r0, r7
 8000308:	e7e5      	b.n	80002d6 <__eqdf2+0x3a>
 800030a:	2000      	movs	r0, #0
 800030c:	e7e3      	b.n	80002d6 <__eqdf2+0x3a>
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	000007ff 	.word	0x000007ff

08000314 <__gedf2>:
 8000314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000316:	464f      	mov	r7, r9
 8000318:	4646      	mov	r6, r8
 800031a:	46d6      	mov	lr, sl
 800031c:	004d      	lsls	r5, r1, #1
 800031e:	b5c0      	push	{r6, r7, lr}
 8000320:	030e      	lsls	r6, r1, #12
 8000322:	0fc9      	lsrs	r1, r1, #31
 8000324:	468a      	mov	sl, r1
 8000326:	492c      	ldr	r1, [pc, #176]	; (80003d8 <__gedf2+0xc4>)
 8000328:	031f      	lsls	r7, r3, #12
 800032a:	005c      	lsls	r4, r3, #1
 800032c:	4680      	mov	r8, r0
 800032e:	0b36      	lsrs	r6, r6, #12
 8000330:	0d6d      	lsrs	r5, r5, #21
 8000332:	4691      	mov	r9, r2
 8000334:	0b3f      	lsrs	r7, r7, #12
 8000336:	0d64      	lsrs	r4, r4, #21
 8000338:	0fdb      	lsrs	r3, r3, #31
 800033a:	428d      	cmp	r5, r1
 800033c:	d01e      	beq.n	800037c <__gedf2+0x68>
 800033e:	428c      	cmp	r4, r1
 8000340:	d016      	beq.n	8000370 <__gedf2+0x5c>
 8000342:	2d00      	cmp	r5, #0
 8000344:	d11e      	bne.n	8000384 <__gedf2+0x70>
 8000346:	4330      	orrs	r0, r6
 8000348:	4684      	mov	ip, r0
 800034a:	2c00      	cmp	r4, #0
 800034c:	d101      	bne.n	8000352 <__gedf2+0x3e>
 800034e:	433a      	orrs	r2, r7
 8000350:	d023      	beq.n	800039a <__gedf2+0x86>
 8000352:	4662      	mov	r2, ip
 8000354:	2a00      	cmp	r2, #0
 8000356:	d01a      	beq.n	800038e <__gedf2+0x7a>
 8000358:	459a      	cmp	sl, r3
 800035a:	d029      	beq.n	80003b0 <__gedf2+0x9c>
 800035c:	4651      	mov	r1, sl
 800035e:	2002      	movs	r0, #2
 8000360:	3901      	subs	r1, #1
 8000362:	4008      	ands	r0, r1
 8000364:	3801      	subs	r0, #1
 8000366:	bc1c      	pop	{r2, r3, r4}
 8000368:	4690      	mov	r8, r2
 800036a:	4699      	mov	r9, r3
 800036c:	46a2      	mov	sl, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	0039      	movs	r1, r7
 8000372:	4311      	orrs	r1, r2
 8000374:	d0e5      	beq.n	8000342 <__gedf2+0x2e>
 8000376:	2002      	movs	r0, #2
 8000378:	4240      	negs	r0, r0
 800037a:	e7f4      	b.n	8000366 <__gedf2+0x52>
 800037c:	4330      	orrs	r0, r6
 800037e:	d1fa      	bne.n	8000376 <__gedf2+0x62>
 8000380:	42ac      	cmp	r4, r5
 8000382:	d00f      	beq.n	80003a4 <__gedf2+0x90>
 8000384:	2c00      	cmp	r4, #0
 8000386:	d10f      	bne.n	80003a8 <__gedf2+0x94>
 8000388:	433a      	orrs	r2, r7
 800038a:	d0e7      	beq.n	800035c <__gedf2+0x48>
 800038c:	e00c      	b.n	80003a8 <__gedf2+0x94>
 800038e:	2201      	movs	r2, #1
 8000390:	3b01      	subs	r3, #1
 8000392:	4393      	bics	r3, r2
 8000394:	0018      	movs	r0, r3
 8000396:	3001      	adds	r0, #1
 8000398:	e7e5      	b.n	8000366 <__gedf2+0x52>
 800039a:	4663      	mov	r3, ip
 800039c:	2000      	movs	r0, #0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0e1      	beq.n	8000366 <__gedf2+0x52>
 80003a2:	e7db      	b.n	800035c <__gedf2+0x48>
 80003a4:	433a      	orrs	r2, r7
 80003a6:	d1e6      	bne.n	8000376 <__gedf2+0x62>
 80003a8:	459a      	cmp	sl, r3
 80003aa:	d1d7      	bne.n	800035c <__gedf2+0x48>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	dcd5      	bgt.n	800035c <__gedf2+0x48>
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	db05      	blt.n	80003c0 <__gedf2+0xac>
 80003b4:	42be      	cmp	r6, r7
 80003b6:	d8d1      	bhi.n	800035c <__gedf2+0x48>
 80003b8:	d008      	beq.n	80003cc <__gedf2+0xb8>
 80003ba:	2000      	movs	r0, #0
 80003bc:	42be      	cmp	r6, r7
 80003be:	d2d2      	bcs.n	8000366 <__gedf2+0x52>
 80003c0:	4650      	mov	r0, sl
 80003c2:	2301      	movs	r3, #1
 80003c4:	3801      	subs	r0, #1
 80003c6:	4398      	bics	r0, r3
 80003c8:	3001      	adds	r0, #1
 80003ca:	e7cc      	b.n	8000366 <__gedf2+0x52>
 80003cc:	45c8      	cmp	r8, r9
 80003ce:	d8c5      	bhi.n	800035c <__gedf2+0x48>
 80003d0:	2000      	movs	r0, #0
 80003d2:	45c8      	cmp	r8, r9
 80003d4:	d3f4      	bcc.n	80003c0 <__gedf2+0xac>
 80003d6:	e7c6      	b.n	8000366 <__gedf2+0x52>
 80003d8:	000007ff 	.word	0x000007ff

080003dc <__ledf2>:
 80003dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003de:	464f      	mov	r7, r9
 80003e0:	4646      	mov	r6, r8
 80003e2:	46d6      	mov	lr, sl
 80003e4:	004d      	lsls	r5, r1, #1
 80003e6:	b5c0      	push	{r6, r7, lr}
 80003e8:	030e      	lsls	r6, r1, #12
 80003ea:	0fc9      	lsrs	r1, r1, #31
 80003ec:	468a      	mov	sl, r1
 80003ee:	492e      	ldr	r1, [pc, #184]	; (80004a8 <__ledf2+0xcc>)
 80003f0:	031f      	lsls	r7, r3, #12
 80003f2:	005c      	lsls	r4, r3, #1
 80003f4:	4680      	mov	r8, r0
 80003f6:	0b36      	lsrs	r6, r6, #12
 80003f8:	0d6d      	lsrs	r5, r5, #21
 80003fa:	4691      	mov	r9, r2
 80003fc:	0b3f      	lsrs	r7, r7, #12
 80003fe:	0d64      	lsrs	r4, r4, #21
 8000400:	0fdb      	lsrs	r3, r3, #31
 8000402:	428d      	cmp	r5, r1
 8000404:	d018      	beq.n	8000438 <__ledf2+0x5c>
 8000406:	428c      	cmp	r4, r1
 8000408:	d011      	beq.n	800042e <__ledf2+0x52>
 800040a:	2d00      	cmp	r5, #0
 800040c:	d118      	bne.n	8000440 <__ledf2+0x64>
 800040e:	4330      	orrs	r0, r6
 8000410:	4684      	mov	ip, r0
 8000412:	2c00      	cmp	r4, #0
 8000414:	d11e      	bne.n	8000454 <__ledf2+0x78>
 8000416:	433a      	orrs	r2, r7
 8000418:	d11c      	bne.n	8000454 <__ledf2+0x78>
 800041a:	4663      	mov	r3, ip
 800041c:	2000      	movs	r0, #0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d030      	beq.n	8000484 <__ledf2+0xa8>
 8000422:	4651      	mov	r1, sl
 8000424:	2002      	movs	r0, #2
 8000426:	3901      	subs	r1, #1
 8000428:	4008      	ands	r0, r1
 800042a:	3801      	subs	r0, #1
 800042c:	e02a      	b.n	8000484 <__ledf2+0xa8>
 800042e:	0039      	movs	r1, r7
 8000430:	4311      	orrs	r1, r2
 8000432:	d0ea      	beq.n	800040a <__ledf2+0x2e>
 8000434:	2002      	movs	r0, #2
 8000436:	e025      	b.n	8000484 <__ledf2+0xa8>
 8000438:	4330      	orrs	r0, r6
 800043a:	d1fb      	bne.n	8000434 <__ledf2+0x58>
 800043c:	42ac      	cmp	r4, r5
 800043e:	d026      	beq.n	800048e <__ledf2+0xb2>
 8000440:	2c00      	cmp	r4, #0
 8000442:	d126      	bne.n	8000492 <__ledf2+0xb6>
 8000444:	433a      	orrs	r2, r7
 8000446:	d124      	bne.n	8000492 <__ledf2+0xb6>
 8000448:	4651      	mov	r1, sl
 800044a:	2002      	movs	r0, #2
 800044c:	3901      	subs	r1, #1
 800044e:	4008      	ands	r0, r1
 8000450:	3801      	subs	r0, #1
 8000452:	e017      	b.n	8000484 <__ledf2+0xa8>
 8000454:	4662      	mov	r2, ip
 8000456:	2a00      	cmp	r2, #0
 8000458:	d00f      	beq.n	800047a <__ledf2+0x9e>
 800045a:	459a      	cmp	sl, r3
 800045c:	d1e1      	bne.n	8000422 <__ledf2+0x46>
 800045e:	42a5      	cmp	r5, r4
 8000460:	db05      	blt.n	800046e <__ledf2+0x92>
 8000462:	42be      	cmp	r6, r7
 8000464:	d8dd      	bhi.n	8000422 <__ledf2+0x46>
 8000466:	d019      	beq.n	800049c <__ledf2+0xc0>
 8000468:	2000      	movs	r0, #0
 800046a:	42be      	cmp	r6, r7
 800046c:	d20a      	bcs.n	8000484 <__ledf2+0xa8>
 800046e:	4650      	mov	r0, sl
 8000470:	2301      	movs	r3, #1
 8000472:	3801      	subs	r0, #1
 8000474:	4398      	bics	r0, r3
 8000476:	3001      	adds	r0, #1
 8000478:	e004      	b.n	8000484 <__ledf2+0xa8>
 800047a:	2201      	movs	r2, #1
 800047c:	3b01      	subs	r3, #1
 800047e:	4393      	bics	r3, r2
 8000480:	0018      	movs	r0, r3
 8000482:	3001      	adds	r0, #1
 8000484:	bc1c      	pop	{r2, r3, r4}
 8000486:	4690      	mov	r8, r2
 8000488:	4699      	mov	r9, r3
 800048a:	46a2      	mov	sl, r4
 800048c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800048e:	433a      	orrs	r2, r7
 8000490:	d1d0      	bne.n	8000434 <__ledf2+0x58>
 8000492:	459a      	cmp	sl, r3
 8000494:	d1c5      	bne.n	8000422 <__ledf2+0x46>
 8000496:	42a5      	cmp	r5, r4
 8000498:	dcc3      	bgt.n	8000422 <__ledf2+0x46>
 800049a:	e7e0      	b.n	800045e <__ledf2+0x82>
 800049c:	45c8      	cmp	r8, r9
 800049e:	d8c0      	bhi.n	8000422 <__ledf2+0x46>
 80004a0:	2000      	movs	r0, #0
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d3e3      	bcc.n	800046e <__ledf2+0x92>
 80004a6:	e7ed      	b.n	8000484 <__ledf2+0xa8>
 80004a8:	000007ff 	.word	0x000007ff

080004ac <__aeabi_i2d>:
 80004ac:	b570      	push	{r4, r5, r6, lr}
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d02d      	beq.n	800050e <__aeabi_i2d+0x62>
 80004b2:	17c3      	asrs	r3, r0, #31
 80004b4:	18c5      	adds	r5, r0, r3
 80004b6:	405d      	eors	r5, r3
 80004b8:	0fc4      	lsrs	r4, r0, #31
 80004ba:	0028      	movs	r0, r5
 80004bc:	f000 f830 	bl	8000520 <__clzsi2>
 80004c0:	4b15      	ldr	r3, [pc, #84]	; (8000518 <__aeabi_i2d+0x6c>)
 80004c2:	1a1b      	subs	r3, r3, r0
 80004c4:	055b      	lsls	r3, r3, #21
 80004c6:	0d5b      	lsrs	r3, r3, #21
 80004c8:	280a      	cmp	r0, #10
 80004ca:	dd15      	ble.n	80004f8 <__aeabi_i2d+0x4c>
 80004cc:	380b      	subs	r0, #11
 80004ce:	4085      	lsls	r5, r0
 80004d0:	2200      	movs	r2, #0
 80004d2:	032d      	lsls	r5, r5, #12
 80004d4:	0b2d      	lsrs	r5, r5, #12
 80004d6:	2100      	movs	r1, #0
 80004d8:	0010      	movs	r0, r2
 80004da:	032d      	lsls	r5, r5, #12
 80004dc:	0d0a      	lsrs	r2, r1, #20
 80004de:	0b2d      	lsrs	r5, r5, #12
 80004e0:	0512      	lsls	r2, r2, #20
 80004e2:	432a      	orrs	r2, r5
 80004e4:	4d0d      	ldr	r5, [pc, #52]	; (800051c <__aeabi_i2d+0x70>)
 80004e6:	051b      	lsls	r3, r3, #20
 80004e8:	402a      	ands	r2, r5
 80004ea:	4313      	orrs	r3, r2
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	07e4      	lsls	r4, r4, #31
 80004f0:	085b      	lsrs	r3, r3, #1
 80004f2:	4323      	orrs	r3, r4
 80004f4:	0019      	movs	r1, r3
 80004f6:	bd70      	pop	{r4, r5, r6, pc}
 80004f8:	0002      	movs	r2, r0
 80004fa:	0029      	movs	r1, r5
 80004fc:	3215      	adds	r2, #21
 80004fe:	4091      	lsls	r1, r2
 8000500:	000a      	movs	r2, r1
 8000502:	210b      	movs	r1, #11
 8000504:	1a08      	subs	r0, r1, r0
 8000506:	40c5      	lsrs	r5, r0
 8000508:	032d      	lsls	r5, r5, #12
 800050a:	0b2d      	lsrs	r5, r5, #12
 800050c:	e7e3      	b.n	80004d6 <__aeabi_i2d+0x2a>
 800050e:	2400      	movs	r4, #0
 8000510:	2300      	movs	r3, #0
 8000512:	2500      	movs	r5, #0
 8000514:	2200      	movs	r2, #0
 8000516:	e7de      	b.n	80004d6 <__aeabi_i2d+0x2a>
 8000518:	0000041e 	.word	0x0000041e
 800051c:	800fffff 	.word	0x800fffff

08000520 <__clzsi2>:
 8000520:	211c      	movs	r1, #28
 8000522:	2301      	movs	r3, #1
 8000524:	041b      	lsls	r3, r3, #16
 8000526:	4298      	cmp	r0, r3
 8000528:	d301      	bcc.n	800052e <__clzsi2+0xe>
 800052a:	0c00      	lsrs	r0, r0, #16
 800052c:	3910      	subs	r1, #16
 800052e:	0a1b      	lsrs	r3, r3, #8
 8000530:	4298      	cmp	r0, r3
 8000532:	d301      	bcc.n	8000538 <__clzsi2+0x18>
 8000534:	0a00      	lsrs	r0, r0, #8
 8000536:	3908      	subs	r1, #8
 8000538:	091b      	lsrs	r3, r3, #4
 800053a:	4298      	cmp	r0, r3
 800053c:	d301      	bcc.n	8000542 <__clzsi2+0x22>
 800053e:	0900      	lsrs	r0, r0, #4
 8000540:	3904      	subs	r1, #4
 8000542:	a202      	add	r2, pc, #8	; (adr r2, 800054c <__clzsi2+0x2c>)
 8000544:	5c10      	ldrb	r0, [r2, r0]
 8000546:	1840      	adds	r0, r0, r1
 8000548:	4770      	bx	lr
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	02020304 	.word	0x02020304
 8000550:	01010101 	.word	0x01010101
	...

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000560:	f000 fdb2 	bl	80010c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000564:	f000 f860 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000568:	f000 f92c 	bl	80007c4 <MX_GPIO_Init>
  MX_TIM3_Init();
 800056c:	f000 f8a8 	bl	80006c0 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000570:	f000 f908 	bl	8000784 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	//Start Timer
	HAL_TIM_Base_Start_IT(&htim6);
 8000574:	4b1d      	ldr	r3, [pc, #116]	; (80005ec <main+0x90>)
 8000576:	0018      	movs	r0, r3
 8000578:	f001 fd1a 	bl	8001fb0 <HAL_TIM_Base_Start_IT>
	// Start the 38kHz PWM output
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800057c:	4b1c      	ldr	r3, [pc, #112]	; (80005f0 <main+0x94>)
 800057e:	2100      	movs	r1, #0
 8000580:	0018      	movs	r0, r3
 8000582:	f001 fdb1 	bl	80020e8 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000586:	f003 f87b 	bl	8003680 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of LED_BlinkStyle */
  LED_BlinkStyleHandle = osMessageQueueNew (1, sizeof(LED_BlinkProfile), &LED_BlinkStyle_attributes);
 800058a:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <main+0x98>)
 800058c:	001a      	movs	r2, r3
 800058e:	2101      	movs	r1, #1
 8000590:	2001      	movs	r0, #1
 8000592:	f003 f99f 	bl	80038d4 <osMessageQueueNew>
 8000596:	0002      	movs	r2, r0
 8000598:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <main+0x9c>)
 800059a:	601a      	str	r2, [r3, #0]

  /* creation of tagSignature */
  tagSignatureHandle = osMessageQueueNew (1, sizeof(LTTO_IR_SIGNATURE_t), &tagSignature_attributes);
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <main+0xa0>)
 800059e:	001a      	movs	r2, r3
 80005a0:	2104      	movs	r1, #4
 80005a2:	2001      	movs	r0, #1
 80005a4:	f003 f996 	bl	80038d4 <osMessageQueueNew>
 80005a8:	0002      	movs	r2, r0
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <main+0xa4>)
 80005ac:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ae:	4a15      	ldr	r2, [pc, #84]	; (8000604 <main+0xa8>)
 80005b0:	4b15      	ldr	r3, [pc, #84]	; (8000608 <main+0xac>)
 80005b2:	2100      	movs	r1, #0
 80005b4:	0018      	movs	r0, r3
 80005b6:	f003 f8bd 	bl	8003734 <osThreadNew>
 80005ba:	0002      	movs	r2, r0
 80005bc:	4b13      	ldr	r3, [pc, #76]	; (800060c <main+0xb0>)
 80005be:	601a      	str	r2, [r3, #0]

  /* creation of emitTag */
  emitTagHandle = osThreadNew(StartEmitTag, NULL, &emitTag_attributes);
 80005c0:	4a13      	ldr	r2, [pc, #76]	; (8000610 <main+0xb4>)
 80005c2:	4b14      	ldr	r3, [pc, #80]	; (8000614 <main+0xb8>)
 80005c4:	2100      	movs	r1, #0
 80005c6:	0018      	movs	r0, r3
 80005c8:	f003 f8b4 	bl	8003734 <osThreadNew>
 80005cc:	0002      	movs	r2, r0
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <main+0xbc>)
 80005d0:	601a      	str	r2, [r3, #0]

  /* creation of LED */
  LEDHandle = osThreadNew(StartLEDFlash, NULL, &LED_attributes);
 80005d2:	4a12      	ldr	r2, [pc, #72]	; (800061c <main+0xc0>)
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <main+0xc4>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	0018      	movs	r0, r3
 80005da:	f003 f8ab 	bl	8003734 <osThreadNew>
 80005de:	0002      	movs	r2, r0
 80005e0:	4b10      	ldr	r3, [pc, #64]	; (8000624 <main+0xc8>)
 80005e2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e4:	f003 f878 	bl	80036d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80005e8:	e7fe      	b.n	80005e8 <main+0x8c>
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	20001990 	.word	0x20001990
 80005f0:	20001940 	.word	0x20001940
 80005f4:	08005dcc 	.word	0x08005dcc
 80005f8:	2000198c 	.word	0x2000198c
 80005fc:	08005de4 	.word	0x08005de4
 8000600:	2000193c 	.word	0x2000193c
 8000604:	08005d60 	.word	0x08005d60
 8000608:	080008d9 	.word	0x080008d9
 800060c:	20001938 	.word	0x20001938
 8000610:	08005d84 	.word	0x08005d84
 8000614:	08000a25 	.word	0x08000a25
 8000618:	200019d8 	.word	0x200019d8
 800061c:	08005da8 	.word	0x08005da8
 8000620:	08000b85 	.word	0x08000b85
 8000624:	200019dc 	.word	0x200019dc

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b590      	push	{r4, r7, lr}
 800062a:	b091      	sub	sp, #68	; 0x44
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	2410      	movs	r4, #16
 8000630:	193b      	adds	r3, r7, r4
 8000632:	0018      	movs	r0, r3
 8000634:	2330      	movs	r3, #48	; 0x30
 8000636:	001a      	movs	r2, r3
 8000638:	2100      	movs	r1, #0
 800063a:	f005 fb2c 	bl	8005c96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063e:	003b      	movs	r3, r7
 8000640:	0018      	movs	r0, r3
 8000642:	2310      	movs	r3, #16
 8000644:	001a      	movs	r2, r3
 8000646:	2100      	movs	r1, #0
 8000648:	f005 fb25 	bl	8005c96 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	0021      	movs	r1, r4
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2202      	movs	r2, #2
 8000652:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2201      	movs	r2, #1
 8000658:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2210      	movs	r2, #16
 800065e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2202      	movs	r2, #2
 8000664:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2280      	movs	r2, #128	; 0x80
 800066a:	0212      	lsls	r2, r2, #8
 800066c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2280      	movs	r2, #128	; 0x80
 8000672:	0352      	lsls	r2, r2, #13
 8000674:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2200      	movs	r2, #0
 800067a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	187b      	adds	r3, r7, r1
 800067e:	0018      	movs	r0, r3
 8000680:	f000 ffaa 	bl	80015d8 <HAL_RCC_OscConfig>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000688:	f000 fbbe 	bl	8000e08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	003b      	movs	r3, r7
 800068e:	2207      	movs	r2, #7
 8000690:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	003b      	movs	r3, r7
 8000694:	2202      	movs	r2, #2
 8000696:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	003b      	movs	r3, r7
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069e:	003b      	movs	r3, r7
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006a4:	003b      	movs	r3, r7
 80006a6:	2101      	movs	r1, #1
 80006a8:	0018      	movs	r0, r3
 80006aa:	f001 fab3 	bl	8001c14 <HAL_RCC_ClockConfig>
 80006ae:	1e03      	subs	r3, r0, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006b2:	f000 fba9 	bl	8000e08 <Error_Handler>
  }
}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b011      	add	sp, #68	; 0x44
 80006bc:	bd90      	pop	{r4, r7, pc}
	...

080006c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c6:	2320      	movs	r3, #32
 80006c8:	18fb      	adds	r3, r7, r3
 80006ca:	0018      	movs	r0, r3
 80006cc:	2308      	movs	r3, #8
 80006ce:	001a      	movs	r2, r3
 80006d0:	2100      	movs	r1, #0
 80006d2:	f005 fae0 	bl	8005c96 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	0018      	movs	r0, r3
 80006da:	231c      	movs	r3, #28
 80006dc:	001a      	movs	r2, r3
 80006de:	2100      	movs	r1, #0
 80006e0:	f005 fad9 	bl	8005c96 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006e4:	4b24      	ldr	r3, [pc, #144]	; (8000778 <MX_TIM3_Init+0xb8>)
 80006e6:	4a25      	ldr	r2, [pc, #148]	; (800077c <MX_TIM3_Init+0xbc>)
 80006e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006ea:	4b23      	ldr	r3, [pc, #140]	; (8000778 <MX_TIM3_Init+0xb8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f0:	4b21      	ldr	r3, [pc, #132]	; (8000778 <MX_TIM3_Init+0xb8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1895;
 80006f6:	4b20      	ldr	r3, [pc, #128]	; (8000778 <MX_TIM3_Init+0xb8>)
 80006f8:	4a21      	ldr	r2, [pc, #132]	; (8000780 <MX_TIM3_Init+0xc0>)
 80006fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <MX_TIM3_Init+0xb8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000702:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <MX_TIM3_Init+0xb8>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000708:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <MX_TIM3_Init+0xb8>)
 800070a:	0018      	movs	r0, r3
 800070c:	f001 fc9c 	bl	8002048 <HAL_TIM_PWM_Init>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000714:	f000 fb78 	bl	8000e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000718:	2120      	movs	r1, #32
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2200      	movs	r2, #0
 8000724:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000726:	187a      	adds	r2, r7, r1
 8000728:	4b13      	ldr	r3, [pc, #76]	; (8000778 <MX_TIM3_Init+0xb8>)
 800072a:	0011      	movs	r1, r2
 800072c:	0018      	movs	r0, r3
 800072e:	f002 fa09 	bl	8002b44 <HAL_TIMEx_MasterConfigSynchronization>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000736:	f000 fb67 	bl	8000e08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2260      	movs	r2, #96	; 0x60
 800073e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 948;
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	22ed      	movs	r2, #237	; 0xed
 8000744:	0092      	lsls	r2, r2, #2
 8000746:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000754:	1d39      	adds	r1, r7, #4
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <MX_TIM3_Init+0xb8>)
 8000758:	2200      	movs	r2, #0
 800075a:	0018      	movs	r0, r3
 800075c:	f001 fe8c 	bl	8002478 <HAL_TIM_PWM_ConfigChannel>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8000764:	f000 fb50 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000768:	4b03      	ldr	r3, [pc, #12]	; (8000778 <MX_TIM3_Init+0xb8>)
 800076a:	0018      	movs	r0, r3
 800076c:	f000 fbc0 	bl	8000ef0 <HAL_TIM_MspPostInit>

}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	b00a      	add	sp, #40	; 0x28
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20001940 	.word	0x20001940
 800077c:	40000400 	.word	0x40000400
 8000780:	00000767 	.word	0x00000767

08000784 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_TIM6_Init+0x38>)
 800078a:	4a0d      	ldr	r2, [pc, #52]	; (80007c0 <MX_TIM6_Init+0x3c>)
 800078c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 40-1;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_TIM6_Init+0x38>)
 8000790:	2227      	movs	r2, #39	; 0x27
 8000792:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_TIM6_Init+0x38>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200-1;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_TIM6_Init+0x38>)
 800079c:	22c7      	movs	r2, #199	; 0xc7
 800079e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_TIM6_Init+0x38>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007a6:	4b05      	ldr	r3, [pc, #20]	; (80007bc <MX_TIM6_Init+0x38>)
 80007a8:	0018      	movs	r0, r3
 80007aa:	f001 fbb1 	bl	8001f10 <HAL_TIM_Base_Init>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 80007b2:	f000 fb29 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20001990 	.word	0x20001990
 80007c0:	40001000 	.word	0x40001000

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b089      	sub	sp, #36	; 0x24
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	240c      	movs	r4, #12
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	0018      	movs	r0, r3
 80007d0:	2314      	movs	r3, #20
 80007d2:	001a      	movs	r2, r3
 80007d4:	2100      	movs	r1, #0
 80007d6:	f005 fa5e 	bl	8005c96 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b3d      	ldr	r3, [pc, #244]	; (80008d0 <MX_GPIO_Init+0x10c>)
 80007dc:	695a      	ldr	r2, [r3, #20]
 80007de:	4b3c      	ldr	r3, [pc, #240]	; (80008d0 <MX_GPIO_Init+0x10c>)
 80007e0:	2180      	movs	r1, #128	; 0x80
 80007e2:	0289      	lsls	r1, r1, #10
 80007e4:	430a      	orrs	r2, r1
 80007e6:	615a      	str	r2, [r3, #20]
 80007e8:	4b39      	ldr	r3, [pc, #228]	; (80008d0 <MX_GPIO_Init+0x10c>)
 80007ea:	695a      	ldr	r2, [r3, #20]
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	029b      	lsls	r3, r3, #10
 80007f0:	4013      	ands	r3, r2
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	4b36      	ldr	r3, [pc, #216]	; (80008d0 <MX_GPIO_Init+0x10c>)
 80007f8:	695a      	ldr	r2, [r3, #20]
 80007fa:	4b35      	ldr	r3, [pc, #212]	; (80008d0 <MX_GPIO_Init+0x10c>)
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	02c9      	lsls	r1, r1, #11
 8000800:	430a      	orrs	r2, r1
 8000802:	615a      	str	r2, [r3, #20]
 8000804:	4b32      	ldr	r3, [pc, #200]	; (80008d0 <MX_GPIO_Init+0x10c>)
 8000806:	695a      	ldr	r2, [r3, #20]
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	02db      	lsls	r3, r3, #11
 800080c:	4013      	ands	r3, r2
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IR_LED1_Pin|IR_LED8_Pin|IR_LED7_Pin|IR_LED6_Pin
 8000812:	2320      	movs	r3, #32
 8000814:	33ff      	adds	r3, #255	; 0xff
 8000816:	0019      	movs	r1, r3
 8000818:	2390      	movs	r3, #144	; 0x90
 800081a:	05db      	lsls	r3, r3, #23
 800081c:	2200      	movs	r2, #0
 800081e:	0018      	movs	r0, r3
 8000820:	f000 febd 	bl	800159e <HAL_GPIO_WritePin>
                          |IR_LED5_Pin|HeartbeatLED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, greenLED_Pin|PowerCtrl_Pin|IR_LED4_Pin|IR_LED3_Pin
 8000824:	23f8      	movs	r3, #248	; 0xf8
 8000826:	021b      	lsls	r3, r3, #8
 8000828:	482a      	ldr	r0, [pc, #168]	; (80008d4 <MX_GPIO_Init+0x110>)
 800082a:	2200      	movs	r2, #0
 800082c:	0019      	movs	r1, r3
 800082e:	f000 feb6 	bl	800159e <HAL_GPIO_WritePin>
                          |IR_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : IR_LED1_Pin IR_LED8_Pin IR_LED7_Pin IR_LED6_Pin
                           IR_LED5_Pin HeartbeatLED_Pin */
  GPIO_InitStruct.Pin = IR_LED1_Pin|IR_LED8_Pin|IR_LED7_Pin|IR_LED6_Pin
 8000832:	193b      	adds	r3, r7, r4
 8000834:	2220      	movs	r2, #32
 8000836:	32ff      	adds	r2, #255	; 0xff
 8000838:	601a      	str	r2, [r3, #0]
                          |IR_LED5_Pin|HeartbeatLED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	193b      	adds	r3, r7, r4
 800083c:	2201      	movs	r2, #1
 800083e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	193b      	adds	r3, r7, r4
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	193b      	adds	r3, r7, r4
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084c:	193a      	adds	r2, r7, r4
 800084e:	2390      	movs	r3, #144	; 0x90
 8000850:	05db      	lsls	r3, r3, #23
 8000852:	0011      	movs	r1, r2
 8000854:	0018      	movs	r0, r3
 8000856:	f000 fd15 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_L_Pin */
  GPIO_InitStruct.Pin = Button_L_Pin;
 800085a:	193b      	adds	r3, r7, r4
 800085c:	2202      	movs	r2, #2
 800085e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000860:	193b      	adds	r3, r7, r4
 8000862:	2200      	movs	r2, #0
 8000864:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	193b      	adds	r3, r7, r4
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_L_GPIO_Port, &GPIO_InitStruct);
 800086c:	193b      	adds	r3, r7, r4
 800086e:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <MX_GPIO_Init+0x110>)
 8000870:	0019      	movs	r1, r3
 8000872:	0010      	movs	r0, r2
 8000874:	f000 fd06 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : greenLED_Pin PowerCtrl_Pin IR_LED4_Pin IR_LED3_Pin
                           IR_LED2_Pin */
  GPIO_InitStruct.Pin = greenLED_Pin|PowerCtrl_Pin|IR_LED4_Pin|IR_LED3_Pin
 8000878:	0021      	movs	r1, r4
 800087a:	187b      	adds	r3, r7, r1
 800087c:	22f8      	movs	r2, #248	; 0xf8
 800087e:	0212      	lsls	r2, r2, #8
 8000880:	601a      	str	r2, [r3, #0]
                          |IR_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2201      	movs	r2, #1
 8000886:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000894:	000c      	movs	r4, r1
 8000896:	187b      	adds	r3, r7, r1
 8000898:	4a0e      	ldr	r2, [pc, #56]	; (80008d4 <MX_GPIO_Init+0x110>)
 800089a:	0019      	movs	r1, r3
 800089c:	0010      	movs	r0, r2
 800089e:	f000 fcf1 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : RX_Pin */
  GPIO_InitStruct.Pin = RX_Pin;
 80008a2:	0021      	movs	r1, r4
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	0152      	lsls	r2, r2, #5
 80008aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2200      	movs	r2, #0
 80008b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 80008b8:	187a      	adds	r2, r7, r1
 80008ba:	2390      	movs	r3, #144	; 0x90
 80008bc:	05db      	lsls	r3, r3, #23
 80008be:	0011      	movs	r1, r2
 80008c0:	0018      	movs	r0, r3
 80008c2:	f000 fcdf 	bl	8001284 <HAL_GPIO_Init>

}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b009      	add	sp, #36	; 0x24
 80008cc:	bd90      	pop	{r4, r7, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	40021000 	.word	0x40021000
 80008d4:	48000400 	.word	0x48000400

080008d8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_GPIO_WritePin(PowerCtrl_GPIO_Port, PowerCtrl_Pin, GPIO_PIN_SET);
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	015b      	lsls	r3, r3, #5
 80008e4:	4848      	ldr	r0, [pc, #288]	; (8000a08 <StartDefaultTask+0x130>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	0019      	movs	r1, r3
 80008ea:	f000 fe58 	bl	800159e <HAL_GPIO_WritePin>
	LED_BlinkProfile blinkStyle;
	/* Infinite loop */
	for(;;)
	{
		switch(presentState){
 80008ee:	4b47      	ldr	r3, [pc, #284]	; (8000a0c <StartDefaultTask+0x134>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d01a      	beq.n	800092c <StartDefaultTask+0x54>
 80008f6:	dc02      	bgt.n	80008fe <StartDefaultTask+0x26>
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d005      	beq.n	8000908 <StartDefaultTask+0x30>
 80008fc:	e07f      	b.n	80009fe <StartDefaultTask+0x126>
 80008fe:	2b03      	cmp	r3, #3
 8000900:	d048      	beq.n	8000994 <StartDefaultTask+0xbc>
 8000902:	2b04      	cmp	r3, #4
 8000904:	d067      	beq.n	80009d6 <StartDefaultTask+0xfe>
 8000906:	e07a      	b.n	80009fe <StartDefaultTask+0x126>
		case PROGRAM:
			if(LTTO_IR_RX_AC_NewSingleSignatureReady()) {
 8000908:	f002 fe86 	bl	8003618 <LTTO_IR_RX_AC_NewSingleSignatureReady>
 800090c:	1e03      	subs	r3, r0, #0
 800090e:	d075      	beq.n	80009fc <StartDefaultTask+0x124>
				LTTO_IR_RX_AC_GetSingleSignature(&tempSignature);
 8000910:	4b3f      	ldr	r3, [pc, #252]	; (8000a10 <StartDefaultTask+0x138>)
 8000912:	0018      	movs	r0, r3
 8000914:	f002 fe8c 	bl	8003630 <LTTO_IR_RX_AC_GetSingleSignature>
				if(tempSignature.signatureType == LTTO_IR_SIGNATURE_TYPE_TAG) {
 8000918:	4b3d      	ldr	r3, [pc, #244]	; (8000a10 <StartDefaultTask+0x138>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b03      	cmp	r3, #3
 800091e:	d102      	bne.n	8000926 <StartDefaultTask+0x4e>
					//Save it and move on to the waiting
					//And let's go ahead and boost the damage, 'cus that's fun.
					//tempSignature.data |= 0x03;
					presentState = COUNTDOWN;
 8000920:	4b3a      	ldr	r3, [pc, #232]	; (8000a0c <StartDefaultTask+0x134>)
 8000922:	2202      	movs	r2, #2
 8000924:	701a      	strb	r2, [r3, #0]
				}
				LTTO_IR_RX_AC_Clear();
 8000926:	f002 fe95 	bl	8003654 <LTTO_IR_RX_AC_Clear>
			}
			break;
 800092a:	e067      	b.n	80009fc <StartDefaultTask+0x124>
		case COUNTDOWN:
			blinkStyle = SLOW_BLINK;
 800092c:	210f      	movs	r1, #15
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2202      	movs	r2, #2
 8000932:	701a      	strb	r2, [r3, #0]
			xQueueSendToBack(LED_BlinkStyleHandle, &blinkStyle, 0);
 8000934:	4b37      	ldr	r3, [pc, #220]	; (8000a14 <StartDefaultTask+0x13c>)
 8000936:	6818      	ldr	r0, [r3, #0]
 8000938:	000c      	movs	r4, r1
 800093a:	1879      	adds	r1, r7, r1
 800093c:	2300      	movs	r3, #0
 800093e:	2200      	movs	r2, #0
 8000940:	f003 fa25 	bl	8003d8e <xQueueGenericSend>
			osDelay(5000);
 8000944:	4b34      	ldr	r3, [pc, #208]	; (8000a18 <StartDefaultTask+0x140>)
 8000946:	0018      	movs	r0, r3
 8000948:	f002 ff9c 	bl	8003884 <osDelay>

			blinkStyle = MEDIUM_BLINK;
 800094c:	0021      	movs	r1, r4
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2203      	movs	r2, #3
 8000952:	701a      	strb	r2, [r3, #0]
			xQueueSendToBack(LED_BlinkStyleHandle, &blinkStyle, 0);
 8000954:	4b2f      	ldr	r3, [pc, #188]	; (8000a14 <StartDefaultTask+0x13c>)
 8000956:	6818      	ldr	r0, [r3, #0]
 8000958:	000c      	movs	r4, r1
 800095a:	1879      	adds	r1, r7, r1
 800095c:	2300      	movs	r3, #0
 800095e:	2200      	movs	r2, #0
 8000960:	f003 fa15 	bl	8003d8e <xQueueGenericSend>
			osDelay(3000);
 8000964:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <StartDefaultTask+0x144>)
 8000966:	0018      	movs	r0, r3
 8000968:	f002 ff8c 	bl	8003884 <osDelay>

			blinkStyle = FAST_BLINK;
 800096c:	0021      	movs	r1, r4
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2204      	movs	r2, #4
 8000972:	701a      	strb	r2, [r3, #0]
			xQueueSendToBack(LED_BlinkStyleHandle, &blinkStyle, 0);
 8000974:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <StartDefaultTask+0x13c>)
 8000976:	6818      	ldr	r0, [r3, #0]
 8000978:	1879      	adds	r1, r7, r1
 800097a:	2300      	movs	r3, #0
 800097c:	2200      	movs	r2, #0
 800097e:	f003 fa06 	bl	8003d8e <xQueueGenericSend>
			osDelay(2000);
 8000982:	23fa      	movs	r3, #250	; 0xfa
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	0018      	movs	r0, r3
 8000988:	f002 ff7c 	bl	8003884 <osDelay>

			presentState = DETONATE;
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <StartDefaultTask+0x134>)
 800098e:	2203      	movs	r2, #3
 8000990:	701a      	strb	r2, [r3, #0]
			break;
 8000992:	e034      	b.n	80009fe <StartDefaultTask+0x126>
		case DETONATE:
			xQueueSendToBack(tagSignatureHandle, &tempSignature, 0);
 8000994:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <StartDefaultTask+0x148>)
 8000996:	6818      	ldr	r0, [r3, #0]
 8000998:	491d      	ldr	r1, [pc, #116]	; (8000a10 <StartDefaultTask+0x138>)
 800099a:	2300      	movs	r3, #0
 800099c:	2200      	movs	r2, #0
 800099e:	f003 f9f6 	bl	8003d8e <xQueueGenericSend>
			blinkStyle = SOLID_LED;
 80009a2:	210f      	movs	r1, #15
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2205      	movs	r2, #5
 80009a8:	701a      	strb	r2, [r3, #0]
			xQueueSendToBack(LED_BlinkStyleHandle, &blinkStyle, 0);
 80009aa:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <StartDefaultTask+0x13c>)
 80009ac:	6818      	ldr	r0, [r3, #0]
 80009ae:	1879      	adds	r1, r7, r1
 80009b0:	2300      	movs	r3, #0
 80009b2:	2200      	movs	r2, #0
 80009b4:	f003 f9eb 	bl	8003d8e <xQueueGenericSend>
			osDelay(5);
 80009b8:	2005      	movs	r0, #5
 80009ba:	f002 ff63 	bl	8003884 <osDelay>

			//Wait for transmit to pass the semaphore back
			xQueueReceive(tagSignatureHandle, &tempSignature, portMAX_DELAY);
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <StartDefaultTask+0x148>)
 80009c0:	6818      	ldr	r0, [r3, #0]
 80009c2:	2301      	movs	r3, #1
 80009c4:	425a      	negs	r2, r3
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <StartDefaultTask+0x138>)
 80009c8:	0019      	movs	r1, r3
 80009ca:	f003 fb15 	bl	8003ff8 <xQueueReceive>
			presentState = SHUTDOWN;
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <StartDefaultTask+0x134>)
 80009d0:	2204      	movs	r2, #4
 80009d2:	701a      	strb	r2, [r3, #0]
			break;
 80009d4:	e013      	b.n	80009fe <StartDefaultTask+0x126>
		case SHUTDOWN:
			blinkStyle = OCCASIONAL_BLIP;
 80009d6:	210f      	movs	r1, #15
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2206      	movs	r2, #6
 80009dc:	701a      	strb	r2, [r3, #0]
			xQueueSendToBack(LED_BlinkStyleHandle, &blinkStyle, 0);
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <StartDefaultTask+0x13c>)
 80009e0:	6818      	ldr	r0, [r3, #0]
 80009e2:	1879      	adds	r1, r7, r1
 80009e4:	2300      	movs	r3, #0
 80009e6:	2200      	movs	r2, #0
 80009e8:	f003 f9d1 	bl	8003d8e <xQueueGenericSend>
			HAL_GPIO_WritePin(PowerCtrl_GPIO_Port, PowerCtrl_Pin, GPIO_PIN_RESET);
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	015b      	lsls	r3, r3, #5
 80009f0:	4805      	ldr	r0, [pc, #20]	; (8000a08 <StartDefaultTask+0x130>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	0019      	movs	r1, r3
 80009f6:	f000 fdd2 	bl	800159e <HAL_GPIO_WritePin>
			break;
 80009fa:	e000      	b.n	80009fe <StartDefaultTask+0x126>
			break;
 80009fc:	46c0      	nop			; (mov r8, r8)
		}
		osDelay(10);
 80009fe:	200a      	movs	r0, #10
 8000a00:	f002 ff40 	bl	8003884 <osDelay>
		switch(presentState){
 8000a04:	e773      	b.n	80008ee <StartDefaultTask+0x16>
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	48000400 	.word	0x48000400
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	20001988 	.word	0x20001988
 8000a14:	2000198c 	.word	0x2000198c
 8000a18:	00001388 	.word	0x00001388
 8000a1c:	00000bb8 	.word	0x00000bb8
 8000a20:	2000193c 	.word	0x2000193c

08000a24 <StartEmitTag>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEmitTag */
void StartEmitTag(void *argument)
{
 8000a24:	b5b0      	push	{r4, r5, r7, lr}
 8000a26:	b0a8      	sub	sp, #160	; 0xa0
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		//Our TX buffer
		int LTTO_IR_TX_txPulseMS[21];
		int LTTO_IR_TX_txPulseCount = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	2490      	movs	r4, #144	; 0x90
 8000a30:	193a      	adds	r2, r7, r4
 8000a32:	6013      	str	r3, [r2, #0]
		LTTO_IR_SIGNATURE_t signatureToSend;

		GPIO_TypeDef* portArray[8] = {IR_LED1_GPIO_Port, IR_LED2_GPIO_Port, IR_LED3_GPIO_Port,
 8000a34:	2308      	movs	r3, #8
 8000a36:	18fb      	adds	r3, r7, r3
 8000a38:	4a4e      	ldr	r2, [pc, #312]	; (8000b74 <StartEmitTag+0x150>)
 8000a3a:	ca23      	ldmia	r2!, {r0, r1, r5}
 8000a3c:	c323      	stmia	r3!, {r0, r1, r5}
 8000a3e:	ca23      	ldmia	r2!, {r0, r1, r5}
 8000a40:	c323      	stmia	r3!, {r0, r1, r5}
 8000a42:	ca03      	ldmia	r2!, {r0, r1}
 8000a44:	c303      	stmia	r3!, {r0, r1}
				IR_LED4_GPIO_Port, IR_LED5_GPIO_Port, IR_LED6_GPIO_Port, IR_LED7_GPIO_Port, IR_LED8_GPIO_Port};
		uint16_t pinArray [8] = {IR_LED1_Pin, IR_LED2_Pin, IR_LED3_Pin, IR_LED4_Pin, IR_LED5_Pin,
 8000a46:	237c      	movs	r3, #124	; 0x7c
 8000a48:	18fb      	adds	r3, r7, r3
 8000a4a:	4a4b      	ldr	r2, [pc, #300]	; (8000b78 <StartEmitTag+0x154>)
 8000a4c:	ca23      	ldmia	r2!, {r0, r1, r5}
 8000a4e:	c323      	stmia	r3!, {r0, r1, r5}
 8000a50:	6812      	ldr	r2, [r2, #0]
 8000a52:	601a      	str	r2, [r3, #0]
				IR_LED6_Pin, IR_LED7_Pin, IR_LED8_Pin };

		xQueueReceive(tagSignatureHandle, &signatureToSend, portMAX_DELAY);
 8000a54:	4b49      	ldr	r3, [pc, #292]	; (8000b7c <StartEmitTag+0x158>)
 8000a56:	6818      	ldr	r0, [r3, #0]
 8000a58:	2301      	movs	r3, #1
 8000a5a:	425a      	negs	r2, r3
 8000a5c:	258c      	movs	r5, #140	; 0x8c
 8000a5e:	197b      	adds	r3, r7, r5
 8000a60:	0019      	movs	r1, r3
 8000a62:	f003 fac9 	bl	8003ff8 <xQueueReceive>
		LTTO_IR_CONV_SignatureToPulses(&signatureToSend, &LTTO_IR_TX_txPulseMS, &LTTO_IR_TX_txPulseCount);
 8000a66:	193a      	adds	r2, r7, r4
 8000a68:	2328      	movs	r3, #40	; 0x28
 8000a6a:	18f9      	adds	r1, r7, r3
 8000a6c:	197b      	adds	r3, r7, r5
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f002 fad2 	bl	8003018 <LTTO_IR_CONV_SignatureToPulses>
		//LTTO_IR_SIGNATURE_t *sourceSignature, int destinationPulseTickMSBuffer[], int *destinationPulseCount
		for(int detonationRound = 0; detonationRound < 3; detonationRound++){ //Fire off 3 sets of 8 shots
 8000a74:	2300      	movs	r3, #0
 8000a76:	229c      	movs	r2, #156	; 0x9c
 8000a78:	18ba      	adds	r2, r7, r2
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	e068      	b.n	8000b50 <StartEmitTag+0x12c>
			for(int emitter = 0; emitter < 8; emitter++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	2298      	movs	r2, #152	; 0x98
 8000a82:	18ba      	adds	r2, r7, r2
 8000a84:	6013      	str	r3, [r2, #0]
 8000a86:	e058      	b.n	8000b3a <StartEmitTag+0x116>
				for(int pulseIndex = 0; pulseIndex < LTTO_IR_TX_txPulseCount; pulseIndex++){
 8000a88:	2300      	movs	r3, #0
 8000a8a:	2294      	movs	r2, #148	; 0x94
 8000a8c:	18ba      	adds	r2, r7, r2
 8000a8e:	6013      	str	r3, [r2, #0]
 8000a90:	e042      	b.n	8000b18 <StartEmitTag+0xf4>
					if(pulseIndex % 2 == 0) {
 8000a92:	2394      	movs	r3, #148	; 0x94
 8000a94:	18fb      	adds	r3, r7, r3
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2201      	movs	r2, #1
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	d11b      	bne.n	8000ad6 <StartEmitTag+0xb2>
						//Odd index, active IR period
						HAL_GPIO_WritePin(portArray[emitter], pinArray[emitter], GPIO_PIN_SET);
 8000a9e:	2308      	movs	r3, #8
 8000aa0:	18fb      	adds	r3, r7, r3
 8000aa2:	2198      	movs	r1, #152	; 0x98
 8000aa4:	187a      	adds	r2, r7, r1
 8000aa6:	6812      	ldr	r2, [r2, #0]
 8000aa8:	0092      	lsls	r2, r2, #2
 8000aaa:	58d0      	ldr	r0, [r2, r3]
 8000aac:	237c      	movs	r3, #124	; 0x7c
 8000aae:	18fb      	adds	r3, r7, r3
 8000ab0:	187a      	adds	r2, r7, r1
 8000ab2:	6812      	ldr	r2, [r2, #0]
 8000ab4:	0052      	lsls	r2, r2, #1
 8000ab6:	5ad3      	ldrh	r3, [r2, r3]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	0019      	movs	r1, r3
 8000abc:	f000 fd6f 	bl	800159e <HAL_GPIO_WritePin>
						osDelay(LTTO_IR_TX_txPulseMS[pulseIndex]);
 8000ac0:	2328      	movs	r3, #40	; 0x28
 8000ac2:	18fb      	adds	r3, r7, r3
 8000ac4:	2294      	movs	r2, #148	; 0x94
 8000ac6:	18ba      	adds	r2, r7, r2
 8000ac8:	6812      	ldr	r2, [r2, #0]
 8000aca:	0092      	lsls	r2, r2, #2
 8000acc:	58d3      	ldr	r3, [r2, r3]
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f002 fed8 	bl	8003884 <osDelay>
 8000ad4:	e01a      	b.n	8000b0c <StartEmitTag+0xe8>
					}
					else{
						//Even index, inactive IR period
						HAL_GPIO_WritePin(portArray[emitter], pinArray[emitter], GPIO_PIN_RESET);
 8000ad6:	2308      	movs	r3, #8
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	2198      	movs	r1, #152	; 0x98
 8000adc:	187a      	adds	r2, r7, r1
 8000ade:	6812      	ldr	r2, [r2, #0]
 8000ae0:	0092      	lsls	r2, r2, #2
 8000ae2:	58d0      	ldr	r0, [r2, r3]
 8000ae4:	237c      	movs	r3, #124	; 0x7c
 8000ae6:	18fb      	adds	r3, r7, r3
 8000ae8:	187a      	adds	r2, r7, r1
 8000aea:	6812      	ldr	r2, [r2, #0]
 8000aec:	0052      	lsls	r2, r2, #1
 8000aee:	5ad3      	ldrh	r3, [r2, r3]
 8000af0:	2200      	movs	r2, #0
 8000af2:	0019      	movs	r1, r3
 8000af4:	f000 fd53 	bl	800159e <HAL_GPIO_WritePin>
						osDelay(LTTO_IR_TX_txPulseMS[pulseIndex]);
 8000af8:	2328      	movs	r3, #40	; 0x28
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	2294      	movs	r2, #148	; 0x94
 8000afe:	18ba      	adds	r2, r7, r2
 8000b00:	6812      	ldr	r2, [r2, #0]
 8000b02:	0092      	lsls	r2, r2, #2
 8000b04:	58d3      	ldr	r3, [r2, r3]
 8000b06:	0018      	movs	r0, r3
 8000b08:	f002 febc 	bl	8003884 <osDelay>
				for(int pulseIndex = 0; pulseIndex < LTTO_IR_TX_txPulseCount; pulseIndex++){
 8000b0c:	2294      	movs	r2, #148	; 0x94
 8000b0e:	18bb      	adds	r3, r7, r2
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	3301      	adds	r3, #1
 8000b14:	18ba      	adds	r2, r7, r2
 8000b16:	6013      	str	r3, [r2, #0]
 8000b18:	2390      	movs	r3, #144	; 0x90
 8000b1a:	18fb      	adds	r3, r7, r3
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2294      	movs	r2, #148	; 0x94
 8000b20:	18ba      	adds	r2, r7, r2
 8000b22:	6812      	ldr	r2, [r2, #0]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	dbb4      	blt.n	8000a92 <StartEmitTag+0x6e>
					}
				}
				osDelay(100); //100 ms inter-tag spacing
 8000b28:	2064      	movs	r0, #100	; 0x64
 8000b2a:	f002 feab 	bl	8003884 <osDelay>
			for(int emitter = 0; emitter < 8; emitter++) {
 8000b2e:	2298      	movs	r2, #152	; 0x98
 8000b30:	18bb      	adds	r3, r7, r2
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	3301      	adds	r3, #1
 8000b36:	18ba      	adds	r2, r7, r2
 8000b38:	6013      	str	r3, [r2, #0]
 8000b3a:	2398      	movs	r3, #152	; 0x98
 8000b3c:	18fb      	adds	r3, r7, r3
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b07      	cmp	r3, #7
 8000b42:	dda1      	ble.n	8000a88 <StartEmitTag+0x64>
		for(int detonationRound = 0; detonationRound < 3; detonationRound++){ //Fire off 3 sets of 8 shots
 8000b44:	229c      	movs	r2, #156	; 0x9c
 8000b46:	18bb      	adds	r3, r7, r2
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	18ba      	adds	r2, r7, r2
 8000b4e:	6013      	str	r3, [r2, #0]
 8000b50:	239c      	movs	r3, #156	; 0x9c
 8000b52:	18fb      	adds	r3, r7, r3
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	dd91      	ble.n	8000a7e <StartEmitTag+0x5a>
			}
		}
		xQueueSendToBack(tagSignatureHandle, &tempSignature, 0); //Send back Mutex to shutdown
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <StartEmitTag+0x158>)
 8000b5c:	6818      	ldr	r0, [r3, #0]
 8000b5e:	4908      	ldr	r1, [pc, #32]	; (8000b80 <StartEmitTag+0x15c>)
 8000b60:	2300      	movs	r3, #0
 8000b62:	2200      	movs	r2, #0
 8000b64:	f003 f913 	bl	8003d8e <xQueueGenericSend>
		osDelay(1000); //Sleep so other tasks can grab the Mutex
 8000b68:	23fa      	movs	r3, #250	; 0xfa
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f002 fe89 	bl	8003884 <osDelay>
	{
 8000b72:	e75b      	b.n	8000a2c <StartEmitTag+0x8>
 8000b74:	08005cf8 	.word	0x08005cf8
 8000b78:	08005d18 	.word	0x08005d18
 8000b7c:	2000193c 	.word	0x2000193c
 8000b80:	20001988 	.word	0x20001988

08000b84 <StartLEDFlash>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLEDFlash */
void StartLEDFlash(void *argument)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDFlash */
	LED_BlinkProfile blinkStyle = ULTRA;
 8000b8c:	210e      	movs	r1, #14
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2201      	movs	r2, #1
 8000b92:	701a      	strb	r2, [r3, #0]
	uint16_t onTime;
	uint16_t offTime;
	uint32_t prevTime;
	bool LEDisOn;

	xQueueSendToBack(LED_BlinkStyleHandle, &blinkStyle, 0);
 8000b94:	4b5a      	ldr	r3, [pc, #360]	; (8000d00 <StartLEDFlash+0x17c>)
 8000b96:	6818      	ldr	r0, [r3, #0]
 8000b98:	1879      	adds	r1, r7, r1
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f003 f8f6 	bl	8003d8e <xQueueGenericSend>
	/* Infinite loop */
	for(;;)
	{
		if(xQueueReceive(LED_BlinkStyleHandle, &blinkStyle, 0)){
 8000ba2:	4b57      	ldr	r3, [pc, #348]	; (8000d00 <StartLEDFlash+0x17c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	220e      	movs	r2, #14
 8000ba8:	18b9      	adds	r1, r7, r2
 8000baa:	2200      	movs	r2, #0
 8000bac:	0018      	movs	r0, r3
 8000bae:	f003 fa23 	bl	8003ff8 <xQueueReceive>
 8000bb2:	1e03      	subs	r3, r0, #0
 8000bb4:	d058      	beq.n	8000c68 <StartLEDFlash+0xe4>
			switch(blinkStyle){
 8000bb6:	230e      	movs	r3, #14
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b06      	cmp	r3, #6
 8000bbe:	d83c      	bhi.n	8000c3a <StartLEDFlash+0xb6>
 8000bc0:	009a      	lsls	r2, r3, #2
 8000bc2:	4b50      	ldr	r3, [pc, #320]	; (8000d04 <StartLEDFlash+0x180>)
 8000bc4:	18d3      	adds	r3, r2, r3
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	469f      	mov	pc, r3
			case ULTRA:
				onTime = 20;
 8000bca:	2316      	movs	r3, #22
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	2214      	movs	r2, #20
 8000bd0:	801a      	strh	r2, [r3, #0]
				offTime = 20;
 8000bd2:	2314      	movs	r3, #20
 8000bd4:	18fb      	adds	r3, r7, r3
 8000bd6:	2214      	movs	r2, #20
 8000bd8:	801a      	strh	r2, [r3, #0]
				break;
 8000bda:	e02e      	b.n	8000c3a <StartLEDFlash+0xb6>
			case SLOW_BLINK:
				onTime = 500;
 8000bdc:	2316      	movs	r3, #22
 8000bde:	18fb      	adds	r3, r7, r3
 8000be0:	22fa      	movs	r2, #250	; 0xfa
 8000be2:	0052      	lsls	r2, r2, #1
 8000be4:	801a      	strh	r2, [r3, #0]
				offTime = 500;
 8000be6:	2314      	movs	r3, #20
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	22fa      	movs	r2, #250	; 0xfa
 8000bec:	0052      	lsls	r2, r2, #1
 8000bee:	801a      	strh	r2, [r3, #0]
				break;
 8000bf0:	e023      	b.n	8000c3a <StartLEDFlash+0xb6>
			case MEDIUM_BLINK:
				onTime = 200;
 8000bf2:	2316      	movs	r3, #22
 8000bf4:	18fb      	adds	r3, r7, r3
 8000bf6:	22c8      	movs	r2, #200	; 0xc8
 8000bf8:	801a      	strh	r2, [r3, #0]
				offTime = 200;
 8000bfa:	2314      	movs	r3, #20
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	22c8      	movs	r2, #200	; 0xc8
 8000c00:	801a      	strh	r2, [r3, #0]
				break;
 8000c02:	e01a      	b.n	8000c3a <StartLEDFlash+0xb6>
			case FAST_BLINK:
				onTime = 100;
 8000c04:	2316      	movs	r3, #22
 8000c06:	18fb      	adds	r3, r7, r3
 8000c08:	2264      	movs	r2, #100	; 0x64
 8000c0a:	801a      	strh	r2, [r3, #0]
				offTime = 100;
 8000c0c:	2314      	movs	r3, #20
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	2264      	movs	r2, #100	; 0x64
 8000c12:	801a      	strh	r2, [r3, #0]
				break;
 8000c14:	e011      	b.n	8000c3a <StartLEDFlash+0xb6>
			case SOLID_LED:
				onTime = 65000;
 8000c16:	2316      	movs	r3, #22
 8000c18:	18fb      	adds	r3, r7, r3
 8000c1a:	4a3b      	ldr	r2, [pc, #236]	; (8000d08 <StartLEDFlash+0x184>)
 8000c1c:	801a      	strh	r2, [r3, #0]
				offTime = 0;
 8000c1e:	2314      	movs	r3, #20
 8000c20:	18fb      	adds	r3, r7, r3
 8000c22:	2200      	movs	r2, #0
 8000c24:	801a      	strh	r2, [r3, #0]
				break;
 8000c26:	e008      	b.n	8000c3a <StartLEDFlash+0xb6>
			case OCCASIONAL_BLIP:
				onTime = 20;
 8000c28:	2316      	movs	r3, #22
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	2214      	movs	r2, #20
 8000c2e:	801a      	strh	r2, [r3, #0]
				offTime = 1000;
 8000c30:	2314      	movs	r3, #20
 8000c32:	18fb      	adds	r3, r7, r3
 8000c34:	22fa      	movs	r2, #250	; 0xfa
 8000c36:	0092      	lsls	r2, r2, #2
 8000c38:	801a      	strh	r2, [r3, #0]
			}
			prevTime = HAL_GetTick();
 8000c3a:	f000 fa6b 	bl	8001114 <HAL_GetTick>
 8000c3e:	0003      	movs	r3, r0
 8000c40:	613b      	str	r3, [r7, #16]
			//Start with LED on
			LEDisOn = true;
 8000c42:	230f      	movs	r3, #15
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_RESET); //Turn on the LED (inverted)
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	011b      	lsls	r3, r3, #4
 8000c4e:	482f      	ldr	r0, [pc, #188]	; (8000d0c <StartLEDFlash+0x188>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	0019      	movs	r1, r3
 8000c54:	f000 fca3 	bl	800159e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(HeartbeatLED_GPIO_Port, HeartbeatLED_Pin, GPIO_PIN_SET); //Turn on the heartbeat LED
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	0059      	lsls	r1, r3, #1
 8000c5c:	2390      	movs	r3, #144	; 0x90
 8000c5e:	05db      	lsls	r3, r3, #23
 8000c60:	2201      	movs	r2, #1
 8000c62:	0018      	movs	r0, r3
 8000c64:	f000 fc9b 	bl	800159e <HAL_GPIO_WritePin>
		}
		if(LEDisOn){
 8000c68:	230f      	movs	r3, #15
 8000c6a:	18fb      	adds	r3, r7, r3
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d021      	beq.n	8000cb6 <StartLEDFlash+0x132>
			if(HAL_GetTick()-prevTime > onTime){ //If on-time has elapsed
 8000c72:	f000 fa4f 	bl	8001114 <HAL_GetTick>
 8000c76:	0002      	movs	r2, r0
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	1ad2      	subs	r2, r2, r3
 8000c7c:	2316      	movs	r3, #22
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d938      	bls.n	8000cf8 <StartLEDFlash+0x174>
				HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_SET); //Turn off the LED (inverted)
 8000c86:	2380      	movs	r3, #128	; 0x80
 8000c88:	011b      	lsls	r3, r3, #4
 8000c8a:	4820      	ldr	r0, [pc, #128]	; (8000d0c <StartLEDFlash+0x188>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	0019      	movs	r1, r3
 8000c90:	f000 fc85 	bl	800159e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(HeartbeatLED_GPIO_Port, HeartbeatLED_Pin, GPIO_PIN_RESET); //Turn off the heartbeat LED
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	0059      	lsls	r1, r3, #1
 8000c98:	2390      	movs	r3, #144	; 0x90
 8000c9a:	05db      	lsls	r3, r3, #23
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f000 fc7d 	bl	800159e <HAL_GPIO_WritePin>
				LEDisOn = false;
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
				prevTime = HAL_GetTick(); //Reset timer so we can time the off time
 8000cac:	f000 fa32 	bl	8001114 <HAL_GetTick>
 8000cb0:	0003      	movs	r3, r0
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	e020      	b.n	8000cf8 <StartLEDFlash+0x174>
			}
		}
		else{
			if(HAL_GetTick()-prevTime > offTime){ //If off-time has elapsed
 8000cb6:	f000 fa2d 	bl	8001114 <HAL_GetTick>
 8000cba:	0002      	movs	r2, r0
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	1ad2      	subs	r2, r2, r3
 8000cc0:	2314      	movs	r3, #20
 8000cc2:	18fb      	adds	r3, r7, r3
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d916      	bls.n	8000cf8 <StartLEDFlash+0x174>
				HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_RESET); //Turn on the LED (inverted)
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	011b      	lsls	r3, r3, #4
 8000cce:	480f      	ldr	r0, [pc, #60]	; (8000d0c <StartLEDFlash+0x188>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	0019      	movs	r1, r3
 8000cd4:	f000 fc63 	bl	800159e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(HeartbeatLED_GPIO_Port, HeartbeatLED_Pin, GPIO_PIN_SET); //Turn on the heartbeat LED
 8000cd8:	2380      	movs	r3, #128	; 0x80
 8000cda:	0059      	lsls	r1, r3, #1
 8000cdc:	2390      	movs	r3, #144	; 0x90
 8000cde:	05db      	lsls	r3, r3, #23
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f000 fc5b 	bl	800159e <HAL_GPIO_WritePin>
				LEDisOn = true;
 8000ce8:	230f      	movs	r3, #15
 8000cea:	18fb      	adds	r3, r7, r3
 8000cec:	2201      	movs	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
				prevTime = HAL_GetTick(); //Reset timer so we can time the off time
 8000cf0:	f000 fa10 	bl	8001114 <HAL_GetTick>
 8000cf4:	0003      	movs	r3, r0
 8000cf6:	613b      	str	r3, [r7, #16]
			}
		}
		osDelay(10);
 8000cf8:	200a      	movs	r0, #10
 8000cfa:	f002 fdc3 	bl	8003884 <osDelay>
		if(xQueueReceive(LED_BlinkStyleHandle, &blinkStyle, 0)){
 8000cfe:	e750      	b.n	8000ba2 <StartLEDFlash+0x1e>
 8000d00:	2000198c 	.word	0x2000198c
 8000d04:	08005dfc 	.word	0x08005dfc
 8000d08:	fffffde8 	.word	0xfffffde8
 8000d0c:	48000400 	.word	0x48000400

08000d10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]

	static uint16_t IR_RX_SensorTicks = 0;
	static bool IR_RX_LastState;
	static bool IR_RX_currentState;
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a34      	ldr	r2, [pc, #208]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d101      	bne.n	8000d26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d22:	f000 f9e5 	bl	80010f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim == &htim6 )  { // 0.2ms Interrupt
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	4b32      	ldr	r3, [pc, #200]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d15b      	bne.n	8000de6 <HAL_TIM_PeriodElapsedCallback+0xd6>
		if(HAL_GPIO_ReadPin(RX_GPIO_Port, RX_Pin) == GPIO_PIN_SET){
 8000d2e:	2380      	movs	r3, #128	; 0x80
 8000d30:	015a      	lsls	r2, r3, #5
 8000d32:	2390      	movs	r3, #144	; 0x90
 8000d34:	05db      	lsls	r3, r3, #23
 8000d36:	0011      	movs	r1, r2
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f000 fc13 	bl	8001564 <HAL_GPIO_ReadPin>
 8000d3e:	0003      	movs	r3, r0
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d103      	bne.n	8000d4c <HAL_TIM_PeriodElapsedCallback+0x3c>
			IR_RX_currentState = true;
 8000d44:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	e002      	b.n	8000d52 <HAL_TIM_PeriodElapsedCallback+0x42>
		}
		else{
			IR_RX_currentState = false;
 8000d4c:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
		}
		//Handle IR reception
		//If the state is the same as last time
		if(IR_RX_currentState == IR_RX_LastState) {
 8000d52:	4b29      	ldr	r3, [pc, #164]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000d54:	781a      	ldrb	r2, [r3, #0]
 8000d56:	4b29      	ldr	r3, [pc, #164]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d125      	bne.n	8000daa <HAL_TIM_PeriodElapsedCallback+0x9a>
			//If this pulse has gone longer than 10ms, and we haven't already decided we've timed out...
			if((IR_RX_SensorTicks / LTTO_IR_RX_TICKS_PER_MS) > 10 && IR_RX_SensorTicks != IR_RX_SENSOR_TICKS_GAVE_UP) {
 8000d5e:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	2b36      	cmp	r3, #54	; 0x36
 8000d64:	d91a      	bls.n	8000d9c <HAL_TIM_PeriodElapsedCallback+0x8c>
 8000d66:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	4a26      	ldr	r2, [pc, #152]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d015      	beq.n	8000d9c <HAL_TIM_PeriodElapsedCallback+0x8c>
				//Pass it into the RX processor
				//Invert the sensor state, since IR receivers are active-low
				LTTO_IR_RX_AC_NewIRPulseReceived(IR_RX_SensorTicks, !IR_RX_LastState);
 8000d70:	4b23      	ldr	r3, [pc, #140]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	0018      	movs	r0, r3
 8000d76:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	1e5a      	subs	r2, r3, #1
 8000d7c:	4193      	sbcs	r3, r2
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	2201      	movs	r2, #1
 8000d82:	4053      	eors	r3, r2
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	1c1a      	adds	r2, r3, #0
 8000d88:	2301      	movs	r3, #1
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	0019      	movs	r1, r3
 8000d90:	f002 fbe8 	bl	8003564 <LTTO_IR_RX_AC_NewIRPulseReceived>
				//And mark this pulse as having already been processed
				IR_RX_SensorTicks = IR_RX_SENSOR_TICKS_GAVE_UP;
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000d96:	4a1b      	ldr	r2, [pc, #108]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000d98:	801a      	strh	r2, [r3, #0]
			IR_RX_LastState = IR_RX_currentState;
		}
	}

  /* USER CODE END Callback 1 */
}
 8000d9a:	e024      	b.n	8000de6 <HAL_TIM_PeriodElapsedCallback+0xd6>
				IR_RX_SensorTicks++;
 8000d9c:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	3301      	adds	r3, #1
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000da6:	801a      	strh	r2, [r3, #0]
}
 8000da8:	e01d      	b.n	8000de6 <HAL_TIM_PeriodElapsedCallback+0xd6>
			if(IR_RX_SensorTicks != IR_RX_SENSOR_TICKS_GAVE_UP) {
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	4a15      	ldr	r2, [pc, #84]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d011      	beq.n	8000dd8 <HAL_TIM_PeriodElapsedCallback+0xc8>
				LTTO_IR_RX_AC_NewIRPulseReceived(IR_RX_SensorTicks, !IR_RX_LastState);
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	0018      	movs	r0, r3
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	1e5a      	subs	r2, r3, #1
 8000dc0:	4193      	sbcs	r3, r2
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	4053      	eors	r3, r2
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	1c1a      	adds	r2, r3, #0
 8000dcc:	2301      	movs	r3, #1
 8000dce:	4013      	ands	r3, r2
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	f002 fbc6 	bl	8003564 <LTTO_IR_RX_AC_NewIRPulseReceived>
			IR_RX_SensorTicks = 0;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	801a      	strh	r2, [r3, #0]
			IR_RX_LastState = IR_RX_currentState;
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000de0:	781a      	ldrb	r2, [r3, #0]
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000de4:	701a      	strb	r2, [r3, #0]
}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b002      	add	sp, #8
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	40014800 	.word	0x40014800
 8000df4:	20001990 	.word	0x20001990
 8000df8:	2000002c 	.word	0x2000002c
 8000dfc:	2000002d 	.word	0x2000002d
 8000e00:	2000002e 	.word	0x2000002e
 8000e04:	00002710 	.word	0x00002710

08000e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_MspInit+0x50>)
 8000e1c:	699a      	ldr	r2, [r3, #24]
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_MspInit+0x50>)
 8000e20:	2101      	movs	r1, #1
 8000e22:	430a      	orrs	r2, r1
 8000e24:	619a      	str	r2, [r3, #24]
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <HAL_MspInit+0x50>)
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <HAL_MspInit+0x50>)
 8000e34:	69da      	ldr	r2, [r3, #28]
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <HAL_MspInit+0x50>)
 8000e38:	2180      	movs	r1, #128	; 0x80
 8000e3a:	0549      	lsls	r1, r1, #21
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	61da      	str	r2, [r3, #28]
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <HAL_MspInit+0x50>)
 8000e42:	69da      	ldr	r2, [r3, #28]
 8000e44:	2380      	movs	r3, #128	; 0x80
 8000e46:	055b      	lsls	r3, r3, #21
 8000e48:	4013      	ands	r3, r2
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000e4e:	2302      	movs	r3, #2
 8000e50:	425b      	negs	r3, r3
 8000e52:	2200      	movs	r2, #0
 8000e54:	2103      	movs	r1, #3
 8000e56:	0018      	movs	r0, r3
 8000e58:	f000 f9ee 	bl	8001238 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b002      	add	sp, #8
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40021000 	.word	0x40021000

08000e68 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a09      	ldr	r2, [pc, #36]	; (8000e9c <HAL_TIM_PWM_MspInit+0x34>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d10b      	bne.n	8000e92 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <HAL_TIM_PWM_MspInit+0x38>)
 8000e7c:	69da      	ldr	r2, [r3, #28]
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <HAL_TIM_PWM_MspInit+0x38>)
 8000e80:	2102      	movs	r1, #2
 8000e82:	430a      	orrs	r2, r1
 8000e84:	61da      	str	r2, [r3, #28]
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_TIM_PWM_MspInit+0x38>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	46bd      	mov	sp, r7
 8000e96:	b004      	add	sp, #16
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	40000400 	.word	0x40000400
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <HAL_TIM_Base_MspInit+0x44>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d113      	bne.n	8000ede <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <HAL_TIM_Base_MspInit+0x48>)
 8000eb8:	69da      	ldr	r2, [r3, #28]
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <HAL_TIM_Base_MspInit+0x48>)
 8000ebc:	2110      	movs	r1, #16
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	61da      	str	r2, [r3, #28]
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <HAL_TIM_Base_MspInit+0x48>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	2210      	movs	r2, #16
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2103      	movs	r1, #3
 8000ed2:	2011      	movs	r0, #17
 8000ed4:	f000 f9b0 	bl	8001238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000ed8:	2011      	movs	r0, #17
 8000eda:	f000 f9c2 	bl	8001262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	b004      	add	sp, #16
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	40001000 	.word	0x40001000
 8000eec:	40021000 	.word	0x40021000

08000ef0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	230c      	movs	r3, #12
 8000efa:	18fb      	adds	r3, r7, r3
 8000efc:	0018      	movs	r0, r3
 8000efe:	2314      	movs	r3, #20
 8000f00:	001a      	movs	r2, r3
 8000f02:	2100      	movs	r1, #0
 8000f04:	f004 fec7 	bl	8005c96 <memset>
  if(htim->Instance==TIM3)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a15      	ldr	r2, [pc, #84]	; (8000f64 <HAL_TIM_MspPostInit+0x74>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d124      	bne.n	8000f5c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_TIM_MspPostInit+0x78>)
 8000f14:	695a      	ldr	r2, [r3, #20]
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <HAL_TIM_MspPostInit+0x78>)
 8000f18:	2180      	movs	r1, #128	; 0x80
 8000f1a:	0289      	lsls	r1, r1, #10
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	615a      	str	r2, [r3, #20]
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_TIM_MspPostInit+0x78>)
 8000f22:	695a      	ldr	r2, [r3, #20]
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	029b      	lsls	r3, r3, #10
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = IR_MOD_Out_Pin;
 8000f2e:	210c      	movs	r1, #12
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	2240      	movs	r2, #64	; 0x40
 8000f34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	2202      	movs	r2, #2
 8000f3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	187b      	adds	r3, r7, r1
 8000f44:	2200      	movs	r2, #0
 8000f46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(IR_MOD_Out_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	187a      	adds	r2, r7, r1
 8000f50:	2390      	movs	r3, #144	; 0x90
 8000f52:	05db      	lsls	r3, r3, #23
 8000f54:	0011      	movs	r1, r2
 8000f56:	0018      	movs	r0, r3
 8000f58:	f000 f994 	bl	8001284 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f5c:	46c0      	nop			; (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b008      	add	sp, #32
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40000400 	.word	0x40000400
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	0019      	movs	r1, r3
 8000f82:	2016      	movs	r0, #22
 8000f84:	f000 f958 	bl	8001238 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000f88:	2016      	movs	r0, #22
 8000f8a:	f000 f96a 	bl	8001262 <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000f8e:	4b21      	ldr	r3, [pc, #132]	; (8001014 <HAL_InitTick+0xa8>)
 8000f90:	699a      	ldr	r2, [r3, #24]
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <HAL_InitTick+0xa8>)
 8000f94:	2180      	movs	r1, #128	; 0x80
 8000f96:	02c9      	lsls	r1, r1, #11
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	619a      	str	r2, [r3, #24]
 8000f9c:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <HAL_InitTick+0xa8>)
 8000f9e:	699a      	ldr	r2, [r3, #24]
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	02db      	lsls	r3, r3, #11
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000faa:	230c      	movs	r3, #12
 8000fac:	18fa      	adds	r2, r7, r3
 8000fae:	2310      	movs	r3, #16
 8000fb0:	18fb      	adds	r3, r7, r3
 8000fb2:	0011      	movs	r1, r2
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f000 ff81 	bl	8001ebc <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fba:	f000 ff69 	bl	8001e90 <HAL_RCC_GetPCLK1Freq>
 8000fbe:	0003      	movs	r3, r0
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	4914      	ldr	r1, [pc, #80]	; (8001018 <HAL_InitTick+0xac>)
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f7ff f89e 	bl	8000108 <__udivsi3>
 8000fcc:	0003      	movs	r3, r0
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	623b      	str	r3, [r7, #32]

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_InitTick+0xb0>)
 8000fd4:	4a12      	ldr	r2, [pc, #72]	; (8001020 <HAL_InitTick+0xb4>)
 8000fd6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000fd8:	4b10      	ldr	r3, [pc, #64]	; (800101c <HAL_InitTick+0xb0>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	; (8001024 <HAL_InitTick+0xb8>)
 8000fdc:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_InitTick+0xb0>)
 8000fe0:	6a3a      	ldr	r2, [r7, #32]
 8000fe2:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 8000fe4:	4b0d      	ldr	r3, [pc, #52]	; (800101c <HAL_InitTick+0xb0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HAL_InitTick+0xb0>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_InitTick+0xb0>)
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f000 ff8c 	bl	8001f10 <HAL_TIM_Base_Init>
 8000ff8:	1e03      	subs	r3, r0, #0
 8000ffa:	d105      	bne.n	8001008 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <HAL_InitTick+0xb0>)
 8000ffe:	0018      	movs	r0, r3
 8001000:	f000 ffd6 	bl	8001fb0 <HAL_TIM_Base_Start_IT>
 8001004:	0003      	movs	r3, r0
 8001006:	e000      	b.n	800100a <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
}
 800100a:	0018      	movs	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	b00a      	add	sp, #40	; 0x28
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	40021000 	.word	0x40021000
 8001018:	000f4240 	.word	0x000f4240
 800101c:	200019e0 	.word	0x200019e0
 8001020:	40014800 	.word	0x40014800
 8001024:	000003e7 	.word	0x000003e7

08001028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800102c:	46c0      	nop			; (mov r8, r8)
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <HardFault_Handler+0x4>

08001038 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <TIM6_IRQHandler+0x14>)
 800103e:	0018      	movs	r0, r3
 8001040:	f001 f904 	bl	800224c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001044:	46c0      	nop			; (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	20001990 	.word	0x20001990

08001050 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <TIM17_IRQHandler+0x14>)
 8001056:	0018      	movs	r0, r3
 8001058:	f001 f8f8 	bl	800224c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800105c:	46c0      	nop			; (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	200019e0 	.word	0x200019e0

08001068 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001074:	480d      	ldr	r0, [pc, #52]	; (80010ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001076:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001078:	480d      	ldr	r0, [pc, #52]	; (80010b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800107a:	490e      	ldr	r1, [pc, #56]	; (80010b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800107c:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <LoopForever+0xe>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001080:	e002      	b.n	8001088 <LoopCopyDataInit>

08001082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001086:	3304      	adds	r3, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800108c:	d3f9      	bcc.n	8001082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108e:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001090:	4c0b      	ldr	r4, [pc, #44]	; (80010c0 <LoopForever+0x16>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001094:	e001      	b.n	800109a <LoopFillZerobss>

08001096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001098:	3204      	adds	r2, #4

0800109a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800109c:	d3fb      	bcc.n	8001096 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800109e:	f7ff ffe3 	bl	8001068 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80010a2:	f004 fdcb 	bl	8005c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010a6:	f7ff fa59 	bl	800055c <main>

080010aa <LoopForever>:

LoopForever:
    b LoopForever
 80010aa:	e7fe      	b.n	80010aa <LoopForever>
  ldr   r0, =_estack
 80010ac:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80010b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010b8:	08005ed4 	.word	0x08005ed4
  ldr r2, =_sbss
 80010bc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010c0:	20001a9c 	.word	0x20001a9c

080010c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010c4:	e7fe      	b.n	80010c4 <ADC1_IRQHandler>
	...

080010c8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <HAL_Init+0x24>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_Init+0x24>)
 80010d2:	2110      	movs	r1, #16
 80010d4:	430a      	orrs	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff ff47 	bl	8000f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010de:	f7ff fe99 	bl	8000e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	0018      	movs	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	40022000 	.word	0x40022000

080010f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <HAL_IncTick+0x1c>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	001a      	movs	r2, r3
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <HAL_IncTick+0x20>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	18d2      	adds	r2, r2, r3
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <HAL_IncTick+0x20>)
 8001102:	601a      	str	r2, [r3, #0]
}
 8001104:	46c0      	nop			; (mov r8, r8)
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	20000008 	.word	0x20000008
 8001110:	20001a28 	.word	0x20001a28

08001114 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  return uwTick;
 8001118:	4b02      	ldr	r3, [pc, #8]	; (8001124 <HAL_GetTick+0x10>)
 800111a:	681b      	ldr	r3, [r3, #0]
}
 800111c:	0018      	movs	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	20001a28 	.word	0x20001a28

08001128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	0002      	movs	r2, r0
 8001130:	1dfb      	adds	r3, r7, #7
 8001132:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001134:	1dfb      	adds	r3, r7, #7
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b7f      	cmp	r3, #127	; 0x7f
 800113a:	d809      	bhi.n	8001150 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113c:	1dfb      	adds	r3, r7, #7
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	001a      	movs	r2, r3
 8001142:	231f      	movs	r3, #31
 8001144:	401a      	ands	r2, r3
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <__NVIC_EnableIRQ+0x30>)
 8001148:	2101      	movs	r1, #1
 800114a:	4091      	lsls	r1, r2
 800114c:	000a      	movs	r2, r1
 800114e:	601a      	str	r2, [r3, #0]
  }
}
 8001150:	46c0      	nop			; (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	b002      	add	sp, #8
 8001156:	bd80      	pop	{r7, pc}
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	0002      	movs	r2, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	1dfb      	adds	r3, r7, #7
 8001168:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800116a:	1dfb      	adds	r3, r7, #7
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b7f      	cmp	r3, #127	; 0x7f
 8001170:	d828      	bhi.n	80011c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001172:	4a2f      	ldr	r2, [pc, #188]	; (8001230 <__NVIC_SetPriority+0xd4>)
 8001174:	1dfb      	adds	r3, r7, #7
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b25b      	sxtb	r3, r3
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	33c0      	adds	r3, #192	; 0xc0
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	589b      	ldr	r3, [r3, r2]
 8001182:	1dfa      	adds	r2, r7, #7
 8001184:	7812      	ldrb	r2, [r2, #0]
 8001186:	0011      	movs	r1, r2
 8001188:	2203      	movs	r2, #3
 800118a:	400a      	ands	r2, r1
 800118c:	00d2      	lsls	r2, r2, #3
 800118e:	21ff      	movs	r1, #255	; 0xff
 8001190:	4091      	lsls	r1, r2
 8001192:	000a      	movs	r2, r1
 8001194:	43d2      	mvns	r2, r2
 8001196:	401a      	ands	r2, r3
 8001198:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	019b      	lsls	r3, r3, #6
 800119e:	22ff      	movs	r2, #255	; 0xff
 80011a0:	401a      	ands	r2, r3
 80011a2:	1dfb      	adds	r3, r7, #7
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	0018      	movs	r0, r3
 80011a8:	2303      	movs	r3, #3
 80011aa:	4003      	ands	r3, r0
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011b0:	481f      	ldr	r0, [pc, #124]	; (8001230 <__NVIC_SetPriority+0xd4>)
 80011b2:	1dfb      	adds	r3, r7, #7
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	b25b      	sxtb	r3, r3
 80011b8:	089b      	lsrs	r3, r3, #2
 80011ba:	430a      	orrs	r2, r1
 80011bc:	33c0      	adds	r3, #192	; 0xc0
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011c2:	e031      	b.n	8001228 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011c4:	4a1b      	ldr	r2, [pc, #108]	; (8001234 <__NVIC_SetPriority+0xd8>)
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	0019      	movs	r1, r3
 80011cc:	230f      	movs	r3, #15
 80011ce:	400b      	ands	r3, r1
 80011d0:	3b08      	subs	r3, #8
 80011d2:	089b      	lsrs	r3, r3, #2
 80011d4:	3306      	adds	r3, #6
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	18d3      	adds	r3, r2, r3
 80011da:	3304      	adds	r3, #4
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	1dfa      	adds	r2, r7, #7
 80011e0:	7812      	ldrb	r2, [r2, #0]
 80011e2:	0011      	movs	r1, r2
 80011e4:	2203      	movs	r2, #3
 80011e6:	400a      	ands	r2, r1
 80011e8:	00d2      	lsls	r2, r2, #3
 80011ea:	21ff      	movs	r1, #255	; 0xff
 80011ec:	4091      	lsls	r1, r2
 80011ee:	000a      	movs	r2, r1
 80011f0:	43d2      	mvns	r2, r2
 80011f2:	401a      	ands	r2, r3
 80011f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	019b      	lsls	r3, r3, #6
 80011fa:	22ff      	movs	r2, #255	; 0xff
 80011fc:	401a      	ands	r2, r3
 80011fe:	1dfb      	adds	r3, r7, #7
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	0018      	movs	r0, r3
 8001204:	2303      	movs	r3, #3
 8001206:	4003      	ands	r3, r0
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800120c:	4809      	ldr	r0, [pc, #36]	; (8001234 <__NVIC_SetPriority+0xd8>)
 800120e:	1dfb      	adds	r3, r7, #7
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	001c      	movs	r4, r3
 8001214:	230f      	movs	r3, #15
 8001216:	4023      	ands	r3, r4
 8001218:	3b08      	subs	r3, #8
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	430a      	orrs	r2, r1
 800121e:	3306      	adds	r3, #6
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	18c3      	adds	r3, r0, r3
 8001224:	3304      	adds	r3, #4
 8001226:	601a      	str	r2, [r3, #0]
}
 8001228:	46c0      	nop			; (mov r8, r8)
 800122a:	46bd      	mov	sp, r7
 800122c:	b003      	add	sp, #12
 800122e:	bd90      	pop	{r4, r7, pc}
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	210f      	movs	r1, #15
 8001244:	187b      	adds	r3, r7, r1
 8001246:	1c02      	adds	r2, r0, #0
 8001248:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	187b      	adds	r3, r7, r1
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b25b      	sxtb	r3, r3
 8001252:	0011      	movs	r1, r2
 8001254:	0018      	movs	r0, r3
 8001256:	f7ff ff81 	bl	800115c <__NVIC_SetPriority>
}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	b004      	add	sp, #16
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	0002      	movs	r2, r0
 800126a:	1dfb      	adds	r3, r7, #7
 800126c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800126e:	1dfb      	adds	r3, r7, #7
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b25b      	sxtb	r3, r3
 8001274:	0018      	movs	r0, r3
 8001276:	f7ff ff57 	bl	8001128 <__NVIC_EnableIRQ>
}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	46bd      	mov	sp, r7
 800127e:	b002      	add	sp, #8
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001292:	e14f      	b.n	8001534 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2101      	movs	r1, #1
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	4091      	lsls	r1, r2
 800129e:	000a      	movs	r2, r1
 80012a0:	4013      	ands	r3, r2
 80012a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d100      	bne.n	80012ac <HAL_GPIO_Init+0x28>
 80012aa:	e140      	b.n	800152e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d00b      	beq.n	80012cc <HAL_GPIO_Init+0x48>
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d007      	beq.n	80012cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012c0:	2b11      	cmp	r3, #17
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b12      	cmp	r3, #18
 80012ca:	d130      	bne.n	800132e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	409a      	lsls	r2, r3
 80012da:	0013      	movs	r3, r2
 80012dc:	43da      	mvns	r2, r3
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	409a      	lsls	r2, r3
 80012ee:	0013      	movs	r3, r2
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001302:	2201      	movs	r2, #1
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
 8001308:	0013      	movs	r3, r2
 800130a:	43da      	mvns	r2, r3
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	2201      	movs	r2, #1
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
 8001320:	0013      	movs	r3, r2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	2203      	movs	r2, #3
 800133a:	409a      	lsls	r2, r3
 800133c:	0013      	movs	r3, r2
 800133e:	43da      	mvns	r2, r3
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	409a      	lsls	r2, r3
 8001350:	0013      	movs	r3, r2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b02      	cmp	r3, #2
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0xea>
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b12      	cmp	r3, #18
 800136c:	d123      	bne.n	80013b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	08da      	lsrs	r2, r3, #3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3208      	adds	r2, #8
 8001376:	0092      	lsls	r2, r2, #2
 8001378:	58d3      	ldr	r3, [r2, r3]
 800137a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	2207      	movs	r2, #7
 8001380:	4013      	ands	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	220f      	movs	r2, #15
 8001386:	409a      	lsls	r2, r3
 8001388:	0013      	movs	r3, r2
 800138a:	43da      	mvns	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	691a      	ldr	r2, [r3, #16]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	2107      	movs	r1, #7
 800139a:	400b      	ands	r3, r1
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	409a      	lsls	r2, r3
 80013a0:	0013      	movs	r3, r2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	08da      	lsrs	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3208      	adds	r2, #8
 80013b0:	0092      	lsls	r2, r2, #2
 80013b2:	6939      	ldr	r1, [r7, #16]
 80013b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	2203      	movs	r2, #3
 80013c2:	409a      	lsls	r2, r3
 80013c4:	0013      	movs	r3, r2
 80013c6:	43da      	mvns	r2, r3
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2203      	movs	r2, #3
 80013d4:	401a      	ands	r2, r3
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	409a      	lsls	r2, r3
 80013dc:	0013      	movs	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	055b      	lsls	r3, r3, #21
 80013f2:	4013      	ands	r3, r2
 80013f4:	d100      	bne.n	80013f8 <HAL_GPIO_Init+0x174>
 80013f6:	e09a      	b.n	800152e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f8:	4b54      	ldr	r3, [pc, #336]	; (800154c <HAL_GPIO_Init+0x2c8>)
 80013fa:	699a      	ldr	r2, [r3, #24]
 80013fc:	4b53      	ldr	r3, [pc, #332]	; (800154c <HAL_GPIO_Init+0x2c8>)
 80013fe:	2101      	movs	r1, #1
 8001400:	430a      	orrs	r2, r1
 8001402:	619a      	str	r2, [r3, #24]
 8001404:	4b51      	ldr	r3, [pc, #324]	; (800154c <HAL_GPIO_Init+0x2c8>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	2201      	movs	r2, #1
 800140a:	4013      	ands	r3, r2
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001410:	4a4f      	ldr	r2, [pc, #316]	; (8001550 <HAL_GPIO_Init+0x2cc>)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	3302      	adds	r3, #2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	589b      	ldr	r3, [r3, r2]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	2203      	movs	r2, #3
 8001422:	4013      	ands	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	220f      	movs	r2, #15
 8001428:	409a      	lsls	r2, r3
 800142a:	0013      	movs	r3, r2
 800142c:	43da      	mvns	r2, r3
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	2390      	movs	r3, #144	; 0x90
 8001438:	05db      	lsls	r3, r3, #23
 800143a:	429a      	cmp	r2, r3
 800143c:	d013      	beq.n	8001466 <HAL_GPIO_Init+0x1e2>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a44      	ldr	r2, [pc, #272]	; (8001554 <HAL_GPIO_Init+0x2d0>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d00d      	beq.n	8001462 <HAL_GPIO_Init+0x1de>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a43      	ldr	r2, [pc, #268]	; (8001558 <HAL_GPIO_Init+0x2d4>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d007      	beq.n	800145e <HAL_GPIO_Init+0x1da>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a42      	ldr	r2, [pc, #264]	; (800155c <HAL_GPIO_Init+0x2d8>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d101      	bne.n	800145a <HAL_GPIO_Init+0x1d6>
 8001456:	2303      	movs	r3, #3
 8001458:	e006      	b.n	8001468 <HAL_GPIO_Init+0x1e4>
 800145a:	2305      	movs	r3, #5
 800145c:	e004      	b.n	8001468 <HAL_GPIO_Init+0x1e4>
 800145e:	2302      	movs	r3, #2
 8001460:	e002      	b.n	8001468 <HAL_GPIO_Init+0x1e4>
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <HAL_GPIO_Init+0x1e4>
 8001466:	2300      	movs	r3, #0
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	2103      	movs	r1, #3
 800146c:	400a      	ands	r2, r1
 800146e:	0092      	lsls	r2, r2, #2
 8001470:	4093      	lsls	r3, r2
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001478:	4935      	ldr	r1, [pc, #212]	; (8001550 <HAL_GPIO_Init+0x2cc>)
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	089b      	lsrs	r3, r3, #2
 800147e:	3302      	adds	r3, #2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001486:	4b36      	ldr	r3, [pc, #216]	; (8001560 <HAL_GPIO_Init+0x2dc>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	43da      	mvns	r2, r3
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	025b      	lsls	r3, r3, #9
 800149e:	4013      	ands	r3, r2
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014aa:	4b2d      	ldr	r3, [pc, #180]	; (8001560 <HAL_GPIO_Init+0x2dc>)
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80014b0:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <HAL_GPIO_Init+0x2dc>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	43da      	mvns	r2, r3
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	029b      	lsls	r3, r3, #10
 80014c8:	4013      	ands	r3, r2
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014d4:	4b22      	ldr	r3, [pc, #136]	; (8001560 <HAL_GPIO_Init+0x2dc>)
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014da:	4b21      	ldr	r3, [pc, #132]	; (8001560 <HAL_GPIO_Init+0x2dc>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	43da      	mvns	r2, r3
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	035b      	lsls	r3, r3, #13
 80014f2:	4013      	ands	r3, r2
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014fe:	4b18      	ldr	r3, [pc, #96]	; (8001560 <HAL_GPIO_Init+0x2dc>)
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001504:	4b16      	ldr	r3, [pc, #88]	; (8001560 <HAL_GPIO_Init+0x2dc>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	43da      	mvns	r2, r3
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	2380      	movs	r3, #128	; 0x80
 800151a:	039b      	lsls	r3, r3, #14
 800151c:	4013      	ands	r3, r2
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <HAL_GPIO_Init+0x2dc>)
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	3301      	adds	r3, #1
 8001532:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	40da      	lsrs	r2, r3
 800153c:	1e13      	subs	r3, r2, #0
 800153e:	d000      	beq.n	8001542 <HAL_GPIO_Init+0x2be>
 8001540:	e6a8      	b.n	8001294 <HAL_GPIO_Init+0x10>
  } 
}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	46bd      	mov	sp, r7
 8001546:	b006      	add	sp, #24
 8001548:	bd80      	pop	{r7, pc}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	40021000 	.word	0x40021000
 8001550:	40010000 	.word	0x40010000
 8001554:	48000400 	.word	0x48000400
 8001558:	48000800 	.word	0x48000800
 800155c:	48000c00 	.word	0x48000c00
 8001560:	40010400 	.word	0x40010400

08001564 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	000a      	movs	r2, r1
 800156e:	1cbb      	adds	r3, r7, #2
 8001570:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	1cba      	adds	r2, r7, #2
 8001578:	8812      	ldrh	r2, [r2, #0]
 800157a:	4013      	ands	r3, r2
 800157c:	d004      	beq.n	8001588 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800157e:	230f      	movs	r3, #15
 8001580:	18fb      	adds	r3, r7, r3
 8001582:	2201      	movs	r2, #1
 8001584:	701a      	strb	r2, [r3, #0]
 8001586:	e003      	b.n	8001590 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001588:	230f      	movs	r3, #15
 800158a:	18fb      	adds	r3, r7, r3
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001590:	230f      	movs	r3, #15
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	781b      	ldrb	r3, [r3, #0]
  }
 8001596:	0018      	movs	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	b004      	add	sp, #16
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	0008      	movs	r0, r1
 80015a8:	0011      	movs	r1, r2
 80015aa:	1cbb      	adds	r3, r7, #2
 80015ac:	1c02      	adds	r2, r0, #0
 80015ae:	801a      	strh	r2, [r3, #0]
 80015b0:	1c7b      	adds	r3, r7, #1
 80015b2:	1c0a      	adds	r2, r1, #0
 80015b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015b6:	1c7b      	adds	r3, r7, #1
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d004      	beq.n	80015c8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015be:	1cbb      	adds	r3, r7, #2
 80015c0:	881a      	ldrh	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015c6:	e003      	b.n	80015d0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015c8:	1cbb      	adds	r3, r7, #2
 80015ca:	881a      	ldrh	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b002      	add	sp, #8
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e305      	b.n	8001bf6 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2201      	movs	r2, #1
 80015f0:	4013      	ands	r3, r2
 80015f2:	d100      	bne.n	80015f6 <HAL_RCC_OscConfig+0x1e>
 80015f4:	e08d      	b.n	8001712 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015f6:	4bc5      	ldr	r3, [pc, #788]	; (800190c <HAL_RCC_OscConfig+0x334>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	220c      	movs	r2, #12
 80015fc:	4013      	ands	r3, r2
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d00e      	beq.n	8001620 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001602:	4bc2      	ldr	r3, [pc, #776]	; (800190c <HAL_RCC_OscConfig+0x334>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	220c      	movs	r2, #12
 8001608:	4013      	ands	r3, r2
 800160a:	2b08      	cmp	r3, #8
 800160c:	d116      	bne.n	800163c <HAL_RCC_OscConfig+0x64>
 800160e:	4bbf      	ldr	r3, [pc, #764]	; (800190c <HAL_RCC_OscConfig+0x334>)
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	23c0      	movs	r3, #192	; 0xc0
 8001614:	025b      	lsls	r3, r3, #9
 8001616:	401a      	ands	r2, r3
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	025b      	lsls	r3, r3, #9
 800161c:	429a      	cmp	r2, r3
 800161e:	d10d      	bne.n	800163c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001620:	4bba      	ldr	r3, [pc, #744]	; (800190c <HAL_RCC_OscConfig+0x334>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	029b      	lsls	r3, r3, #10
 8001628:	4013      	ands	r3, r2
 800162a:	d100      	bne.n	800162e <HAL_RCC_OscConfig+0x56>
 800162c:	e070      	b.n	8001710 <HAL_RCC_OscConfig+0x138>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d000      	beq.n	8001638 <HAL_RCC_OscConfig+0x60>
 8001636:	e06b      	b.n	8001710 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e2dc      	b.n	8001bf6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d107      	bne.n	8001654 <HAL_RCC_OscConfig+0x7c>
 8001644:	4bb1      	ldr	r3, [pc, #708]	; (800190c <HAL_RCC_OscConfig+0x334>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4bb0      	ldr	r3, [pc, #704]	; (800190c <HAL_RCC_OscConfig+0x334>)
 800164a:	2180      	movs	r1, #128	; 0x80
 800164c:	0249      	lsls	r1, r1, #9
 800164e:	430a      	orrs	r2, r1
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	e02f      	b.n	80016b4 <HAL_RCC_OscConfig+0xdc>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10c      	bne.n	8001676 <HAL_RCC_OscConfig+0x9e>
 800165c:	4bab      	ldr	r3, [pc, #684]	; (800190c <HAL_RCC_OscConfig+0x334>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4baa      	ldr	r3, [pc, #680]	; (800190c <HAL_RCC_OscConfig+0x334>)
 8001662:	49ab      	ldr	r1, [pc, #684]	; (8001910 <HAL_RCC_OscConfig+0x338>)
 8001664:	400a      	ands	r2, r1
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	4ba8      	ldr	r3, [pc, #672]	; (800190c <HAL_RCC_OscConfig+0x334>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4ba7      	ldr	r3, [pc, #668]	; (800190c <HAL_RCC_OscConfig+0x334>)
 800166e:	49a9      	ldr	r1, [pc, #676]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 8001670:	400a      	ands	r2, r1
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	e01e      	b.n	80016b4 <HAL_RCC_OscConfig+0xdc>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b05      	cmp	r3, #5
 800167c:	d10e      	bne.n	800169c <HAL_RCC_OscConfig+0xc4>
 800167e:	4ba3      	ldr	r3, [pc, #652]	; (800190c <HAL_RCC_OscConfig+0x334>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	4ba2      	ldr	r3, [pc, #648]	; (800190c <HAL_RCC_OscConfig+0x334>)
 8001684:	2180      	movs	r1, #128	; 0x80
 8001686:	02c9      	lsls	r1, r1, #11
 8001688:	430a      	orrs	r2, r1
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	4b9f      	ldr	r3, [pc, #636]	; (800190c <HAL_RCC_OscConfig+0x334>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b9e      	ldr	r3, [pc, #632]	; (800190c <HAL_RCC_OscConfig+0x334>)
 8001692:	2180      	movs	r1, #128	; 0x80
 8001694:	0249      	lsls	r1, r1, #9
 8001696:	430a      	orrs	r2, r1
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	e00b      	b.n	80016b4 <HAL_RCC_OscConfig+0xdc>
 800169c:	4b9b      	ldr	r3, [pc, #620]	; (800190c <HAL_RCC_OscConfig+0x334>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b9a      	ldr	r3, [pc, #616]	; (800190c <HAL_RCC_OscConfig+0x334>)
 80016a2:	499b      	ldr	r1, [pc, #620]	; (8001910 <HAL_RCC_OscConfig+0x338>)
 80016a4:	400a      	ands	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	4b98      	ldr	r3, [pc, #608]	; (800190c <HAL_RCC_OscConfig+0x334>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b97      	ldr	r3, [pc, #604]	; (800190c <HAL_RCC_OscConfig+0x334>)
 80016ae:	4999      	ldr	r1, [pc, #612]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 80016b0:	400a      	ands	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d014      	beq.n	80016e6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff fd2a 	bl	8001114 <HAL_GetTick>
 80016c0:	0003      	movs	r3, r0
 80016c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c6:	f7ff fd25 	bl	8001114 <HAL_GetTick>
 80016ca:	0002      	movs	r2, r0
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b64      	cmp	r3, #100	; 0x64
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e28e      	b.n	8001bf6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d8:	4b8c      	ldr	r3, [pc, #560]	; (800190c <HAL_RCC_OscConfig+0x334>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	029b      	lsls	r3, r3, #10
 80016e0:	4013      	ands	r3, r2
 80016e2:	d0f0      	beq.n	80016c6 <HAL_RCC_OscConfig+0xee>
 80016e4:	e015      	b.n	8001712 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e6:	f7ff fd15 	bl	8001114 <HAL_GetTick>
 80016ea:	0003      	movs	r3, r0
 80016ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f0:	f7ff fd10 	bl	8001114 <HAL_GetTick>
 80016f4:	0002      	movs	r2, r0
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b64      	cmp	r3, #100	; 0x64
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e279      	b.n	8001bf6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001702:	4b82      	ldr	r3, [pc, #520]	; (800190c <HAL_RCC_OscConfig+0x334>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	029b      	lsls	r3, r3, #10
 800170a:	4013      	ands	r3, r2
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x118>
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001710:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2202      	movs	r2, #2
 8001718:	4013      	ands	r3, r2
 800171a:	d100      	bne.n	800171e <HAL_RCC_OscConfig+0x146>
 800171c:	e06c      	b.n	80017f8 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800171e:	4b7b      	ldr	r3, [pc, #492]	; (800190c <HAL_RCC_OscConfig+0x334>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	220c      	movs	r2, #12
 8001724:	4013      	ands	r3, r2
 8001726:	d00e      	beq.n	8001746 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001728:	4b78      	ldr	r3, [pc, #480]	; (800190c <HAL_RCC_OscConfig+0x334>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	220c      	movs	r2, #12
 800172e:	4013      	ands	r3, r2
 8001730:	2b08      	cmp	r3, #8
 8001732:	d11f      	bne.n	8001774 <HAL_RCC_OscConfig+0x19c>
 8001734:	4b75      	ldr	r3, [pc, #468]	; (800190c <HAL_RCC_OscConfig+0x334>)
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	23c0      	movs	r3, #192	; 0xc0
 800173a:	025b      	lsls	r3, r3, #9
 800173c:	401a      	ands	r2, r3
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	429a      	cmp	r2, r3
 8001744:	d116      	bne.n	8001774 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001746:	4b71      	ldr	r3, [pc, #452]	; (800190c <HAL_RCC_OscConfig+0x334>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2202      	movs	r2, #2
 800174c:	4013      	ands	r3, r2
 800174e:	d005      	beq.n	800175c <HAL_RCC_OscConfig+0x184>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d001      	beq.n	800175c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e24c      	b.n	8001bf6 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175c:	4b6b      	ldr	r3, [pc, #428]	; (800190c <HAL_RCC_OscConfig+0x334>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	22f8      	movs	r2, #248	; 0xf8
 8001762:	4393      	bics	r3, r2
 8001764:	0019      	movs	r1, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	00da      	lsls	r2, r3, #3
 800176c:	4b67      	ldr	r3, [pc, #412]	; (800190c <HAL_RCC_OscConfig+0x334>)
 800176e:	430a      	orrs	r2, r1
 8001770:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001772:	e041      	b.n	80017f8 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d024      	beq.n	80017c6 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800177c:	4b63      	ldr	r3, [pc, #396]	; (800190c <HAL_RCC_OscConfig+0x334>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b62      	ldr	r3, [pc, #392]	; (800190c <HAL_RCC_OscConfig+0x334>)
 8001782:	2101      	movs	r1, #1
 8001784:	430a      	orrs	r2, r1
 8001786:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fcc4 	bl	8001114 <HAL_GetTick>
 800178c:	0003      	movs	r3, r0
 800178e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001792:	f7ff fcbf 	bl	8001114 <HAL_GetTick>
 8001796:	0002      	movs	r2, r0
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e228      	b.n	8001bf6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a4:	4b59      	ldr	r3, [pc, #356]	; (800190c <HAL_RCC_OscConfig+0x334>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2202      	movs	r2, #2
 80017aa:	4013      	ands	r3, r2
 80017ac:	d0f1      	beq.n	8001792 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ae:	4b57      	ldr	r3, [pc, #348]	; (800190c <HAL_RCC_OscConfig+0x334>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	22f8      	movs	r2, #248	; 0xf8
 80017b4:	4393      	bics	r3, r2
 80017b6:	0019      	movs	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	00da      	lsls	r2, r3, #3
 80017be:	4b53      	ldr	r3, [pc, #332]	; (800190c <HAL_RCC_OscConfig+0x334>)
 80017c0:	430a      	orrs	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	e018      	b.n	80017f8 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c6:	4b51      	ldr	r3, [pc, #324]	; (800190c <HAL_RCC_OscConfig+0x334>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	4b50      	ldr	r3, [pc, #320]	; (800190c <HAL_RCC_OscConfig+0x334>)
 80017cc:	2101      	movs	r1, #1
 80017ce:	438a      	bics	r2, r1
 80017d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d2:	f7ff fc9f 	bl	8001114 <HAL_GetTick>
 80017d6:	0003      	movs	r3, r0
 80017d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017dc:	f7ff fc9a 	bl	8001114 <HAL_GetTick>
 80017e0:	0002      	movs	r2, r0
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e203      	b.n	8001bf6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ee:	4b47      	ldr	r3, [pc, #284]	; (800190c <HAL_RCC_OscConfig+0x334>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2202      	movs	r2, #2
 80017f4:	4013      	ands	r3, r2
 80017f6:	d1f1      	bne.n	80017dc <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2208      	movs	r2, #8
 80017fe:	4013      	ands	r3, r2
 8001800:	d036      	beq.n	8001870 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d019      	beq.n	800183e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800180a:	4b40      	ldr	r3, [pc, #256]	; (800190c <HAL_RCC_OscConfig+0x334>)
 800180c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800180e:	4b3f      	ldr	r3, [pc, #252]	; (800190c <HAL_RCC_OscConfig+0x334>)
 8001810:	2101      	movs	r1, #1
 8001812:	430a      	orrs	r2, r1
 8001814:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001816:	f7ff fc7d 	bl	8001114 <HAL_GetTick>
 800181a:	0003      	movs	r3, r0
 800181c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001820:	f7ff fc78 	bl	8001114 <HAL_GetTick>
 8001824:	0002      	movs	r2, r0
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e1e1      	b.n	8001bf6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001832:	4b36      	ldr	r3, [pc, #216]	; (800190c <HAL_RCC_OscConfig+0x334>)
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	2202      	movs	r2, #2
 8001838:	4013      	ands	r3, r2
 800183a:	d0f1      	beq.n	8001820 <HAL_RCC_OscConfig+0x248>
 800183c:	e018      	b.n	8001870 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800183e:	4b33      	ldr	r3, [pc, #204]	; (800190c <HAL_RCC_OscConfig+0x334>)
 8001840:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001842:	4b32      	ldr	r3, [pc, #200]	; (800190c <HAL_RCC_OscConfig+0x334>)
 8001844:	2101      	movs	r1, #1
 8001846:	438a      	bics	r2, r1
 8001848:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184a:	f7ff fc63 	bl	8001114 <HAL_GetTick>
 800184e:	0003      	movs	r3, r0
 8001850:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001854:	f7ff fc5e 	bl	8001114 <HAL_GetTick>
 8001858:	0002      	movs	r2, r0
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e1c7      	b.n	8001bf6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001866:	4b29      	ldr	r3, [pc, #164]	; (800190c <HAL_RCC_OscConfig+0x334>)
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	2202      	movs	r2, #2
 800186c:	4013      	ands	r3, r2
 800186e:	d1f1      	bne.n	8001854 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2204      	movs	r2, #4
 8001876:	4013      	ands	r3, r2
 8001878:	d100      	bne.n	800187c <HAL_RCC_OscConfig+0x2a4>
 800187a:	e0b5      	b.n	80019e8 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 800187c:	231f      	movs	r3, #31
 800187e:	18fb      	adds	r3, r7, r3
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001884:	4b21      	ldr	r3, [pc, #132]	; (800190c <HAL_RCC_OscConfig+0x334>)
 8001886:	69da      	ldr	r2, [r3, #28]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	055b      	lsls	r3, r3, #21
 800188c:	4013      	ands	r3, r2
 800188e:	d111      	bne.n	80018b4 <HAL_RCC_OscConfig+0x2dc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001890:	4b1e      	ldr	r3, [pc, #120]	; (800190c <HAL_RCC_OscConfig+0x334>)
 8001892:	69da      	ldr	r2, [r3, #28]
 8001894:	4b1d      	ldr	r3, [pc, #116]	; (800190c <HAL_RCC_OscConfig+0x334>)
 8001896:	2180      	movs	r1, #128	; 0x80
 8001898:	0549      	lsls	r1, r1, #21
 800189a:	430a      	orrs	r2, r1
 800189c:	61da      	str	r2, [r3, #28]
 800189e:	4b1b      	ldr	r3, [pc, #108]	; (800190c <HAL_RCC_OscConfig+0x334>)
 80018a0:	69da      	ldr	r2, [r3, #28]
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	055b      	lsls	r3, r3, #21
 80018a6:	4013      	ands	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018ac:	231f      	movs	r3, #31
 80018ae:	18fb      	adds	r3, r7, r3
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b4:	4b18      	ldr	r3, [pc, #96]	; (8001918 <HAL_RCC_OscConfig+0x340>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4013      	ands	r3, r2
 80018be:	d11a      	bne.n	80018f6 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018c0:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_RCC_OscConfig+0x340>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <HAL_RCC_OscConfig+0x340>)
 80018c6:	2180      	movs	r1, #128	; 0x80
 80018c8:	0049      	lsls	r1, r1, #1
 80018ca:	430a      	orrs	r2, r1
 80018cc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ce:	f7ff fc21 	bl	8001114 <HAL_GetTick>
 80018d2:	0003      	movs	r3, r0
 80018d4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x312>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d8:	f7ff fc1c 	bl	8001114 <HAL_GetTick>
 80018dc:	0002      	movs	r2, r0
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	; 0x64
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x312>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e185      	b.n	8001bf6 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_RCC_OscConfig+0x340>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	4013      	ands	r3, r2
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x300>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d10e      	bne.n	800191c <HAL_RCC_OscConfig+0x344>
 80018fe:	4b03      	ldr	r3, [pc, #12]	; (800190c <HAL_RCC_OscConfig+0x334>)
 8001900:	6a1a      	ldr	r2, [r3, #32]
 8001902:	4b02      	ldr	r3, [pc, #8]	; (800190c <HAL_RCC_OscConfig+0x334>)
 8001904:	2101      	movs	r1, #1
 8001906:	430a      	orrs	r2, r1
 8001908:	621a      	str	r2, [r3, #32]
 800190a:	e035      	b.n	8001978 <HAL_RCC_OscConfig+0x3a0>
 800190c:	40021000 	.word	0x40021000
 8001910:	fffeffff 	.word	0xfffeffff
 8001914:	fffbffff 	.word	0xfffbffff
 8001918:	40007000 	.word	0x40007000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10c      	bne.n	800193e <HAL_RCC_OscConfig+0x366>
 8001924:	4bb6      	ldr	r3, [pc, #728]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001926:	6a1a      	ldr	r2, [r3, #32]
 8001928:	4bb5      	ldr	r3, [pc, #724]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 800192a:	2101      	movs	r1, #1
 800192c:	438a      	bics	r2, r1
 800192e:	621a      	str	r2, [r3, #32]
 8001930:	4bb3      	ldr	r3, [pc, #716]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001932:	6a1a      	ldr	r2, [r3, #32]
 8001934:	4bb2      	ldr	r3, [pc, #712]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001936:	2104      	movs	r1, #4
 8001938:	438a      	bics	r2, r1
 800193a:	621a      	str	r2, [r3, #32]
 800193c:	e01c      	b.n	8001978 <HAL_RCC_OscConfig+0x3a0>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2b05      	cmp	r3, #5
 8001944:	d10c      	bne.n	8001960 <HAL_RCC_OscConfig+0x388>
 8001946:	4bae      	ldr	r3, [pc, #696]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001948:	6a1a      	ldr	r2, [r3, #32]
 800194a:	4bad      	ldr	r3, [pc, #692]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 800194c:	2104      	movs	r1, #4
 800194e:	430a      	orrs	r2, r1
 8001950:	621a      	str	r2, [r3, #32]
 8001952:	4bab      	ldr	r3, [pc, #684]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001954:	6a1a      	ldr	r2, [r3, #32]
 8001956:	4baa      	ldr	r3, [pc, #680]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001958:	2101      	movs	r1, #1
 800195a:	430a      	orrs	r2, r1
 800195c:	621a      	str	r2, [r3, #32]
 800195e:	e00b      	b.n	8001978 <HAL_RCC_OscConfig+0x3a0>
 8001960:	4ba7      	ldr	r3, [pc, #668]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001962:	6a1a      	ldr	r2, [r3, #32]
 8001964:	4ba6      	ldr	r3, [pc, #664]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001966:	2101      	movs	r1, #1
 8001968:	438a      	bics	r2, r1
 800196a:	621a      	str	r2, [r3, #32]
 800196c:	4ba4      	ldr	r3, [pc, #656]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 800196e:	6a1a      	ldr	r2, [r3, #32]
 8001970:	4ba3      	ldr	r3, [pc, #652]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001972:	2104      	movs	r1, #4
 8001974:	438a      	bics	r2, r1
 8001976:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d014      	beq.n	80019aa <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001980:	f7ff fbc8 	bl	8001114 <HAL_GetTick>
 8001984:	0003      	movs	r3, r0
 8001986:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001988:	e009      	b.n	800199e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800198a:	f7ff fbc3 	bl	8001114 <HAL_GetTick>
 800198e:	0002      	movs	r2, r0
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	4a9b      	ldr	r2, [pc, #620]	; (8001c04 <HAL_RCC_OscConfig+0x62c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e12b      	b.n	8001bf6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199e:	4b98      	ldr	r3, [pc, #608]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	2202      	movs	r2, #2
 80019a4:	4013      	ands	r3, r2
 80019a6:	d0f0      	beq.n	800198a <HAL_RCC_OscConfig+0x3b2>
 80019a8:	e013      	b.n	80019d2 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019aa:	f7ff fbb3 	bl	8001114 <HAL_GetTick>
 80019ae:	0003      	movs	r3, r0
 80019b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b2:	e009      	b.n	80019c8 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019b4:	f7ff fbae 	bl	8001114 <HAL_GetTick>
 80019b8:	0002      	movs	r2, r0
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	4a91      	ldr	r2, [pc, #580]	; (8001c04 <HAL_RCC_OscConfig+0x62c>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e116      	b.n	8001bf6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c8:	4b8d      	ldr	r3, [pc, #564]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	2202      	movs	r2, #2
 80019ce:	4013      	ands	r3, r2
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019d2:	231f      	movs	r3, #31
 80019d4:	18fb      	adds	r3, r7, r3
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d105      	bne.n	80019e8 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019dc:	4b88      	ldr	r3, [pc, #544]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 80019de:	69da      	ldr	r2, [r3, #28]
 80019e0:	4b87      	ldr	r3, [pc, #540]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 80019e2:	4989      	ldr	r1, [pc, #548]	; (8001c08 <HAL_RCC_OscConfig+0x630>)
 80019e4:	400a      	ands	r2, r1
 80019e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2210      	movs	r2, #16
 80019ee:	4013      	ands	r3, r2
 80019f0:	d063      	beq.n	8001aba <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d12a      	bne.n	8001a50 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019fa:	4b81      	ldr	r3, [pc, #516]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 80019fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019fe:	4b80      	ldr	r3, [pc, #512]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001a00:	2104      	movs	r1, #4
 8001a02:	430a      	orrs	r2, r1
 8001a04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001a06:	4b7e      	ldr	r3, [pc, #504]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a0a:	4b7d      	ldr	r3, [pc, #500]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a12:	f7ff fb7f 	bl	8001114 <HAL_GetTick>
 8001a16:	0003      	movs	r3, r0
 8001a18:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a1c:	f7ff fb7a 	bl	8001114 <HAL_GetTick>
 8001a20:	0002      	movs	r2, r0
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e0e3      	b.n	8001bf6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a2e:	4b74      	ldr	r3, [pc, #464]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a32:	2202      	movs	r2, #2
 8001a34:	4013      	ands	r3, r2
 8001a36:	d0f1      	beq.n	8001a1c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a38:	4b71      	ldr	r3, [pc, #452]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a3c:	22f8      	movs	r2, #248	; 0xf8
 8001a3e:	4393      	bics	r3, r2
 8001a40:	0019      	movs	r1, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	00da      	lsls	r2, r3, #3
 8001a48:	4b6d      	ldr	r3, [pc, #436]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a4e:	e034      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	3305      	adds	r3, #5
 8001a56:	d111      	bne.n	8001a7c <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001a58:	4b69      	ldr	r3, [pc, #420]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001a5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a5c:	4b68      	ldr	r3, [pc, #416]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001a5e:	2104      	movs	r1, #4
 8001a60:	438a      	bics	r2, r1
 8001a62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a64:	4b66      	ldr	r3, [pc, #408]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a68:	22f8      	movs	r2, #248	; 0xf8
 8001a6a:	4393      	bics	r3, r2
 8001a6c:	0019      	movs	r1, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	00da      	lsls	r2, r3, #3
 8001a74:	4b62      	ldr	r3, [pc, #392]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001a76:	430a      	orrs	r2, r1
 8001a78:	635a      	str	r2, [r3, #52]	; 0x34
 8001a7a:	e01e      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a7c:	4b60      	ldr	r3, [pc, #384]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001a7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a80:	4b5f      	ldr	r3, [pc, #380]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001a82:	2104      	movs	r1, #4
 8001a84:	430a      	orrs	r2, r1
 8001a86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001a88:	4b5d      	ldr	r3, [pc, #372]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001a8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a8c:	4b5c      	ldr	r3, [pc, #368]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001a8e:	2101      	movs	r1, #1
 8001a90:	438a      	bics	r2, r1
 8001a92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a94:	f7ff fb3e 	bl	8001114 <HAL_GetTick>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a9e:	f7ff fb39 	bl	8001114 <HAL_GetTick>
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e0a2      	b.n	8001bf6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ab0:	4b53      	ldr	r3, [pc, #332]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d1f1      	bne.n	8001a9e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d100      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x4ec>
 8001ac2:	e097      	b.n	8001bf4 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ac4:	4b4e      	ldr	r3, [pc, #312]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	220c      	movs	r2, #12
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d100      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x4fa>
 8001ad0:	e06b      	b.n	8001baa <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d14c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ada:	4b49      	ldr	r3, [pc, #292]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4b48      	ldr	r3, [pc, #288]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001ae0:	494a      	ldr	r1, [pc, #296]	; (8001c0c <HAL_RCC_OscConfig+0x634>)
 8001ae2:	400a      	ands	r2, r1
 8001ae4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae6:	f7ff fb15 	bl	8001114 <HAL_GetTick>
 8001aea:	0003      	movs	r3, r0
 8001aec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af0:	f7ff fb10 	bl	8001114 <HAL_GetTick>
 8001af4:	0002      	movs	r2, r0
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e079      	b.n	8001bf6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b02:	4b3f      	ldr	r3, [pc, #252]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	049b      	lsls	r3, r3, #18
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b0e:	4b3c      	ldr	r3, [pc, #240]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b12:	220f      	movs	r2, #15
 8001b14:	4393      	bics	r3, r2
 8001b16:	0019      	movs	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b1c:	4b38      	ldr	r3, [pc, #224]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b22:	4b37      	ldr	r3, [pc, #220]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	4a3a      	ldr	r2, [pc, #232]	; (8001c10 <HAL_RCC_OscConfig+0x638>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	0019      	movs	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	431a      	orrs	r2, r3
 8001b36:	4b32      	ldr	r3, [pc, #200]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b3c:	4b30      	ldr	r3, [pc, #192]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b2f      	ldr	r3, [pc, #188]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001b42:	2180      	movs	r1, #128	; 0x80
 8001b44:	0449      	lsls	r1, r1, #17
 8001b46:	430a      	orrs	r2, r1
 8001b48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4a:	f7ff fae3 	bl	8001114 <HAL_GetTick>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b54:	f7ff fade 	bl	8001114 <HAL_GetTick>
 8001b58:	0002      	movs	r2, r0
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e047      	b.n	8001bf6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b66:	4b26      	ldr	r3, [pc, #152]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	049b      	lsls	r3, r3, #18
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0x57c>
 8001b72:	e03f      	b.n	8001bf4 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b74:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001b7a:	4924      	ldr	r1, [pc, #144]	; (8001c0c <HAL_RCC_OscConfig+0x634>)
 8001b7c:	400a      	ands	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff fac8 	bl	8001114 <HAL_GetTick>
 8001b84:	0003      	movs	r3, r0
 8001b86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b8a:	f7ff fac3 	bl	8001114 <HAL_GetTick>
 8001b8e:	0002      	movs	r2, r0
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e02c      	b.n	8001bf6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9c:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	049b      	lsls	r3, r3, #18
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d1f0      	bne.n	8001b8a <HAL_RCC_OscConfig+0x5b2>
 8001ba8:	e024      	b.n	8001bf4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d101      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e01f      	b.n	8001bf6 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001bb6:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001bbc:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	23c0      	movs	r3, #192	; 0xc0
 8001bc6:	025b      	lsls	r3, r3, #9
 8001bc8:	401a      	ands	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d10e      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	220f      	movs	r2, #15
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d107      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	23f0      	movs	r3, #240	; 0xf0
 8001be4:	039b      	lsls	r3, r3, #14
 8001be6:	401a      	ands	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	b008      	add	sp, #32
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	40021000 	.word	0x40021000
 8001c04:	00001388 	.word	0x00001388
 8001c08:	efffffff 	.word	0xefffffff
 8001c0c:	feffffff 	.word	0xfeffffff
 8001c10:	ffc27fff 	.word	0xffc27fff

08001c14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0b3      	b.n	8001d90 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c28:	4b5b      	ldr	r3, [pc, #364]	; (8001d98 <HAL_RCC_ClockConfig+0x184>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4013      	ands	r3, r2
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d911      	bls.n	8001c5a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c36:	4b58      	ldr	r3, [pc, #352]	; (8001d98 <HAL_RCC_ClockConfig+0x184>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4393      	bics	r3, r2
 8001c3e:	0019      	movs	r1, r3
 8001c40:	4b55      	ldr	r3, [pc, #340]	; (8001d98 <HAL_RCC_ClockConfig+0x184>)
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c48:	4b53      	ldr	r3, [pc, #332]	; (8001d98 <HAL_RCC_ClockConfig+0x184>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	4013      	ands	r3, r2
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d001      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e09a      	b.n	8001d90 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	4013      	ands	r3, r2
 8001c62:	d015      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2204      	movs	r2, #4
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d006      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c6e:	4b4b      	ldr	r3, [pc, #300]	; (8001d9c <HAL_RCC_ClockConfig+0x188>)
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	4b4a      	ldr	r3, [pc, #296]	; (8001d9c <HAL_RCC_ClockConfig+0x188>)
 8001c74:	21e0      	movs	r1, #224	; 0xe0
 8001c76:	00c9      	lsls	r1, r1, #3
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c7c:	4b47      	ldr	r3, [pc, #284]	; (8001d9c <HAL_RCC_ClockConfig+0x188>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	22f0      	movs	r2, #240	; 0xf0
 8001c82:	4393      	bics	r3, r2
 8001c84:	0019      	movs	r1, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	4b44      	ldr	r3, [pc, #272]	; (8001d9c <HAL_RCC_ClockConfig+0x188>)
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2201      	movs	r2, #1
 8001c96:	4013      	ands	r3, r2
 8001c98:	d040      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d107      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	4b3e      	ldr	r3, [pc, #248]	; (8001d9c <HAL_RCC_ClockConfig+0x188>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	029b      	lsls	r3, r3, #10
 8001caa:	4013      	ands	r3, r2
 8001cac:	d114      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e06e      	b.n	8001d90 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d107      	bne.n	8001cca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cba:	4b38      	ldr	r3, [pc, #224]	; (8001d9c <HAL_RCC_ClockConfig+0x188>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	049b      	lsls	r3, r3, #18
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d108      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e062      	b.n	8001d90 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cca:	4b34      	ldr	r3, [pc, #208]	; (8001d9c <HAL_RCC_ClockConfig+0x188>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d101      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e05b      	b.n	8001d90 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cd8:	4b30      	ldr	r3, [pc, #192]	; (8001d9c <HAL_RCC_ClockConfig+0x188>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2203      	movs	r2, #3
 8001cde:	4393      	bics	r3, r2
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <HAL_RCC_ClockConfig+0x188>)
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cec:	f7ff fa12 	bl	8001114 <HAL_GetTick>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf4:	e009      	b.n	8001d0a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf6:	f7ff fa0d 	bl	8001114 <HAL_GetTick>
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	4a27      	ldr	r2, [pc, #156]	; (8001da0 <HAL_RCC_ClockConfig+0x18c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e042      	b.n	8001d90 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <HAL_RCC_ClockConfig+0x188>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	220c      	movs	r2, #12
 8001d10:	401a      	ands	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d1ec      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <HAL_RCC_ClockConfig+0x184>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2201      	movs	r2, #1
 8001d22:	4013      	ands	r3, r2
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d211      	bcs.n	8001d4e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <HAL_RCC_ClockConfig+0x184>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	4393      	bics	r3, r2
 8001d32:	0019      	movs	r1, r3
 8001d34:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <HAL_RCC_ClockConfig+0x184>)
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3c:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <HAL_RCC_ClockConfig+0x184>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2201      	movs	r2, #1
 8001d42:	4013      	ands	r3, r2
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d001      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e020      	b.n	8001d90 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2204      	movs	r2, #4
 8001d54:	4013      	ands	r3, r2
 8001d56:	d009      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d58:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <HAL_RCC_ClockConfig+0x188>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	4a11      	ldr	r2, [pc, #68]	; (8001da4 <HAL_RCC_ClockConfig+0x190>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	0019      	movs	r1, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <HAL_RCC_ClockConfig+0x188>)
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d6c:	f000 f820 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 8001d70:	0001      	movs	r1, r0
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <HAL_RCC_ClockConfig+0x188>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	091b      	lsrs	r3, r3, #4
 8001d78:	220f      	movs	r2, #15
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <HAL_RCC_ClockConfig+0x194>)
 8001d7e:	5cd3      	ldrb	r3, [r2, r3]
 8001d80:	000a      	movs	r2, r1
 8001d82:	40da      	lsrs	r2, r3
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <HAL_RCC_ClockConfig+0x198>)
 8001d86:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f7ff f8ef 	bl	8000f6c <HAL_InitTick>
  
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	0018      	movs	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	b004      	add	sp, #16
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40022000 	.word	0x40022000
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	00001388 	.word	0x00001388
 8001da4:	fffff8ff 	.word	0xfffff8ff
 8001da8:	08005e18 	.word	0x08005e18
 8001dac:	20000004 	.word	0x20000004

08001db0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b08f      	sub	sp, #60	; 0x3c
 8001db4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001db6:	2314      	movs	r3, #20
 8001db8:	18fb      	adds	r3, r7, r3
 8001dba:	4a2c      	ldr	r2, [pc, #176]	; (8001e6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dbc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001dbe:	c313      	stmia	r3!, {r0, r1, r4}
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	4a2a      	ldr	r2, [pc, #168]	; (8001e70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dc8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001dca:	c313      	stmia	r3!, {r0, r1, r4}
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dd8:	2300      	movs	r3, #0
 8001dda:	637b      	str	r3, [r7, #52]	; 0x34
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001de4:	4b23      	ldr	r3, [pc, #140]	; (8001e74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dec:	220c      	movs	r2, #12
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d002      	beq.n	8001dfa <HAL_RCC_GetSysClockFreq+0x4a>
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d003      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0x50>
 8001df8:	e02f      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dfa:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001dfc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dfe:	e02f      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e02:	0c9b      	lsrs	r3, r3, #18
 8001e04:	220f      	movs	r2, #15
 8001e06:	4013      	ands	r3, r2
 8001e08:	2214      	movs	r2, #20
 8001e0a:	18ba      	adds	r2, r7, r2
 8001e0c:	5cd3      	ldrb	r3, [r2, r3]
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e10:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	220f      	movs	r2, #15
 8001e16:	4013      	ands	r3, r2
 8001e18:	1d3a      	adds	r2, r7, #4
 8001e1a:	5cd3      	ldrb	r3, [r2, r3]
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001e1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e20:	23c0      	movs	r3, #192	; 0xc0
 8001e22:	025b      	lsls	r3, r3, #9
 8001e24:	401a      	ands	r2, r3
 8001e26:	2380      	movs	r3, #128	; 0x80
 8001e28:	025b      	lsls	r3, r3, #9
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d109      	bne.n	8001e42 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e30:	4811      	ldr	r0, [pc, #68]	; (8001e78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e32:	f7fe f969 	bl	8000108 <__udivsi3>
 8001e36:	0003      	movs	r3, r0
 8001e38:	001a      	movs	r2, r3
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	4353      	muls	r3, r2
 8001e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e44:	480c      	ldr	r0, [pc, #48]	; (8001e78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e46:	f7fe f95f 	bl	8000108 <__udivsi3>
 8001e4a:	0003      	movs	r3, r0
 8001e4c:	001a      	movs	r2, r3
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	4353      	muls	r3, r2
 8001e52:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e56:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e58:	e002      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e5a:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e5c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e5e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e62:	0018      	movs	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b00f      	add	sp, #60	; 0x3c
 8001e68:	bd90      	pop	{r4, r7, pc}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	08005d28 	.word	0x08005d28
 8001e70:	08005d38 	.word	0x08005d38
 8001e74:	40021000 	.word	0x40021000
 8001e78:	007a1200 	.word	0x007a1200

08001e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e80:	4b02      	ldr	r3, [pc, #8]	; (8001e8c <HAL_RCC_GetHCLKFreq+0x10>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	0018      	movs	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	20000004 	.word	0x20000004

08001e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001e94:	f7ff fff2 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001e98:	0001      	movs	r1, r0
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	0a1b      	lsrs	r3, r3, #8
 8001ea0:	2207      	movs	r2, #7
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ea6:	5cd3      	ldrb	r3, [r2, r3]
 8001ea8:	40d9      	lsrs	r1, r3
 8001eaa:	000b      	movs	r3, r1
}    
 8001eac:	0018      	movs	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	08005e28 	.word	0x08005e28

08001ebc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2207      	movs	r2, #7
 8001eca:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <HAL_RCC_GetClockConfig+0x4c>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <HAL_RCC_GetClockConfig+0x4c>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	22f0      	movs	r2, #240	; 0xf0
 8001ede:	401a      	ands	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <HAL_RCC_GetClockConfig+0x4c>)
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	23e0      	movs	r3, #224	; 0xe0
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	401a      	ands	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_RCC_GetClockConfig+0x50>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	401a      	ands	r2, r3
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	601a      	str	r2, [r3, #0]
}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	46bd      	mov	sp, r7
 8001f02:	b002      	add	sp, #8
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40022000 	.word	0x40022000

08001f10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e042      	b.n	8001fa8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	223d      	movs	r2, #61	; 0x3d
 8001f26:	5c9b      	ldrb	r3, [r3, r2]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d107      	bne.n	8001f3e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	223c      	movs	r2, #60	; 0x3c
 8001f32:	2100      	movs	r1, #0
 8001f34:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f7fe ffb3 	bl	8000ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	223d      	movs	r2, #61	; 0x3d
 8001f42:	2102      	movs	r1, #2
 8001f44:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	0019      	movs	r1, r3
 8001f50:	0010      	movs	r0, r2
 8001f52:	f000 fb61 	bl	8002618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2246      	movs	r2, #70	; 0x46
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	223e      	movs	r2, #62	; 0x3e
 8001f62:	2101      	movs	r1, #1
 8001f64:	5499      	strb	r1, [r3, r2]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	223f      	movs	r2, #63	; 0x3f
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	5499      	strb	r1, [r3, r2]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2240      	movs	r2, #64	; 0x40
 8001f72:	2101      	movs	r1, #1
 8001f74:	5499      	strb	r1, [r3, r2]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2241      	movs	r2, #65	; 0x41
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2242      	movs	r2, #66	; 0x42
 8001f82:	2101      	movs	r1, #1
 8001f84:	5499      	strb	r1, [r3, r2]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2243      	movs	r2, #67	; 0x43
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	5499      	strb	r1, [r3, r2]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2244      	movs	r2, #68	; 0x44
 8001f92:	2101      	movs	r1, #1
 8001f94:	5499      	strb	r1, [r3, r2]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2245      	movs	r2, #69	; 0x45
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	223d      	movs	r2, #61	; 0x3d
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	0018      	movs	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b002      	add	sp, #8
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	223d      	movs	r2, #61	; 0x3d
 8001fbc:	5c9b      	ldrb	r3, [r3, r2]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d001      	beq.n	8001fc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e035      	b.n	8002034 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	223d      	movs	r2, #61	; 0x3d
 8001fcc:	2102      	movs	r1, #2
 8001fce:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2101      	movs	r1, #1
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a15      	ldr	r2, [pc, #84]	; (800203c <HAL_TIM_Base_Start_IT+0x8c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d009      	beq.n	8001ffe <HAL_TIM_Base_Start_IT+0x4e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a14      	ldr	r2, [pc, #80]	; (8002040 <HAL_TIM_Base_Start_IT+0x90>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d004      	beq.n	8001ffe <HAL_TIM_Base_Start_IT+0x4e>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a12      	ldr	r2, [pc, #72]	; (8002044 <HAL_TIM_Base_Start_IT+0x94>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d111      	bne.n	8002022 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2207      	movs	r2, #7
 8002006:	4013      	ands	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2b06      	cmp	r3, #6
 800200e:	d010      	beq.n	8002032 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2101      	movs	r1, #1
 800201c:	430a      	orrs	r2, r1
 800201e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002020:	e007      	b.n	8002032 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2101      	movs	r1, #1
 800202e:	430a      	orrs	r2, r1
 8002030:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	0018      	movs	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	b004      	add	sp, #16
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40012c00 	.word	0x40012c00
 8002040:	40000400 	.word	0x40000400
 8002044:	40014000 	.word	0x40014000

08002048 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e042      	b.n	80020e0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	223d      	movs	r2, #61	; 0x3d
 800205e:	5c9b      	ldrb	r3, [r3, r2]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d107      	bne.n	8002076 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	223c      	movs	r2, #60	; 0x3c
 800206a:	2100      	movs	r1, #0
 800206c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	0018      	movs	r0, r3
 8002072:	f7fe fef9 	bl	8000e68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	223d      	movs	r2, #61	; 0x3d
 800207a:	2102      	movs	r1, #2
 800207c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3304      	adds	r3, #4
 8002086:	0019      	movs	r1, r3
 8002088:	0010      	movs	r0, r2
 800208a:	f000 fac5 	bl	8002618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2246      	movs	r2, #70	; 0x46
 8002092:	2101      	movs	r1, #1
 8002094:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	223e      	movs	r2, #62	; 0x3e
 800209a:	2101      	movs	r1, #1
 800209c:	5499      	strb	r1, [r3, r2]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	223f      	movs	r2, #63	; 0x3f
 80020a2:	2101      	movs	r1, #1
 80020a4:	5499      	strb	r1, [r3, r2]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2240      	movs	r2, #64	; 0x40
 80020aa:	2101      	movs	r1, #1
 80020ac:	5499      	strb	r1, [r3, r2]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2241      	movs	r2, #65	; 0x41
 80020b2:	2101      	movs	r1, #1
 80020b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2242      	movs	r2, #66	; 0x42
 80020ba:	2101      	movs	r1, #1
 80020bc:	5499      	strb	r1, [r3, r2]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2243      	movs	r2, #67	; 0x43
 80020c2:	2101      	movs	r1, #1
 80020c4:	5499      	strb	r1, [r3, r2]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2244      	movs	r2, #68	; 0x44
 80020ca:	2101      	movs	r1, #1
 80020cc:	5499      	strb	r1, [r3, r2]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2245      	movs	r2, #69	; 0x45
 80020d2:	2101      	movs	r1, #1
 80020d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	223d      	movs	r2, #61	; 0x3d
 80020da:	2101      	movs	r1, #1
 80020dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	0018      	movs	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b002      	add	sp, #8
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d108      	bne.n	800210a <HAL_TIM_PWM_Start+0x22>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	223e      	movs	r2, #62	; 0x3e
 80020fc:	5c9b      	ldrb	r3, [r3, r2]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	3b01      	subs	r3, #1
 8002102:	1e5a      	subs	r2, r3, #1
 8002104:	4193      	sbcs	r3, r2
 8002106:	b2db      	uxtb	r3, r3
 8002108:	e01f      	b.n	800214a <HAL_TIM_PWM_Start+0x62>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b04      	cmp	r3, #4
 800210e:	d108      	bne.n	8002122 <HAL_TIM_PWM_Start+0x3a>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	223f      	movs	r2, #63	; 0x3f
 8002114:	5c9b      	ldrb	r3, [r3, r2]
 8002116:	b2db      	uxtb	r3, r3
 8002118:	3b01      	subs	r3, #1
 800211a:	1e5a      	subs	r2, r3, #1
 800211c:	4193      	sbcs	r3, r2
 800211e:	b2db      	uxtb	r3, r3
 8002120:	e013      	b.n	800214a <HAL_TIM_PWM_Start+0x62>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2b08      	cmp	r3, #8
 8002126:	d108      	bne.n	800213a <HAL_TIM_PWM_Start+0x52>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2240      	movs	r2, #64	; 0x40
 800212c:	5c9b      	ldrb	r3, [r3, r2]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	3b01      	subs	r3, #1
 8002132:	1e5a      	subs	r2, r3, #1
 8002134:	4193      	sbcs	r3, r2
 8002136:	b2db      	uxtb	r3, r3
 8002138:	e007      	b.n	800214a <HAL_TIM_PWM_Start+0x62>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2241      	movs	r2, #65	; 0x41
 800213e:	5c9b      	ldrb	r3, [r3, r2]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	3b01      	subs	r3, #1
 8002144:	1e5a      	subs	r2, r3, #1
 8002146:	4193      	sbcs	r3, r2
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e06e      	b.n	8002230 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d104      	bne.n	8002162 <HAL_TIM_PWM_Start+0x7a>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	223e      	movs	r2, #62	; 0x3e
 800215c:	2102      	movs	r1, #2
 800215e:	5499      	strb	r1, [r3, r2]
 8002160:	e013      	b.n	800218a <HAL_TIM_PWM_Start+0xa2>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b04      	cmp	r3, #4
 8002166:	d104      	bne.n	8002172 <HAL_TIM_PWM_Start+0x8a>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	223f      	movs	r2, #63	; 0x3f
 800216c:	2102      	movs	r1, #2
 800216e:	5499      	strb	r1, [r3, r2]
 8002170:	e00b      	b.n	800218a <HAL_TIM_PWM_Start+0xa2>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b08      	cmp	r3, #8
 8002176:	d104      	bne.n	8002182 <HAL_TIM_PWM_Start+0x9a>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2240      	movs	r2, #64	; 0x40
 800217c:	2102      	movs	r1, #2
 800217e:	5499      	strb	r1, [r3, r2]
 8002180:	e003      	b.n	800218a <HAL_TIM_PWM_Start+0xa2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2241      	movs	r2, #65	; 0x41
 8002186:	2102      	movs	r1, #2
 8002188:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6839      	ldr	r1, [r7, #0]
 8002190:	2201      	movs	r2, #1
 8002192:	0018      	movs	r0, r3
 8002194:	f000 fcb2 	bl	8002afc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a26      	ldr	r2, [pc, #152]	; (8002238 <HAL_TIM_PWM_Start+0x150>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d00e      	beq.n	80021c0 <HAL_TIM_PWM_Start+0xd8>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a25      	ldr	r2, [pc, #148]	; (800223c <HAL_TIM_PWM_Start+0x154>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d009      	beq.n	80021c0 <HAL_TIM_PWM_Start+0xd8>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a23      	ldr	r2, [pc, #140]	; (8002240 <HAL_TIM_PWM_Start+0x158>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d004      	beq.n	80021c0 <HAL_TIM_PWM_Start+0xd8>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a22      	ldr	r2, [pc, #136]	; (8002244 <HAL_TIM_PWM_Start+0x15c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d101      	bne.n	80021c4 <HAL_TIM_PWM_Start+0xdc>
 80021c0:	2301      	movs	r3, #1
 80021c2:	e000      	b.n	80021c6 <HAL_TIM_PWM_Start+0xde>
 80021c4:	2300      	movs	r3, #0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d008      	beq.n	80021dc <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2180      	movs	r1, #128	; 0x80
 80021d6:	0209      	lsls	r1, r1, #8
 80021d8:	430a      	orrs	r2, r1
 80021da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a15      	ldr	r2, [pc, #84]	; (8002238 <HAL_TIM_PWM_Start+0x150>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d009      	beq.n	80021fa <HAL_TIM_PWM_Start+0x112>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a17      	ldr	r2, [pc, #92]	; (8002248 <HAL_TIM_PWM_Start+0x160>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d004      	beq.n	80021fa <HAL_TIM_PWM_Start+0x112>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a11      	ldr	r2, [pc, #68]	; (800223c <HAL_TIM_PWM_Start+0x154>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d111      	bne.n	800221e <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	2207      	movs	r2, #7
 8002202:	4013      	ands	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b06      	cmp	r3, #6
 800220a:	d010      	beq.n	800222e <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2101      	movs	r1, #1
 8002218:	430a      	orrs	r2, r1
 800221a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800221c:	e007      	b.n	800222e <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2101      	movs	r1, #1
 800222a:	430a      	orrs	r2, r1
 800222c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	0018      	movs	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	b004      	add	sp, #16
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40012c00 	.word	0x40012c00
 800223c:	40014000 	.word	0x40014000
 8002240:	40014400 	.word	0x40014400
 8002244:	40014800 	.word	0x40014800
 8002248:	40000400 	.word	0x40000400

0800224c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	2202      	movs	r2, #2
 800225c:	4013      	ands	r3, r2
 800225e:	2b02      	cmp	r3, #2
 8002260:	d124      	bne.n	80022ac <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2202      	movs	r2, #2
 800226a:	4013      	ands	r3, r2
 800226c:	2b02      	cmp	r3, #2
 800226e:	d11d      	bne.n	80022ac <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2203      	movs	r2, #3
 8002276:	4252      	negs	r2, r2
 8002278:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	2203      	movs	r2, #3
 8002288:	4013      	ands	r3, r2
 800228a:	d004      	beq.n	8002296 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	0018      	movs	r0, r3
 8002290:	f000 f9aa 	bl	80025e8 <HAL_TIM_IC_CaptureCallback>
 8002294:	e007      	b.n	80022a6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	0018      	movs	r0, r3
 800229a:	f000 f99d 	bl	80025d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	0018      	movs	r0, r3
 80022a2:	f000 f9a9 	bl	80025f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	2204      	movs	r2, #4
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d125      	bne.n	8002306 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	2204      	movs	r2, #4
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d11e      	bne.n	8002306 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2205      	movs	r2, #5
 80022ce:	4252      	negs	r2, r2
 80022d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2202      	movs	r2, #2
 80022d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699a      	ldr	r2, [r3, #24]
 80022de:	23c0      	movs	r3, #192	; 0xc0
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4013      	ands	r3, r2
 80022e4:	d004      	beq.n	80022f0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	0018      	movs	r0, r3
 80022ea:	f000 f97d 	bl	80025e8 <HAL_TIM_IC_CaptureCallback>
 80022ee:	e007      	b.n	8002300 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	0018      	movs	r0, r3
 80022f4:	f000 f970 	bl	80025d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	0018      	movs	r0, r3
 80022fc:	f000 f97c 	bl	80025f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	2208      	movs	r2, #8
 800230e:	4013      	ands	r3, r2
 8002310:	2b08      	cmp	r3, #8
 8002312:	d124      	bne.n	800235e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	2208      	movs	r2, #8
 800231c:	4013      	ands	r3, r2
 800231e:	2b08      	cmp	r3, #8
 8002320:	d11d      	bne.n	800235e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2209      	movs	r2, #9
 8002328:	4252      	negs	r2, r2
 800232a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2204      	movs	r2, #4
 8002330:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	2203      	movs	r2, #3
 800233a:	4013      	ands	r3, r2
 800233c:	d004      	beq.n	8002348 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	0018      	movs	r0, r3
 8002342:	f000 f951 	bl	80025e8 <HAL_TIM_IC_CaptureCallback>
 8002346:	e007      	b.n	8002358 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	0018      	movs	r0, r3
 800234c:	f000 f944 	bl	80025d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	0018      	movs	r0, r3
 8002354:	f000 f950 	bl	80025f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	2210      	movs	r2, #16
 8002366:	4013      	ands	r3, r2
 8002368:	2b10      	cmp	r3, #16
 800236a:	d125      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	2210      	movs	r2, #16
 8002374:	4013      	ands	r3, r2
 8002376:	2b10      	cmp	r3, #16
 8002378:	d11e      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2211      	movs	r2, #17
 8002380:	4252      	negs	r2, r2
 8002382:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2208      	movs	r2, #8
 8002388:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	69da      	ldr	r2, [r3, #28]
 8002390:	23c0      	movs	r3, #192	; 0xc0
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4013      	ands	r3, r2
 8002396:	d004      	beq.n	80023a2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	0018      	movs	r0, r3
 800239c:	f000 f924 	bl	80025e8 <HAL_TIM_IC_CaptureCallback>
 80023a0:	e007      	b.n	80023b2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	0018      	movs	r0, r3
 80023a6:	f000 f917 	bl	80025d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	0018      	movs	r0, r3
 80023ae:	f000 f923 	bl	80025f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	2201      	movs	r2, #1
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d10f      	bne.n	80023e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	2201      	movs	r2, #1
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d108      	bne.n	80023e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2202      	movs	r2, #2
 80023da:	4252      	negs	r2, r2
 80023dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	0018      	movs	r0, r3
 80023e2:	f7fe fc95 	bl	8000d10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	2280      	movs	r2, #128	; 0x80
 80023ee:	4013      	ands	r3, r2
 80023f0:	2b80      	cmp	r3, #128	; 0x80
 80023f2:	d10f      	bne.n	8002414 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2280      	movs	r2, #128	; 0x80
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b80      	cmp	r3, #128	; 0x80
 8002400:	d108      	bne.n	8002414 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2281      	movs	r2, #129	; 0x81
 8002408:	4252      	negs	r2, r2
 800240a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	0018      	movs	r0, r3
 8002410:	f000 fbf8 	bl	8002c04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	2240      	movs	r2, #64	; 0x40
 800241c:	4013      	ands	r3, r2
 800241e:	2b40      	cmp	r3, #64	; 0x40
 8002420:	d10f      	bne.n	8002442 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2240      	movs	r2, #64	; 0x40
 800242a:	4013      	ands	r3, r2
 800242c:	2b40      	cmp	r3, #64	; 0x40
 800242e:	d108      	bne.n	8002442 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2241      	movs	r2, #65	; 0x41
 8002436:	4252      	negs	r2, r2
 8002438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	0018      	movs	r0, r3
 800243e:	f000 f8e3 	bl	8002608 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	2220      	movs	r2, #32
 800244a:	4013      	ands	r3, r2
 800244c:	2b20      	cmp	r3, #32
 800244e:	d10f      	bne.n	8002470 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2220      	movs	r2, #32
 8002458:	4013      	ands	r3, r2
 800245a:	2b20      	cmp	r3, #32
 800245c:	d108      	bne.n	8002470 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2221      	movs	r2, #33	; 0x21
 8002464:	4252      	negs	r2, r2
 8002466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	0018      	movs	r0, r3
 800246c:	f000 fbc2 	bl	8002bf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002470:	46c0      	nop			; (mov r8, r8)
 8002472:	46bd      	mov	sp, r7
 8002474:	b002      	add	sp, #8
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	223c      	movs	r2, #60	; 0x3c
 8002488:	5c9b      	ldrb	r3, [r3, r2]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800248e:	2302      	movs	r3, #2
 8002490:	e09c      	b.n	80025cc <HAL_TIM_PWM_ConfigChannel+0x154>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	223c      	movs	r2, #60	; 0x3c
 8002496:	2101      	movs	r1, #1
 8002498:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b04      	cmp	r3, #4
 800249e:	d029      	beq.n	80024f4 <HAL_TIM_PWM_ConfigChannel+0x7c>
 80024a0:	d802      	bhi.n	80024a8 <HAL_TIM_PWM_ConfigChannel+0x30>
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d005      	beq.n	80024b2 <HAL_TIM_PWM_ConfigChannel+0x3a>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 80024a6:	e08c      	b.n	80025c2 <HAL_TIM_PWM_ConfigChannel+0x14a>
  switch (Channel)
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d046      	beq.n	800253a <HAL_TIM_PWM_ConfigChannel+0xc2>
 80024ac:	2b0c      	cmp	r3, #12
 80024ae:	d065      	beq.n	800257c <HAL_TIM_PWM_ConfigChannel+0x104>
      break;
 80024b0:	e087      	b.n	80025c2 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	0011      	movs	r1, r2
 80024ba:	0018      	movs	r0, r3
 80024bc:	f000 f922 	bl	8002704 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699a      	ldr	r2, [r3, #24]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2108      	movs	r1, #8
 80024cc:	430a      	orrs	r2, r1
 80024ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699a      	ldr	r2, [r3, #24]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2104      	movs	r1, #4
 80024dc:	438a      	bics	r2, r1
 80024de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6999      	ldr	r1, [r3, #24]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	691a      	ldr	r2, [r3, #16]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	619a      	str	r2, [r3, #24]
      break;
 80024f2:	e066      	b.n	80025c2 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	0011      	movs	r1, r2
 80024fc:	0018      	movs	r0, r3
 80024fe:	f000 f989 	bl	8002814 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699a      	ldr	r2, [r3, #24]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2180      	movs	r1, #128	; 0x80
 800250e:	0109      	lsls	r1, r1, #4
 8002510:	430a      	orrs	r2, r1
 8002512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699a      	ldr	r2, [r3, #24]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	492d      	ldr	r1, [pc, #180]	; (80025d4 <HAL_TIM_PWM_ConfigChannel+0x15c>)
 8002520:	400a      	ands	r2, r1
 8002522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6999      	ldr	r1, [r3, #24]
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	021a      	lsls	r2, r3, #8
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	619a      	str	r2, [r3, #24]
      break;
 8002538:	e043      	b.n	80025c2 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	0011      	movs	r1, r2
 8002542:	0018      	movs	r0, r3
 8002544:	f000 f9ea 	bl	800291c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	69da      	ldr	r2, [r3, #28]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2108      	movs	r1, #8
 8002554:	430a      	orrs	r2, r1
 8002556:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	69da      	ldr	r2, [r3, #28]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2104      	movs	r1, #4
 8002564:	438a      	bics	r2, r1
 8002566:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	69d9      	ldr	r1, [r3, #28]
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	691a      	ldr	r2, [r3, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	61da      	str	r2, [r3, #28]
      break;
 800257a:	e022      	b.n	80025c2 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	0011      	movs	r1, r2
 8002584:	0018      	movs	r0, r3
 8002586:	f000 fa4f 	bl	8002a28 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	69da      	ldr	r2, [r3, #28]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2180      	movs	r1, #128	; 0x80
 8002596:	0109      	lsls	r1, r1, #4
 8002598:	430a      	orrs	r2, r1
 800259a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	69da      	ldr	r2, [r3, #28]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	490b      	ldr	r1, [pc, #44]	; (80025d4 <HAL_TIM_PWM_ConfigChannel+0x15c>)
 80025a8:	400a      	ands	r2, r1
 80025aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	69d9      	ldr	r1, [r3, #28]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	021a      	lsls	r2, r3, #8
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	61da      	str	r2, [r3, #28]
      break;
 80025c0:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	223c      	movs	r2, #60	; 0x3c
 80025c6:	2100      	movs	r1, #0
 80025c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	0018      	movs	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	b004      	add	sp, #16
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	fffffbff 	.word	0xfffffbff

080025d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b002      	add	sp, #8
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025f0:	46c0      	nop			; (mov r8, r8)
 80025f2:	46bd      	mov	sp, r7
 80025f4:	b002      	add	sp, #8
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002600:	46c0      	nop			; (mov r8, r8)
 8002602:	46bd      	mov	sp, r7
 8002604:	b002      	add	sp, #8
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002610:	46c0      	nop			; (mov r8, r8)
 8002612:	46bd      	mov	sp, r7
 8002614:	b002      	add	sp, #8
 8002616:	bd80      	pop	{r7, pc}

08002618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a2f      	ldr	r2, [pc, #188]	; (80026e8 <TIM_Base_SetConfig+0xd0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d003      	beq.n	8002638 <TIM_Base_SetConfig+0x20>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a2e      	ldr	r2, [pc, #184]	; (80026ec <TIM_Base_SetConfig+0xd4>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d108      	bne.n	800264a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2270      	movs	r2, #112	; 0x70
 800263c:	4393      	bics	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a26      	ldr	r2, [pc, #152]	; (80026e8 <TIM_Base_SetConfig+0xd0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d013      	beq.n	800267a <TIM_Base_SetConfig+0x62>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a25      	ldr	r2, [pc, #148]	; (80026ec <TIM_Base_SetConfig+0xd4>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00f      	beq.n	800267a <TIM_Base_SetConfig+0x62>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a24      	ldr	r2, [pc, #144]	; (80026f0 <TIM_Base_SetConfig+0xd8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00b      	beq.n	800267a <TIM_Base_SetConfig+0x62>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a23      	ldr	r2, [pc, #140]	; (80026f4 <TIM_Base_SetConfig+0xdc>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d007      	beq.n	800267a <TIM_Base_SetConfig+0x62>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a22      	ldr	r2, [pc, #136]	; (80026f8 <TIM_Base_SetConfig+0xe0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d003      	beq.n	800267a <TIM_Base_SetConfig+0x62>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a21      	ldr	r2, [pc, #132]	; (80026fc <TIM_Base_SetConfig+0xe4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d108      	bne.n	800268c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4a20      	ldr	r2, [pc, #128]	; (8002700 <TIM_Base_SetConfig+0xe8>)
 800267e:	4013      	ands	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	4313      	orrs	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2280      	movs	r2, #128	; 0x80
 8002690:	4393      	bics	r3, r2
 8002692:	001a      	movs	r2, r3
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	4313      	orrs	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a0c      	ldr	r2, [pc, #48]	; (80026e8 <TIM_Base_SetConfig+0xd0>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d00b      	beq.n	80026d2 <TIM_Base_SetConfig+0xba>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a0d      	ldr	r2, [pc, #52]	; (80026f4 <TIM_Base_SetConfig+0xdc>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d007      	beq.n	80026d2 <TIM_Base_SetConfig+0xba>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a0c      	ldr	r2, [pc, #48]	; (80026f8 <TIM_Base_SetConfig+0xe0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d003      	beq.n	80026d2 <TIM_Base_SetConfig+0xba>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a0b      	ldr	r2, [pc, #44]	; (80026fc <TIM_Base_SetConfig+0xe4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d103      	bne.n	80026da <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	691a      	ldr	r2, [r3, #16]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	615a      	str	r2, [r3, #20]
}
 80026e0:	46c0      	nop			; (mov r8, r8)
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b004      	add	sp, #16
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40012c00 	.word	0x40012c00
 80026ec:	40000400 	.word	0x40000400
 80026f0:	40002000 	.word	0x40002000
 80026f4:	40014000 	.word	0x40014000
 80026f8:	40014400 	.word	0x40014400
 80026fc:	40014800 	.word	0x40014800
 8002700:	fffffcff 	.word	0xfffffcff

08002704 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	2201      	movs	r2, #1
 8002714:	4393      	bics	r3, r2
 8002716:	001a      	movs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2270      	movs	r2, #112	; 0x70
 8002732:	4393      	bics	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2203      	movs	r2, #3
 800273a:	4393      	bics	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	4313      	orrs	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	2202      	movs	r2, #2
 800274c:	4393      	bics	r3, r2
 800274e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	4313      	orrs	r3, r2
 8002758:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a27      	ldr	r2, [pc, #156]	; (80027fc <TIM_OC1_SetConfig+0xf8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00b      	beq.n	800277a <TIM_OC1_SetConfig+0x76>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a26      	ldr	r2, [pc, #152]	; (8002800 <TIM_OC1_SetConfig+0xfc>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d007      	beq.n	800277a <TIM_OC1_SetConfig+0x76>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a25      	ldr	r2, [pc, #148]	; (8002804 <TIM_OC1_SetConfig+0x100>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d003      	beq.n	800277a <TIM_OC1_SetConfig+0x76>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a24      	ldr	r2, [pc, #144]	; (8002808 <TIM_OC1_SetConfig+0x104>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d10c      	bne.n	8002794 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2208      	movs	r2, #8
 800277e:	4393      	bics	r3, r2
 8002780:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	4313      	orrs	r3, r2
 800278a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	2204      	movs	r2, #4
 8002790:	4393      	bics	r3, r2
 8002792:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a19      	ldr	r2, [pc, #100]	; (80027fc <TIM_OC1_SetConfig+0xf8>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00b      	beq.n	80027b4 <TIM_OC1_SetConfig+0xb0>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a18      	ldr	r2, [pc, #96]	; (8002800 <TIM_OC1_SetConfig+0xfc>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d007      	beq.n	80027b4 <TIM_OC1_SetConfig+0xb0>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a17      	ldr	r2, [pc, #92]	; (8002804 <TIM_OC1_SetConfig+0x100>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d003      	beq.n	80027b4 <TIM_OC1_SetConfig+0xb0>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a16      	ldr	r2, [pc, #88]	; (8002808 <TIM_OC1_SetConfig+0x104>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d111      	bne.n	80027d8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4a15      	ldr	r2, [pc, #84]	; (800280c <TIM_OC1_SetConfig+0x108>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4a14      	ldr	r2, [pc, #80]	; (8002810 <TIM_OC1_SetConfig+0x10c>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	621a      	str	r2, [r3, #32]
}
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	46bd      	mov	sp, r7
 80027f6:	b006      	add	sp, #24
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	40012c00 	.word	0x40012c00
 8002800:	40014000 	.word	0x40014000
 8002804:	40014400 	.word	0x40014400
 8002808:	40014800 	.word	0x40014800
 800280c:	fffffeff 	.word	0xfffffeff
 8002810:	fffffdff 	.word	0xfffffdff

08002814 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	2210      	movs	r2, #16
 8002824:	4393      	bics	r3, r2
 8002826:	001a      	movs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4a2e      	ldr	r2, [pc, #184]	; (80028fc <TIM_OC2_SetConfig+0xe8>)
 8002842:	4013      	ands	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4a2d      	ldr	r2, [pc, #180]	; (8002900 <TIM_OC2_SetConfig+0xec>)
 800284a:	4013      	ands	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	021b      	lsls	r3, r3, #8
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2220      	movs	r2, #32
 800285e:	4393      	bics	r3, r2
 8002860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	4313      	orrs	r3, r2
 800286c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a24      	ldr	r2, [pc, #144]	; (8002904 <TIM_OC2_SetConfig+0xf0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d10d      	bne.n	8002892 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2280      	movs	r2, #128	; 0x80
 800287a:	4393      	bics	r3, r2
 800287c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	4313      	orrs	r3, r2
 8002888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2240      	movs	r2, #64	; 0x40
 800288e:	4393      	bics	r3, r2
 8002890:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a1b      	ldr	r2, [pc, #108]	; (8002904 <TIM_OC2_SetConfig+0xf0>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00b      	beq.n	80028b2 <TIM_OC2_SetConfig+0x9e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a1a      	ldr	r2, [pc, #104]	; (8002908 <TIM_OC2_SetConfig+0xf4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d007      	beq.n	80028b2 <TIM_OC2_SetConfig+0x9e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a19      	ldr	r2, [pc, #100]	; (800290c <TIM_OC2_SetConfig+0xf8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d003      	beq.n	80028b2 <TIM_OC2_SetConfig+0x9e>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a18      	ldr	r2, [pc, #96]	; (8002910 <TIM_OC2_SetConfig+0xfc>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d113      	bne.n	80028da <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4a17      	ldr	r2, [pc, #92]	; (8002914 <TIM_OC2_SetConfig+0x100>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4a16      	ldr	r2, [pc, #88]	; (8002918 <TIM_OC2_SetConfig+0x104>)
 80028be:	4013      	ands	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	621a      	str	r2, [r3, #32]
}
 80028f4:	46c0      	nop			; (mov r8, r8)
 80028f6:	46bd      	mov	sp, r7
 80028f8:	b006      	add	sp, #24
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	ffff8fff 	.word	0xffff8fff
 8002900:	fffffcff 	.word	0xfffffcff
 8002904:	40012c00 	.word	0x40012c00
 8002908:	40014000 	.word	0x40014000
 800290c:	40014400 	.word	0x40014400
 8002910:	40014800 	.word	0x40014800
 8002914:	fffffbff 	.word	0xfffffbff
 8002918:	fffff7ff 	.word	0xfffff7ff

0800291c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	4a35      	ldr	r2, [pc, #212]	; (8002a00 <TIM_OC3_SetConfig+0xe4>)
 800292c:	401a      	ands	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2270      	movs	r2, #112	; 0x70
 8002948:	4393      	bics	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2203      	movs	r2, #3
 8002950:	4393      	bics	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	4a28      	ldr	r2, [pc, #160]	; (8002a04 <TIM_OC3_SetConfig+0xe8>)
 8002962:	4013      	ands	r3, r2
 8002964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	021b      	lsls	r3, r3, #8
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	4313      	orrs	r3, r2
 8002970:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a24      	ldr	r2, [pc, #144]	; (8002a08 <TIM_OC3_SetConfig+0xec>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d10d      	bne.n	8002996 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	4a23      	ldr	r2, [pc, #140]	; (8002a0c <TIM_OC3_SetConfig+0xf0>)
 800297e:	4013      	ands	r3, r2
 8002980:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	4a1f      	ldr	r2, [pc, #124]	; (8002a10 <TIM_OC3_SetConfig+0xf4>)
 8002992:	4013      	ands	r3, r2
 8002994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a1b      	ldr	r2, [pc, #108]	; (8002a08 <TIM_OC3_SetConfig+0xec>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d00b      	beq.n	80029b6 <TIM_OC3_SetConfig+0x9a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a1c      	ldr	r2, [pc, #112]	; (8002a14 <TIM_OC3_SetConfig+0xf8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d007      	beq.n	80029b6 <TIM_OC3_SetConfig+0x9a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a1b      	ldr	r2, [pc, #108]	; (8002a18 <TIM_OC3_SetConfig+0xfc>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d003      	beq.n	80029b6 <TIM_OC3_SetConfig+0x9a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a1a      	ldr	r2, [pc, #104]	; (8002a1c <TIM_OC3_SetConfig+0x100>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d113      	bne.n	80029de <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4a19      	ldr	r2, [pc, #100]	; (8002a20 <TIM_OC3_SetConfig+0x104>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4a18      	ldr	r2, [pc, #96]	; (8002a24 <TIM_OC3_SetConfig+0x108>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	621a      	str	r2, [r3, #32]
}
 80029f8:	46c0      	nop			; (mov r8, r8)
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b006      	add	sp, #24
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	fffffeff 	.word	0xfffffeff
 8002a04:	fffffdff 	.word	0xfffffdff
 8002a08:	40012c00 	.word	0x40012c00
 8002a0c:	fffff7ff 	.word	0xfffff7ff
 8002a10:	fffffbff 	.word	0xfffffbff
 8002a14:	40014000 	.word	0x40014000
 8002a18:	40014400 	.word	0x40014400
 8002a1c:	40014800 	.word	0x40014800
 8002a20:	ffffefff 	.word	0xffffefff
 8002a24:	ffffdfff 	.word	0xffffdfff

08002a28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	4a28      	ldr	r2, [pc, #160]	; (8002ad8 <TIM_OC4_SetConfig+0xb0>)
 8002a38:	401a      	ands	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4a22      	ldr	r2, [pc, #136]	; (8002adc <TIM_OC4_SetConfig+0xb4>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4a21      	ldr	r2, [pc, #132]	; (8002ae0 <TIM_OC4_SetConfig+0xb8>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	021b      	lsls	r3, r3, #8
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4a1d      	ldr	r2, [pc, #116]	; (8002ae4 <TIM_OC4_SetConfig+0xbc>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	031b      	lsls	r3, r3, #12
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <TIM_OC4_SetConfig+0xc0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d00b      	beq.n	8002aa0 <TIM_OC4_SetConfig+0x78>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a18      	ldr	r2, [pc, #96]	; (8002aec <TIM_OC4_SetConfig+0xc4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d007      	beq.n	8002aa0 <TIM_OC4_SetConfig+0x78>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a17      	ldr	r2, [pc, #92]	; (8002af0 <TIM_OC4_SetConfig+0xc8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d003      	beq.n	8002aa0 <TIM_OC4_SetConfig+0x78>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a16      	ldr	r2, [pc, #88]	; (8002af4 <TIM_OC4_SetConfig+0xcc>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d109      	bne.n	8002ab4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	4a15      	ldr	r2, [pc, #84]	; (8002af8 <TIM_OC4_SetConfig+0xd0>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	019b      	lsls	r3, r3, #6
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	621a      	str	r2, [r3, #32]
}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b006      	add	sp, #24
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	ffffefff 	.word	0xffffefff
 8002adc:	ffff8fff 	.word	0xffff8fff
 8002ae0:	fffffcff 	.word	0xfffffcff
 8002ae4:	ffffdfff 	.word	0xffffdfff
 8002ae8:	40012c00 	.word	0x40012c00
 8002aec:	40014000 	.word	0x40014000
 8002af0:	40014400 	.word	0x40014400
 8002af4:	40014800 	.word	0x40014800
 8002af8:	ffffbfff 	.word	0xffffbfff

08002afc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	221f      	movs	r2, #31
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2201      	movs	r2, #1
 8002b10:	409a      	lsls	r2, r3
 8002b12:	0013      	movs	r3, r2
 8002b14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	43d2      	mvns	r2, r2
 8002b1e:	401a      	ands	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a1a      	ldr	r2, [r3, #32]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	211f      	movs	r1, #31
 8002b2c:	400b      	ands	r3, r1
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4099      	lsls	r1, r3
 8002b32:	000b      	movs	r3, r1
 8002b34:	431a      	orrs	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	621a      	str	r2, [r3, #32]
}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b006      	add	sp, #24
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	223c      	movs	r2, #60	; 0x3c
 8002b52:	5c9b      	ldrb	r3, [r3, r2]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e041      	b.n	8002be0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	223c      	movs	r2, #60	; 0x3c
 8002b60:	2101      	movs	r1, #1
 8002b62:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	223d      	movs	r2, #61	; 0x3d
 8002b68:	2102      	movs	r1, #2
 8002b6a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2270      	movs	r2, #112	; 0x70
 8002b80:	4393      	bics	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a13      	ldr	r2, [pc, #76]	; (8002be8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d009      	beq.n	8002bb4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a11      	ldr	r2, [pc, #68]	; (8002bec <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d004      	beq.n	8002bb4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a10      	ldr	r2, [pc, #64]	; (8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d10c      	bne.n	8002bce <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2280      	movs	r2, #128	; 0x80
 8002bb8:	4393      	bics	r3, r2
 8002bba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	223d      	movs	r2, #61	; 0x3d
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	223c      	movs	r2, #60	; 0x3c
 8002bda:	2100      	movs	r1, #0
 8002bdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	0018      	movs	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b004      	add	sp, #16
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40012c00 	.word	0x40012c00
 8002bec:	40000400 	.word	0x40000400
 8002bf0:	40014000 	.word	0x40014000

08002bf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bfc:	46c0      	nop			; (mov r8, r8)
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b002      	add	sp, #8
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c0c:	46c0      	nop			; (mov r8, r8)
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b002      	add	sp, #8
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <LTTO_IR_CONV_RawSignatureToPulses>:
            }
        }
    }
}

void LTTO_IR_CONV_RawSignatureToPulses(LTTO_IR_RAW_SIGNATURE_t *sourceRawSignature, int destinationPulseTickMSBuffer[], int *destinationPulseCount) {
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
    if(sourceRawSignature->valid) {
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	795b      	ldrb	r3, [r3, #5]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d100      	bne.n	8002c2a <LTTO_IR_CONV_RawSignatureToPulses+0x16>
 8002c28:	e0ec      	b.n	8002e04 <LTTO_IR_CONV_RawSignatureToPulses+0x1f0>
        uint8_t bitCount;
        uint8_t arrayIndex = 0;
 8002c2a:	2016      	movs	r0, #22
 8002c2c:	183b      	adds	r3, r7, r0
 8002c2e:	2200      	movs	r2, #0
 8002c30:	701a      	strb	r2, [r3, #0]

        //The basic header
        destinationPulseTickMSBuffer[arrayIndex++] = 3;
 8002c32:	183b      	adds	r3, r7, r0
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	183a      	adds	r2, r7, r0
 8002c38:	1c59      	adds	r1, r3, #1
 8002c3a:	7011      	strb	r1, [r2, #0]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	18d3      	adds	r3, r2, r3
 8002c42:	2203      	movs	r2, #3
 8002c44:	601a      	str	r2, [r3, #0]
        destinationPulseTickMSBuffer[arrayIndex++] = 6;
 8002c46:	183b      	adds	r3, r7, r0
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	183a      	adds	r2, r7, r0
 8002c4c:	1c59      	adds	r1, r3, #1
 8002c4e:	7011      	strb	r1, [r2, #0]
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	18d3      	adds	r3, r2, r3
 8002c56:	2206      	movs	r2, #6
 8002c58:	601a      	str	r2, [r3, #0]

        //The specific header...
        if(sourceRawSignature->headerType == LTTO_IR_RAW_SIGNATURE_HEADER_NORMAL) {
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d10b      	bne.n	8002c7a <LTTO_IR_CONV_RawSignatureToPulses+0x66>
            destinationPulseTickMSBuffer[arrayIndex++] = 3;
 8002c62:	2216      	movs	r2, #22
 8002c64:	18bb      	adds	r3, r7, r2
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	18ba      	adds	r2, r7, r2
 8002c6a:	1c59      	adds	r1, r3, #1
 8002c6c:	7011      	strb	r1, [r2, #0]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	18d3      	adds	r3, r2, r3
 8002c74:	2203      	movs	r2, #3
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	e00e      	b.n	8002c98 <LTTO_IR_CONV_RawSignatureToPulses+0x84>
        } else if(sourceRawSignature->headerType == LTTO_IR_RAW_SIGNATURE_HEADER_BEACON) {
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d10a      	bne.n	8002c98 <LTTO_IR_CONV_RawSignatureToPulses+0x84>
            destinationPulseTickMSBuffer[arrayIndex++] = 6;
 8002c82:	2216      	movs	r2, #22
 8002c84:	18bb      	adds	r3, r7, r2
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	18ba      	adds	r2, r7, r2
 8002c8a:	1c59      	adds	r1, r3, #1
 8002c8c:	7011      	strb	r1, [r2, #0]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	18d3      	adds	r3, r2, r3
 8002c94:	2206      	movs	r2, #6
 8002c96:	601a      	str	r2, [r3, #0]
        }

        //Data bits
        switch(sourceRawSignature->bitCount) {
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	785b      	ldrb	r3, [r3, #1]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d011      	beq.n	8002cc4 <LTTO_IR_CONV_RawSignatureToPulses+0xb0>
 8002ca0:	dc02      	bgt.n	8002ca8 <LTTO_IR_CONV_RawSignatureToPulses+0x94>
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d009      	beq.n	8002cba <LTTO_IR_CONV_RawSignatureToPulses+0xa6>
 8002ca6:	e003      	b.n	8002cb0 <LTTO_IR_CONV_RawSignatureToPulses+0x9c>
 8002ca8:	2b03      	cmp	r3, #3
 8002caa:	d010      	beq.n	8002cce <LTTO_IR_CONV_RawSignatureToPulses+0xba>
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d013      	beq.n	8002cd8 <LTTO_IR_CONV_RawSignatureToPulses+0xc4>
        	default:
        		bitCount = 0;
 8002cb0:	2317      	movs	r3, #23
 8002cb2:	18fb      	adds	r3, r7, r3
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
        		break;
 8002cb8:	e013      	b.n	8002ce2 <LTTO_IR_CONV_RawSignatureToPulses+0xce>
            case LTTO_IR_RAW_SIGNATURE_BIT_COUNT_5:
                bitCount = 5;
 8002cba:	2317      	movs	r3, #23
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	2205      	movs	r2, #5
 8002cc0:	701a      	strb	r2, [r3, #0]
                break;
 8002cc2:	e00e      	b.n	8002ce2 <LTTO_IR_CONV_RawSignatureToPulses+0xce>
            case LTTO_IR_RAW_SIGNATURE_BIT_COUNT_7:
                bitCount = 7;
 8002cc4:	2317      	movs	r3, #23
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	2207      	movs	r2, #7
 8002cca:	701a      	strb	r2, [r3, #0]
                break;
 8002ccc:	e009      	b.n	8002ce2 <LTTO_IR_CONV_RawSignatureToPulses+0xce>
            case LTTO_IR_RAW_SIGNATURE_BIT_COUNT_8:
                bitCount = 8;
 8002cce:	2317      	movs	r3, #23
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	2208      	movs	r2, #8
 8002cd4:	701a      	strb	r2, [r3, #0]
                break;
 8002cd6:	e004      	b.n	8002ce2 <LTTO_IR_CONV_RawSignatureToPulses+0xce>
            case LTTO_IR_RAW_SIGNATURE_BIT_COUNT_9:
                bitCount = 9;
 8002cd8:	2317      	movs	r3, #23
 8002cda:	18fb      	adds	r3, r7, r3
 8002cdc:	2209      	movs	r2, #9
 8002cde:	701a      	strb	r2, [r3, #0]
                break;
 8002ce0:	46c0      	nop			; (mov r8, r8)
        }
        for(;bitCount != 0;bitCount--) {
 8002ce2:	e033      	b.n	8002d4c <LTTO_IR_CONV_RawSignatureToPulses+0x138>
            destinationPulseTickMSBuffer[arrayIndex++] = 2;
 8002ce4:	2216      	movs	r2, #22
 8002ce6:	18bb      	adds	r3, r7, r2
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	18ba      	adds	r2, r7, r2
 8002cec:	1c59      	adds	r1, r3, #1
 8002cee:	7011      	strb	r1, [r2, #0]
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	18d3      	adds	r3, r2, r3
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	601a      	str	r2, [r3, #0]
            if( (sourceRawSignature->data & (0x01 << (bitCount-1))) != 0) {
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	885b      	ldrh	r3, [r3, #2]
 8002cfe:	001a      	movs	r2, r3
 8002d00:	2317      	movs	r3, #23
 8002d02:	18fb      	adds	r3, r7, r3
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	411a      	asrs	r2, r3
 8002d0a:	0013      	movs	r3, r2
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d00b      	beq.n	8002d2a <LTTO_IR_CONV_RawSignatureToPulses+0x116>
                destinationPulseTickMSBuffer[arrayIndex++] = 2;
 8002d12:	2216      	movs	r2, #22
 8002d14:	18bb      	adds	r3, r7, r2
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	18ba      	adds	r2, r7, r2
 8002d1a:	1c59      	adds	r1, r3, #1
 8002d1c:	7011      	strb	r1, [r2, #0]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	18d3      	adds	r3, r2, r3
 8002d24:	2202      	movs	r2, #2
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	e00a      	b.n	8002d40 <LTTO_IR_CONV_RawSignatureToPulses+0x12c>
            } else {
                destinationPulseTickMSBuffer[arrayIndex++] = 1;
 8002d2a:	2216      	movs	r2, #22
 8002d2c:	18bb      	adds	r3, r7, r2
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	18ba      	adds	r2, r7, r2
 8002d32:	1c59      	adds	r1, r3, #1
 8002d34:	7011      	strb	r1, [r2, #0]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	18d3      	adds	r3, r2, r3
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]
        for(;bitCount != 0;bitCount--) {
 8002d40:	2117      	movs	r1, #23
 8002d42:	187b      	adds	r3, r7, r1
 8002d44:	781a      	ldrb	r2, [r3, #0]
 8002d46:	187b      	adds	r3, r7, r1
 8002d48:	3a01      	subs	r2, #1
 8002d4a:	701a      	strb	r2, [r3, #0]
 8002d4c:	2317      	movs	r3, #23
 8002d4e:	18fb      	adds	r3, r7, r3
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1c6      	bne.n	8002ce4 <LTTO_IR_CONV_RawSignatureToPulses+0xd0>
            }
        }

        //SFP between this and the next packet sent
        switch(sourceRawSignature->SFP) {
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	791b      	ldrb	r3, [r3, #4]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d028      	beq.n	8002db0 <LTTO_IR_CONV_RawSignatureToPulses+0x19c>
 8002d5e:	dc02      	bgt.n	8002d66 <LTTO_IR_CONV_RawSignatureToPulses+0x152>
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <LTTO_IR_CONV_RawSignatureToPulses+0x15c>
 8002d64:	e049      	b.n	8002dfa <LTTO_IR_CONV_RawSignatureToPulses+0x1e6>
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d02e      	beq.n	8002dc8 <LTTO_IR_CONV_RawSignatureToPulses+0x1b4>
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d038      	beq.n	8002de0 <LTTO_IR_CONV_RawSignatureToPulses+0x1cc>
 8002d6e:	e044      	b.n	8002dfa <LTTO_IR_CONV_RawSignatureToPulses+0x1e6>
            case LTTO_IR_RAW_SIGNATURE_SFP_UNKNOWN:
                //If we don't have one specified, look at the header type to guess at one.
                if(sourceRawSignature->headerType == LTTO_IR_RAW_SIGNATURE_HEADER_NORMAL) {
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d10b      	bne.n	8002d90 <LTTO_IR_CONV_RawSignatureToPulses+0x17c>
                    //Generally, normal-headered signatures have a medium SFP
                    destinationPulseTickMSBuffer[arrayIndex++] = 56;
 8002d78:	2216      	movs	r2, #22
 8002d7a:	18bb      	adds	r3, r7, r2
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	18ba      	adds	r2, r7, r2
 8002d80:	1c59      	adds	r1, r3, #1
 8002d82:	7011      	strb	r1, [r2, #0]
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	18d3      	adds	r3, r2, r3
 8002d8a:	2238      	movs	r2, #56	; 0x38
 8002d8c:	601a      	str	r2, [r3, #0]
                } else if(sourceRawSignature->headerType == LTTO_IR_RAW_SIGNATURE_HEADER_BEACON) {
                    //Generally, beacon-headered signatures have a short SFP
                    destinationPulseTickMSBuffer[arrayIndex++] = 25;
                }
                break;
 8002d8e:	e033      	b.n	8002df8 <LTTO_IR_CONV_RawSignatureToPulses+0x1e4>
                } else if(sourceRawSignature->headerType == LTTO_IR_RAW_SIGNATURE_HEADER_BEACON) {
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d12f      	bne.n	8002df8 <LTTO_IR_CONV_RawSignatureToPulses+0x1e4>
                    destinationPulseTickMSBuffer[arrayIndex++] = 25;
 8002d98:	2216      	movs	r2, #22
 8002d9a:	18bb      	adds	r3, r7, r2
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	18ba      	adds	r2, r7, r2
 8002da0:	1c59      	adds	r1, r3, #1
 8002da2:	7011      	strb	r1, [r2, #0]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	18d3      	adds	r3, r2, r3
 8002daa:	2219      	movs	r2, #25
 8002dac:	601a      	str	r2, [r3, #0]
                break;
 8002dae:	e023      	b.n	8002df8 <LTTO_IR_CONV_RawSignatureToPulses+0x1e4>
            case LTTO_IR_RAW_SIGNATURE_SFP_SHORT:
                destinationPulseTickMSBuffer[arrayIndex++] = 25;
 8002db0:	2216      	movs	r2, #22
 8002db2:	18bb      	adds	r3, r7, r2
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	18ba      	adds	r2, r7, r2
 8002db8:	1c59      	adds	r1, r3, #1
 8002dba:	7011      	strb	r1, [r2, #0]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	18d3      	adds	r3, r2, r3
 8002dc2:	2219      	movs	r2, #25
 8002dc4:	601a      	str	r2, [r3, #0]
                break;
 8002dc6:	e018      	b.n	8002dfa <LTTO_IR_CONV_RawSignatureToPulses+0x1e6>
            case LTTO_IR_RAW_SIGNATURE_SFP_MEDIUM:
                destinationPulseTickMSBuffer[arrayIndex++] = 56;
 8002dc8:	2216      	movs	r2, #22
 8002dca:	18bb      	adds	r3, r7, r2
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	18ba      	adds	r2, r7, r2
 8002dd0:	1c59      	adds	r1, r3, #1
 8002dd2:	7011      	strb	r1, [r2, #0]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	18d3      	adds	r3, r2, r3
 8002dda:	2238      	movs	r2, #56	; 0x38
 8002ddc:	601a      	str	r2, [r3, #0]
                break;
 8002dde:	e00c      	b.n	8002dfa <LTTO_IR_CONV_RawSignatureToPulses+0x1e6>
            case LTTO_IR_RAW_SIGNATURE_SFP_LONG:
                destinationPulseTickMSBuffer[arrayIndex++] = 80;
 8002de0:	2216      	movs	r2, #22
 8002de2:	18bb      	adds	r3, r7, r2
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	18ba      	adds	r2, r7, r2
 8002de8:	1c59      	adds	r1, r3, #1
 8002dea:	7011      	strb	r1, [r2, #0]
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	18d3      	adds	r3, r2, r3
 8002df2:	2250      	movs	r2, #80	; 0x50
 8002df4:	601a      	str	r2, [r3, #0]
                break;
 8002df6:	e000      	b.n	8002dfa <LTTO_IR_CONV_RawSignatureToPulses+0x1e6>
                break;
 8002df8:	46c0      	nop			; (mov r8, r8)
        }

        //And save the pulse count
        *destinationPulseCount = arrayIndex;
 8002dfa:	2316      	movs	r3, #22
 8002dfc:	18fb      	adds	r3, r7, r3
 8002dfe:	781a      	ldrb	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	601a      	str	r2, [r3, #0]
    }
}
 8002e04:	46c0      	nop			; (mov r8, r8)
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b006      	add	sp, #24
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <LTTO_IR_CONV_RawSignatureToSignature>:

void LTTO_IR_CONV_RawSignatureToSignature(LTTO_IR_RAW_SIGNATURE_t *sourceRawSignature, LTTO_IR_SIGNATURE_t *destinationSignature) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
    //Clear the destination struct
    destinationSignature->signatureType = LTTO_IR_SIGNATURE_TYPE_UNKNOWN;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	701a      	strb	r2, [r3, #0]
    destinationSignature->data = 0;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	805a      	strh	r2, [r3, #2]

    if(sourceRawSignature->valid) {
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	795b      	ldrb	r3, [r3, #5]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d100      	bne.n	8002e2c <LTTO_IR_CONV_RawSignatureToSignature+0x20>
 8002e2a:	e05d      	b.n	8002ee8 <LTTO_IR_CONV_RawSignatureToSignature+0xdc>
        //Start parsing the raw Signature->
        if(sourceRawSignature->headerType == LTTO_IR_RAW_SIGNATURE_HEADER_NORMAL) {
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d136      	bne.n	8002ea2 <LTTO_IR_CONV_RawSignatureToSignature+0x96>
            if(sourceRawSignature->bitCount == LTTO_IR_RAW_SIGNATURE_BIT_COUNT_5) {
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	785b      	ldrb	r3, [r3, #1]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d055      	beq.n	8002ee8 <LTTO_IR_CONV_RawSignatureToSignature+0xdc>
                //Not known to be valid
            } else if(sourceRawSignature->bitCount == LTTO_IR_RAW_SIGNATURE_BIT_COUNT_7) {
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	785b      	ldrb	r3, [r3, #1]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d107      	bne.n	8002e54 <LTTO_IR_CONV_RawSignatureToSignature+0x48>
                //Tag
                destinationSignature->signatureType = LTTO_IR_SIGNATURE_TYPE_TAG;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	2203      	movs	r2, #3
 8002e48:	701a      	strb	r2, [r3, #0]
                destinationSignature->data = sourceRawSignature->data;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	885a      	ldrh	r2, [r3, #2]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	805a      	strh	r2, [r3, #2]
                destinationSignature->signatureType = LTTO_IR_SIGNATURE_TYPE_LTAR_BEACON;
                destinationSignature->data = sourceRawSignature->data;
            }
        }
    }
}
 8002e52:	e049      	b.n	8002ee8 <LTTO_IR_CONV_RawSignatureToSignature+0xdc>
            } else if(sourceRawSignature->bitCount == LTTO_IR_RAW_SIGNATURE_BIT_COUNT_8) {
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	785b      	ldrb	r3, [r3, #1]
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d107      	bne.n	8002e6c <LTTO_IR_CONV_RawSignatureToSignature+0x60>
                destinationSignature->signatureType = LTTO_IR_SIGNATURE_TYPE_MULTIBYTE_DATA;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2205      	movs	r2, #5
 8002e60:	701a      	strb	r2, [r3, #0]
                destinationSignature->data = sourceRawSignature->data;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	885a      	ldrh	r2, [r3, #2]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	805a      	strh	r2, [r3, #2]
}
 8002e6a:	e03d      	b.n	8002ee8 <LTTO_IR_CONV_RawSignatureToSignature+0xdc>
            } else if(sourceRawSignature->bitCount == LTTO_IR_RAW_SIGNATURE_BIT_COUNT_9) {
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	785b      	ldrb	r3, [r3, #1]
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d139      	bne.n	8002ee8 <LTTO_IR_CONV_RawSignatureToSignature+0xdc>
                if( (sourceRawSignature->data & 0x0100) == 0x0100) {
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	885b      	ldrh	r3, [r3, #2]
 8002e78:	001a      	movs	r2, r3
 8002e7a:	2380      	movs	r3, #128	; 0x80
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d007      	beq.n	8002e92 <LTTO_IR_CONV_RawSignatureToSignature+0x86>
                    destinationSignature->signatureType = LTTO_IR_SIGNATURE_TYPE_MULTIBYTE_CSUM;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2206      	movs	r2, #6
 8002e86:	701a      	strb	r2, [r3, #0]
                    destinationSignature->data = sourceRawSignature->data;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	885a      	ldrh	r2, [r3, #2]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	805a      	strh	r2, [r3, #2]
}
 8002e90:	e02a      	b.n	8002ee8 <LTTO_IR_CONV_RawSignatureToSignature+0xdc>
                    destinationSignature->signatureType = LTTO_IR_SIGNATURE_TYPE_MULTIBYTE_PTYPE;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2204      	movs	r2, #4
 8002e96:	701a      	strb	r2, [r3, #0]
                    destinationSignature->data = sourceRawSignature->data;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	885a      	ldrh	r2, [r3, #2]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	805a      	strh	r2, [r3, #2]
}
 8002ea0:	e022      	b.n	8002ee8 <LTTO_IR_CONV_RawSignatureToSignature+0xdc>
        } else if(sourceRawSignature->headerType == LTTO_IR_RAW_SIGNATURE_HEADER_BEACON) {
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d11e      	bne.n	8002ee8 <LTTO_IR_CONV_RawSignatureToSignature+0xdc>
            if(sourceRawSignature->bitCount == LTTO_IR_RAW_SIGNATURE_BIT_COUNT_5) {
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	785b      	ldrb	r3, [r3, #1]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d107      	bne.n	8002ec2 <LTTO_IR_CONV_RawSignatureToSignature+0xb6>
                destinationSignature->signatureType = LTTO_IR_SIGNATURE_TYPE_LTTO_BEACON;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	701a      	strb	r2, [r3, #0]
                destinationSignature->data = sourceRawSignature->data;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	885a      	ldrh	r2, [r3, #2]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	805a      	strh	r2, [r3, #2]
}
 8002ec0:	e012      	b.n	8002ee8 <LTTO_IR_CONV_RawSignatureToSignature+0xdc>
            } else if(sourceRawSignature->bitCount == LTTO_IR_RAW_SIGNATURE_BIT_COUNT_7) {
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	785b      	ldrb	r3, [r3, #1]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d00e      	beq.n	8002ee8 <LTTO_IR_CONV_RawSignatureToSignature+0xdc>
            } else if(sourceRawSignature->bitCount == LTTO_IR_RAW_SIGNATURE_BIT_COUNT_8) {
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	785b      	ldrb	r3, [r3, #1]
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d00a      	beq.n	8002ee8 <LTTO_IR_CONV_RawSignatureToSignature+0xdc>
            } else if(sourceRawSignature->bitCount == LTTO_IR_RAW_SIGNATURE_BIT_COUNT_9) {
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	785b      	ldrb	r3, [r3, #1]
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d106      	bne.n	8002ee8 <LTTO_IR_CONV_RawSignatureToSignature+0xdc>
                destinationSignature->signatureType = LTTO_IR_SIGNATURE_TYPE_LTAR_BEACON;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2202      	movs	r2, #2
 8002ede:	701a      	strb	r2, [r3, #0]
                destinationSignature->data = sourceRawSignature->data;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	885a      	ldrh	r2, [r3, #2]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	805a      	strh	r2, [r3, #2]
}
 8002ee8:	46c0      	nop			; (mov r8, r8)
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b002      	add	sp, #8
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <LTTO_IR_CONV_SignatureToRawSignature>:

void LTTO_IR_CONV_SignatureToRawSignature(LTTO_IR_SIGNATURE_t *sourceSignature, LTTO_IR_RAW_SIGNATURE_t *destinationRawSignature) {
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
    //Clear the destination struct.
    destinationRawSignature->valid = false;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2200      	movs	r2, #0
 8002efe:	715a      	strb	r2, [r3, #5]
    destinationRawSignature->headerType = LTTO_IR_RAW_SIGNATURE_HEADER_UNKNOWN;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]
    destinationRawSignature->bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_UNKNOWN;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	705a      	strb	r2, [r3, #1]
    destinationRawSignature->data = 0;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	805a      	strh	r2, [r3, #2]
    destinationRawSignature->SFP = LTTO_IR_RAW_SIGNATURE_SFP_UNKNOWN;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2200      	movs	r2, #0
 8002f16:	711a      	strb	r2, [r3, #4]
    
    switch(sourceSignature->signatureType) {
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b06      	cmp	r3, #6
 8002f1e:	d872      	bhi.n	8003006 <LTTO_IR_CONV_SignatureToRawSignature+0x116>
 8002f20:	009a      	lsls	r2, r3, #2
 8002f22:	4b3b      	ldr	r3, [pc, #236]	; (8003010 <LTTO_IR_CONV_SignatureToRawSignature+0x120>)
 8002f24:	18d3      	adds	r3, r2, r3
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	469f      	mov	pc, r3
        case LTTO_IR_SIGNATURE_TYPE_LTTO_BEACON:
            destinationRawSignature->headerType = LTTO_IR_RAW_SIGNATURE_HEADER_BEACON;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	701a      	strb	r2, [r3, #0]
            destinationRawSignature->bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_5;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2201      	movs	r2, #1
 8002f34:	705a      	strb	r2, [r3, #1]
            destinationRawSignature->data = sourceSignature->data;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	885a      	ldrh	r2, [r3, #2]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	805a      	strh	r2, [r3, #2]
            destinationRawSignature->SFP = LTTO_IR_RAW_SIGNATURE_SFP_SHORT;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2201      	movs	r2, #1
 8002f42:	711a      	strb	r2, [r3, #4]
            destinationRawSignature->valid = true;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2201      	movs	r2, #1
 8002f48:	715a      	strb	r2, [r3, #5]
            break;
 8002f4a:	e05c      	b.n	8003006 <LTTO_IR_CONV_SignatureToRawSignature+0x116>
        case LTTO_IR_SIGNATURE_TYPE_LTAR_BEACON:
            destinationRawSignature->headerType = LTTO_IR_RAW_SIGNATURE_HEADER_BEACON;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	701a      	strb	r2, [r3, #0]
            destinationRawSignature->bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_9;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2204      	movs	r2, #4
 8002f56:	705a      	strb	r2, [r3, #1]
            destinationRawSignature->data = sourceSignature->data;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	885a      	ldrh	r2, [r3, #2]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	805a      	strh	r2, [r3, #2]
            destinationRawSignature->SFP = LTTO_IR_RAW_SIGNATURE_SFP_SHORT;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	2201      	movs	r2, #1
 8002f64:	711a      	strb	r2, [r3, #4]
            destinationRawSignature->valid = true;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	715a      	strb	r2, [r3, #5]
            break;
 8002f6c:	e04b      	b.n	8003006 <LTTO_IR_CONV_SignatureToRawSignature+0x116>
        case LTTO_IR_SIGNATURE_TYPE_TAG:
            destinationRawSignature->headerType = LTTO_IR_RAW_SIGNATURE_HEADER_NORMAL;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2201      	movs	r2, #1
 8002f72:	701a      	strb	r2, [r3, #0]
            destinationRawSignature->bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_7;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2202      	movs	r2, #2
 8002f78:	705a      	strb	r2, [r3, #1]
            destinationRawSignature->data = sourceSignature->data;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	885a      	ldrh	r2, [r3, #2]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	805a      	strh	r2, [r3, #2]
            destinationRawSignature->SFP = LTTO_IR_RAW_SIGNATURE_SFP_LONG;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2203      	movs	r2, #3
 8002f86:	711a      	strb	r2, [r3, #4]
            destinationRawSignature->valid = true;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	715a      	strb	r2, [r3, #5]
            break;
 8002f8e:	e03a      	b.n	8003006 <LTTO_IR_CONV_SignatureToRawSignature+0x116>
        case LTTO_IR_SIGNATURE_TYPE_MULTIBYTE_PTYPE:
            destinationRawSignature->headerType = LTTO_IR_RAW_SIGNATURE_HEADER_NORMAL;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2201      	movs	r2, #1
 8002f94:	701a      	strb	r2, [r3, #0]
            destinationRawSignature->bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_9;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2204      	movs	r2, #4
 8002f9a:	705a      	strb	r2, [r3, #1]
            destinationRawSignature->data = (sourceSignature->data & ~(0x0100));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	885b      	ldrh	r3, [r3, #2]
 8002fa0:	4a1c      	ldr	r2, [pc, #112]	; (8003014 <LTTO_IR_CONV_SignatureToRawSignature+0x124>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	805a      	strh	r2, [r3, #2]
            destinationRawSignature->SFP = LTTO_IR_RAW_SIGNATURE_SFP_SHORT;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2201      	movs	r2, #1
 8002fae:	711a      	strb	r2, [r3, #4]
            destinationRawSignature->valid = true;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	715a      	strb	r2, [r3, #5]
            break;
 8002fb6:	e026      	b.n	8003006 <LTTO_IR_CONV_SignatureToRawSignature+0x116>
        case LTTO_IR_SIGNATURE_TYPE_MULTIBYTE_DATA:
            destinationRawSignature->headerType = LTTO_IR_RAW_SIGNATURE_HEADER_NORMAL;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	701a      	strb	r2, [r3, #0]
            destinationRawSignature->bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_8;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	705a      	strb	r2, [r3, #1]
            destinationRawSignature->data = sourceSignature->data;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	885a      	ldrh	r2, [r3, #2]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	805a      	strh	r2, [r3, #2]
            destinationRawSignature->SFP = LTTO_IR_RAW_SIGNATURE_SFP_SHORT;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	711a      	strb	r2, [r3, #4]
            destinationRawSignature->valid = true;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	715a      	strb	r2, [r3, #5]
            break;
 8002fd8:	e015      	b.n	8003006 <LTTO_IR_CONV_SignatureToRawSignature+0x116>
        case LTTO_IR_SIGNATURE_TYPE_MULTIBYTE_CSUM:
            destinationRawSignature->headerType = LTTO_IR_RAW_SIGNATURE_HEADER_NORMAL;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	701a      	strb	r2, [r3, #0]
            destinationRawSignature->bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_9;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	705a      	strb	r2, [r3, #1]
            destinationRawSignature->data = (sourceSignature->data | 0x0100);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	885b      	ldrh	r3, [r3, #2]
 8002fea:	2280      	movs	r2, #128	; 0x80
 8002fec:	0052      	lsls	r2, r2, #1
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	805a      	strh	r2, [r3, #2]
            destinationRawSignature->SFP = LTTO_IR_RAW_SIGNATURE_SFP_LONG;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	711a      	strb	r2, [r3, #4]
            destinationRawSignature->valid = true;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2201      	movs	r2, #1
 8003000:	715a      	strb	r2, [r3, #5]
            break;
 8003002:	e000      	b.n	8003006 <LTTO_IR_CONV_SignatureToRawSignature+0x116>
        case LTTO_IR_SIGNATURE_TYPE_UNKNOWN:
        	break;
 8003004:	46c0      	nop			; (mov r8, r8)
    }
}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	46bd      	mov	sp, r7
 800300a:	b002      	add	sp, #8
 800300c:	bd80      	pop	{r7, pc}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	08005e30 	.word	0x08005e30
 8003014:	fffffeff 	.word	0xfffffeff

08003018 <LTTO_IR_CONV_SignatureToPulses>:
    LTTO_IR_CONV_PulsesToRawSignature(pulseTickMSBuffer, pulseCount, &tempRawSignature);

    LTTO_IR_CONV_RawSignatureToSignature(&tempRawSignature, destinationSignature);
}

void LTTO_IR_CONV_SignatureToPulses(LTTO_IR_SIGNATURE_t *sourceSignature, int destinationPulseTickMSBuffer[], int *destinationPulseCount) {
 8003018:	b590      	push	{r4, r7, lr}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
    LTTO_IR_RAW_SIGNATURE_t tempRawSignature;
    LTTO_IR_CONV_SignatureToRawSignature(sourceSignature, &tempRawSignature);
 8003024:	2410      	movs	r4, #16
 8003026:	193a      	adds	r2, r7, r4
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	0011      	movs	r1, r2
 800302c:	0018      	movs	r0, r3
 800302e:	f7ff ff5f 	bl	8002ef0 <LTTO_IR_CONV_SignatureToRawSignature>
    LTTO_IR_CONV_RawSignatureToPulses(&tempRawSignature, destinationPulseTickMSBuffer, destinationPulseCount);
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	193b      	adds	r3, r7, r4
 8003038:	0018      	movs	r0, r3
 800303a:	f7ff fdeb 	bl	8002c14 <LTTO_IR_CONV_RawSignatureToPulses>
}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	46bd      	mov	sp, r7
 8003042:	b007      	add	sp, #28
 8003044:	bd90      	pop	{r4, r7, pc}

08003046 <LTTO_IR_CONV_ClearMultibyte>:
    LTTO_IR_SIGNATURE_t tempSignature;
    LTTO_IR_CONV_MultibyteChecksumToSignature(sourceMultibyte, &tempSignature);
    LTTO_IR_CONV_SignatureToPulses(&tempSignature, destinationPulseTickMSBuffer, destinationPulseCount);
}

void LTTO_IR_CONV_ClearMultibyte(LTTO_IR_MULTIBYTE_t *sourceMultibyte) {
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
    sourceMultibyte->dataByteCount = 0;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	759a      	strb	r2, [r3, #22]
    sourceMultibyte->runningChecksum = 0xFF;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	22ff      	movs	r2, #255	; 0xff
 8003058:	75da      	strb	r2, [r3, #23]
    sourceMultibyte->valid = false;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	761a      	strb	r2, [r3, #24]
}
 8003060:	46c0      	nop			; (mov r8, r8)
 8003062:	46bd      	mov	sp, r7
 8003064:	b002      	add	sp, #8
 8003066:	bd80      	pop	{r7, pc}

08003068 <LTTO_IR_CONV_AddSignatureToMultibyte>:

bool LTTO_IR_CONV_AddSignatureToMultibyte(LTTO_IR_SIGNATURE_t *sourceSignature, LTTO_IR_MULTIBYTE_t *destinationMultibyte) {
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
    bool multibyteOkay = true;
 8003072:	230f      	movs	r3, #15
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	2201      	movs	r2, #1
 8003078:	701a      	strb	r2, [r3, #0]
    if(sourceSignature->signatureType == LTTO_IR_SIGNATURE_TYPE_MULTIBYTE_PTYPE) {
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b04      	cmp	r3, #4
 8003080:	d132      	bne.n	80030e8 <LTTO_IR_CONV_AddSignatureToMultibyte+0x80>
        if(destinationMultibyte->dataByteCount == 0) {
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	7d9b      	ldrb	r3, [r3, #22]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d117      	bne.n	80030ba <LTTO_IR_CONV_AddSignatureToMultibyte+0x52>
            destinationMultibyte->dataBytes[0] = sourceSignature->data;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	885b      	ldrh	r3, [r3, #2]
 800308e:	b2da      	uxtb	r2, r3
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	701a      	strb	r2, [r3, #0]
            destinationMultibyte->dataByteCount += 1;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	7d9b      	ldrb	r3, [r3, #22]
 8003098:	3301      	adds	r3, #1
 800309a:	b2da      	uxtb	r2, r3
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	759a      	strb	r2, [r3, #22]
            destinationMultibyte->runningChecksum -= sourceSignature->data;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	7dda      	ldrb	r2, [r3, #23]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	885b      	ldrh	r3, [r3, #2]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	75da      	strb	r2, [r3, #23]
            destinationMultibyte->valid = false;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2200      	movs	r2, #0
 80030b6:	761a      	strb	r2, [r3, #24]
 80030b8:	e056      	b.n	8003168 <LTTO_IR_CONV_AddSignatureToMultibyte+0x100>
        } else {
            multibyteOkay = false;
 80030ba:	230f      	movs	r3, #15
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]
            destinationMultibyte->dataBytes[0] = sourceSignature->data;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	885b      	ldrh	r3, [r3, #2]
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	701a      	strb	r2, [r3, #0]
            destinationMultibyte->dataByteCount = 1;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	2201      	movs	r2, #1
 80030d0:	759a      	strb	r2, [r3, #22]
            destinationMultibyte->runningChecksum = (0xFF - sourceSignature->data);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	885b      	ldrh	r3, [r3, #2]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	75da      	strb	r2, [r3, #23]
            destinationMultibyte->valid = false;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	2200      	movs	r2, #0
 80030e4:	761a      	strb	r2, [r3, #24]
 80030e6:	e03f      	b.n	8003168 <LTTO_IR_CONV_AddSignatureToMultibyte+0x100>
        }
    } else if(sourceSignature->signatureType == LTTO_IR_SIGNATURE_TYPE_MULTIBYTE_DATA) {
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b05      	cmp	r3, #5
 80030ee:	d124      	bne.n	800313a <LTTO_IR_CONV_AddSignatureToMultibyte+0xd2>
        if(destinationMultibyte->dataByteCount != 0) {
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	7d9b      	ldrb	r3, [r3, #22]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d018      	beq.n	800312a <LTTO_IR_CONV_AddSignatureToMultibyte+0xc2>
            destinationMultibyte->dataBytes[destinationMultibyte->dataByteCount++] = sourceSignature->data;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	8859      	ldrh	r1, [r3, #2]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	7d9b      	ldrb	r3, [r3, #22]
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	b2d0      	uxtb	r0, r2
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	7590      	strb	r0, [r2, #22]
 8003108:	001a      	movs	r2, r3
 800310a:	b2c9      	uxtb	r1, r1
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	5499      	strb	r1, [r3, r2]
            destinationMultibyte->runningChecksum -= sourceSignature->data;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	7dda      	ldrb	r2, [r3, #23]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	885b      	ldrh	r3, [r3, #2]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	b2da      	uxtb	r2, r3
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	75da      	strb	r2, [r3, #23]
            destinationMultibyte->valid = false;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2200      	movs	r2, #0
 8003126:	761a      	strb	r2, [r3, #24]
 8003128:	e01e      	b.n	8003168 <LTTO_IR_CONV_AddSignatureToMultibyte+0x100>
        } else {
            multibyteOkay = false;
 800312a:	230f      	movs	r3, #15
 800312c:	18fb      	adds	r3, r7, r3
 800312e:	2200      	movs	r2, #0
 8003130:	701a      	strb	r2, [r3, #0]
            destinationMultibyte->valid = false;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2200      	movs	r2, #0
 8003136:	761a      	strb	r2, [r3, #24]
 8003138:	e016      	b.n	8003168 <LTTO_IR_CONV_AddSignatureToMultibyte+0x100>
        }
    } else if(sourceSignature->signatureType == LTTO_IR_SIGNATURE_TYPE_MULTIBYTE_CSUM) {
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b06      	cmp	r3, #6
 8003140:	d112      	bne.n	8003168 <LTTO_IR_CONV_AddSignatureToMultibyte+0x100>
        if(destinationMultibyte->dataByteCount != 0) {
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	7d9b      	ldrb	r3, [r3, #22]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <LTTO_IR_CONV_AddSignatureToMultibyte+0xf8>
            if(destinationMultibyte->runningChecksum == sourceSignature->data) {
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	7ddb      	ldrb	r3, [r3, #23]
 800314e:	b29a      	uxth	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	885b      	ldrh	r3, [r3, #2]
 8003154:	429a      	cmp	r2, r3
 8003156:	d107      	bne.n	8003168 <LTTO_IR_CONV_AddSignatureToMultibyte+0x100>
                destinationMultibyte->valid = true;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2201      	movs	r2, #1
 800315c:	761a      	strb	r2, [r3, #24]
 800315e:	e003      	b.n	8003168 <LTTO_IR_CONV_AddSignatureToMultibyte+0x100>
            }
        } else {
            multibyteOkay = false;
 8003160:	230f      	movs	r3, #15
 8003162:	18fb      	adds	r3, r7, r3
 8003164:	2200      	movs	r2, #0
 8003166:	701a      	strb	r2, [r3, #0]
        }
    }
    return multibyteOkay;
 8003168:	230f      	movs	r3, #15
 800316a:	18fb      	adds	r3, r7, r3
 800316c:	781b      	ldrb	r3, [r3, #0]
}
 800316e:	0018      	movs	r0, r3
 8003170:	46bd      	mov	sp, r7
 8003172:	b004      	add	sp, #16
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <LTTO_IR_RX_NewIRPulseReceived>:
volatile int LTTO_IR_RX_finalPulseCount = 0;

volatile LTTO_IR_RAW_SIGNATURE_t LTTO_IR_RX_wipSignature;
volatile LTTO_IR_RAW_SIGNATURE_t LTTO_IR_RX_finalSignature;

void LTTO_IR_RX_NewIRPulseReceived(int pulseLengthTicks, bool IRpresentThisPulse) {
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	000a      	movs	r2, r1
 8003182:	1cfb      	adds	r3, r7, #3
 8003184:	701a      	strb	r2, [r3, #0]
    switch(LTTO_IR_RX_WIPpulseCount) {
 8003186:	4bb4      	ldr	r3, [pc, #720]	; (8003458 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b15      	cmp	r3, #21
 800318c:	d900      	bls.n	8003190 <LTTO_IR_RX_NewIRPulseReceived+0x18>
 800318e:	e1db      	b.n	8003548 <LTTO_IR_RX_NewIRPulseReceived+0x3d0>
 8003190:	009a      	lsls	r2, r3, #2
 8003192:	4bb2      	ldr	r3, [pc, #712]	; (800345c <LTTO_IR_RX_NewIRPulseReceived+0x2e4>)
 8003194:	18d3      	adds	r3, r2, r3
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	469f      	mov	pc, r3
        case 0:
            //Looking for a ~3ms pre-sync pulse
            if(IRpresentThisPulse && (pulseLengthTicks > (2.5*LTTO_IR_RX_TICKS_PER_MS)) && (pulseLengthTicks < (3.5*LTTO_IR_RX_TICKS_PER_MS)) ) {
 800319a:	1cfb      	adds	r3, r7, #3
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d100      	bne.n	80031a4 <LTTO_IR_RX_NewIRPulseReceived+0x2c>
 80031a2:	e1d0      	b.n	8003546 <LTTO_IR_RX_NewIRPulseReceived+0x3ce>
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7fd f981 	bl	80004ac <__aeabi_i2d>
 80031aa:	2200      	movs	r2, #0
 80031ac:	4bac      	ldr	r3, [pc, #688]	; (8003460 <LTTO_IR_RX_NewIRPulseReceived+0x2e8>)
 80031ae:	f7fd f861 	bl	8000274 <__aeabi_dcmpgt>
 80031b2:	1e03      	subs	r3, r0, #0
 80031b4:	d100      	bne.n	80031b8 <LTTO_IR_RX_NewIRPulseReceived+0x40>
                //LTTO_IR_RX_WIPpulseMS[0] = 3;
                LTTO_IR_RX_WIPpulseCount++;
            }
            break;
 80031b6:	e1c6      	b.n	8003546 <LTTO_IR_RX_NewIRPulseReceived+0x3ce>
            if(IRpresentThisPulse && (pulseLengthTicks > (2.5*LTTO_IR_RX_TICKS_PER_MS)) && (pulseLengthTicks < (3.5*LTTO_IR_RX_TICKS_PER_MS)) ) {
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7fd f977 	bl	80004ac <__aeabi_i2d>
 80031be:	2200      	movs	r2, #0
 80031c0:	4ba8      	ldr	r3, [pc, #672]	; (8003464 <LTTO_IR_RX_NewIRPulseReceived+0x2ec>)
 80031c2:	f7fd f843 	bl	800024c <__aeabi_dcmplt>
 80031c6:	1e03      	subs	r3, r0, #0
 80031c8:	d100      	bne.n	80031cc <LTTO_IR_RX_NewIRPulseReceived+0x54>
            break;
 80031ca:	e1bc      	b.n	8003546 <LTTO_IR_RX_NewIRPulseReceived+0x3ce>
                LTTO_IR_RX_WIPpulseCount++;
 80031cc:	4ba2      	ldr	r3, [pc, #648]	; (8003458 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	4ba1      	ldr	r3, [pc, #644]	; (8003458 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 80031d4:	601a      	str	r2, [r3, #0]
            break;
 80031d6:	e1b6      	b.n	8003546 <LTTO_IR_RX_NewIRPulseReceived+0x3ce>
        case 1:
            //Looking for a ~6ms pre-sync pause
            if(!IRpresentThisPulse && (pulseLengthTicks > (5.5*LTTO_IR_RX_TICKS_PER_MS)) && (pulseLengthTicks < (7.5*LTTO_IR_RX_TICKS_PER_MS)) ) {
 80031d8:	1cfb      	adds	r3, r7, #3
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2201      	movs	r2, #1
 80031de:	4053      	eors	r3, r2
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d017      	beq.n	8003216 <LTTO_IR_RX_NewIRPulseReceived+0x9e>
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fd f960 	bl	80004ac <__aeabi_i2d>
 80031ec:	2200      	movs	r2, #0
 80031ee:	4b9e      	ldr	r3, [pc, #632]	; (8003468 <LTTO_IR_RX_NewIRPulseReceived+0x2f0>)
 80031f0:	f7fd f840 	bl	8000274 <__aeabi_dcmpgt>
 80031f4:	1e03      	subs	r3, r0, #0
 80031f6:	d00e      	beq.n	8003216 <LTTO_IR_RX_NewIRPulseReceived+0x9e>
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7fd f957 	bl	80004ac <__aeabi_i2d>
 80031fe:	2200      	movs	r2, #0
 8003200:	4b9a      	ldr	r3, [pc, #616]	; (800346c <LTTO_IR_RX_NewIRPulseReceived+0x2f4>)
 8003202:	f7fd f823 	bl	800024c <__aeabi_dcmplt>
 8003206:	1e03      	subs	r3, r0, #0
 8003208:	d005      	beq.n	8003216 <LTTO_IR_RX_NewIRPulseReceived+0x9e>
                //LTTO_IR_RX_WIPpulseMS[1] = 6;
                LTTO_IR_RX_WIPpulseCount++;
 800320a:	4b93      	ldr	r3, [pc, #588]	; (8003458 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	4b91      	ldr	r3, [pc, #580]	; (8003458 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 8003212:	601a      	str	r2, [r3, #0]
            } else {
                //Not what we're looking for.
                //Abort!
                LTTO_IR_RX_WIPpulseCount = 0;
            }
            break;
 8003214:	e198      	b.n	8003548 <LTTO_IR_RX_NewIRPulseReceived+0x3d0>
                LTTO_IR_RX_WIPpulseCount = 0;
 8003216:	4b90      	ldr	r3, [pc, #576]	; (8003458 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
            break;
 800321c:	e194      	b.n	8003548 <LTTO_IR_RX_NewIRPulseReceived+0x3d0>
        case 2:
            //Looking for either a ~3ms Tag/Data Sync Pulse, or a ~6ms Beacon Sync Pulse.
            if(IRpresentThisPulse && (pulseLengthTicks > (2.5*LTTO_IR_RX_TICKS_PER_MS)) && (pulseLengthTicks < (3.5*LTTO_IR_RX_TICKS_PER_MS)) ) {
 800321e:	1cfb      	adds	r3, r7, #3
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d01a      	beq.n	800325c <LTTO_IR_RX_NewIRPulseReceived+0xe4>
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7fd f940 	bl	80004ac <__aeabi_i2d>
 800322c:	2200      	movs	r2, #0
 800322e:	4b8c      	ldr	r3, [pc, #560]	; (8003460 <LTTO_IR_RX_NewIRPulseReceived+0x2e8>)
 8003230:	f7fd f820 	bl	8000274 <__aeabi_dcmpgt>
 8003234:	1e03      	subs	r3, r0, #0
 8003236:	d011      	beq.n	800325c <LTTO_IR_RX_NewIRPulseReceived+0xe4>
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7fd f937 	bl	80004ac <__aeabi_i2d>
 800323e:	2200      	movs	r2, #0
 8003240:	4b88      	ldr	r3, [pc, #544]	; (8003464 <LTTO_IR_RX_NewIRPulseReceived+0x2ec>)
 8003242:	f7fd f803 	bl	800024c <__aeabi_dcmplt>
 8003246:	1e03      	subs	r3, r0, #0
 8003248:	d008      	beq.n	800325c <LTTO_IR_RX_NewIRPulseReceived+0xe4>
                //LTTO_IR_RX_WIPpulseMS[2] = 3;
            	LTTO_IR_RX_wipSignature.headerType = LTTO_IR_RAW_SIGNATURE_HEADER_NORMAL;
 800324a:	4b89      	ldr	r3, [pc, #548]	; (8003470 <LTTO_IR_RX_NewIRPulseReceived+0x2f8>)
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
                LTTO_IR_RX_WIPpulseCount++;
 8003250:	4b81      	ldr	r3, [pc, #516]	; (8003458 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	4b80      	ldr	r3, [pc, #512]	; (8003458 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	e022      	b.n	80032a2 <LTTO_IR_RX_NewIRPulseReceived+0x12a>
            } else if(IRpresentThisPulse && (pulseLengthTicks > (5.5*LTTO_IR_RX_TICKS_PER_MS)) && (pulseLengthTicks < (6.5*LTTO_IR_RX_TICKS_PER_MS)) ) {
 800325c:	1cfb      	adds	r3, r7, #3
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01a      	beq.n	800329a <LTTO_IR_RX_NewIRPulseReceived+0x122>
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7fd f921 	bl	80004ac <__aeabi_i2d>
 800326a:	2200      	movs	r2, #0
 800326c:	4b7e      	ldr	r3, [pc, #504]	; (8003468 <LTTO_IR_RX_NewIRPulseReceived+0x2f0>)
 800326e:	f7fd f801 	bl	8000274 <__aeabi_dcmpgt>
 8003272:	1e03      	subs	r3, r0, #0
 8003274:	d011      	beq.n	800329a <LTTO_IR_RX_NewIRPulseReceived+0x122>
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fd f918 	bl	80004ac <__aeabi_i2d>
 800327c:	2200      	movs	r2, #0
 800327e:	4b7d      	ldr	r3, [pc, #500]	; (8003474 <LTTO_IR_RX_NewIRPulseReceived+0x2fc>)
 8003280:	f7fc ffe4 	bl	800024c <__aeabi_dcmplt>
 8003284:	1e03      	subs	r3, r0, #0
 8003286:	d008      	beq.n	800329a <LTTO_IR_RX_NewIRPulseReceived+0x122>
                //LTTO_IR_RX_WIPpulseMS[2] = 6;
            	LTTO_IR_RX_wipSignature.headerType = LTTO_IR_RAW_SIGNATURE_HEADER_BEACON;
 8003288:	4b79      	ldr	r3, [pc, #484]	; (8003470 <LTTO_IR_RX_NewIRPulseReceived+0x2f8>)
 800328a:	2202      	movs	r2, #2
 800328c:	701a      	strb	r2, [r3, #0]
                LTTO_IR_RX_WIPpulseCount++;
 800328e:	4b72      	ldr	r3, [pc, #456]	; (8003458 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	4b70      	ldr	r3, [pc, #448]	; (8003458 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	e003      	b.n	80032a2 <LTTO_IR_RX_NewIRPulseReceived+0x12a>
            } else {
                //Not what we're looking for.
                //Abort!
                LTTO_IR_RX_WIPpulseCount = 0;
 800329a:	4b6f      	ldr	r3, [pc, #444]	; (8003458 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
            }
            break;
 80032a0:	e152      	b.n	8003548 <LTTO_IR_RX_NewIRPulseReceived+0x3d0>
 80032a2:	e151      	b.n	8003548 <LTTO_IR_RX_NewIRPulseReceived+0x3d0>
        case 13:
        case 15:
        case 17:
        case 19:
            //Looking for a ~2ms data pause or something longer than ~2.5ms as a sign that either we're done or something got corrupted.
            if(!IRpresentThisPulse && (pulseLengthTicks > (1.5*LTTO_IR_RX_TICKS_PER_MS)) && (pulseLengthTicks < (2.5*LTTO_IR_RX_TICKS_PER_MS)) ) {
 80032a4:	1cfb      	adds	r3, r7, #3
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2201      	movs	r2, #1
 80032aa:	4053      	eors	r3, r2
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d017      	beq.n	80032e2 <LTTO_IR_RX_NewIRPulseReceived+0x16a>
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7fd f8fa 	bl	80004ac <__aeabi_i2d>
 80032b8:	2200      	movs	r2, #0
 80032ba:	4b6f      	ldr	r3, [pc, #444]	; (8003478 <LTTO_IR_RX_NewIRPulseReceived+0x300>)
 80032bc:	f7fc ffda 	bl	8000274 <__aeabi_dcmpgt>
 80032c0:	1e03      	subs	r3, r0, #0
 80032c2:	d00e      	beq.n	80032e2 <LTTO_IR_RX_NewIRPulseReceived+0x16a>
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7fd f8f1 	bl	80004ac <__aeabi_i2d>
 80032ca:	2200      	movs	r2, #0
 80032cc:	4b64      	ldr	r3, [pc, #400]	; (8003460 <LTTO_IR_RX_NewIRPulseReceived+0x2e8>)
 80032ce:	f7fc ffbd 	bl	800024c <__aeabi_dcmplt>
 80032d2:	1e03      	subs	r3, r0, #0
 80032d4:	d005      	beq.n	80032e2 <LTTO_IR_RX_NewIRPulseReceived+0x16a>
                //LTTO_IR_RX_WIPpulseMS[LTTO_IR_RX_WIPpulseCount] = 2;
                LTTO_IR_RX_WIPpulseCount++;
 80032d6:	4b60      	ldr	r3, [pc, #384]	; (8003458 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	4b5e      	ldr	r3, [pc, #376]	; (8003458 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	e05d      	b.n	800339e <LTTO_IR_RX_NewIRPulseReceived+0x226>
            } else if(!IRpresentThisPulse && (pulseLengthTicks > (2.5*LTTO_IR_RX_TICKS_PER_MS)) ) {
 80032e2:	1cfb      	adds	r3, r7, #3
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2201      	movs	r2, #1
 80032e8:	4053      	eors	r3, r2
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d052      	beq.n	8003396 <LTTO_IR_RX_NewIRPulseReceived+0x21e>
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7fd f8db 	bl	80004ac <__aeabi_i2d>
 80032f6:	2200      	movs	r2, #0
 80032f8:	4b59      	ldr	r3, [pc, #356]	; (8003460 <LTTO_IR_RX_NewIRPulseReceived+0x2e8>)
 80032fa:	f7fc ffbb 	bl	8000274 <__aeabi_dcmpgt>
 80032fe:	1e03      	subs	r3, r0, #0
 8003300:	d049      	beq.n	8003396 <LTTO_IR_RX_NewIRPulseReceived+0x21e>
                //We're done!
                //Copy things to the "forground" buffer, so that the gameplay loop can s  ee we got something.
                /*for(int i = 0;i < LTTO_IR_RX_WIPpulseCount;i++) {
                    LTTO_IR_RX_finalPulseMS[i] = LTTO_IR_RX_WIPpulseMS[i];
                }*/
            	uint8_t temp = ((LTTO_IR_RX_WIPpulseCount - 3) / 2);
 8003302:	4b55      	ldr	r3, [pc, #340]	; (8003458 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3b03      	subs	r3, #3
 8003308:	2b00      	cmp	r3, #0
 800330a:	da00      	bge.n	800330e <LTTO_IR_RX_NewIRPulseReceived+0x196>
 800330c:	3301      	adds	r3, #1
 800330e:	105b      	asrs	r3, r3, #1
 8003310:	001a      	movs	r2, r3
 8003312:	210e      	movs	r1, #14
 8003314:	187b      	adds	r3, r7, r1
 8003316:	701a      	strb	r2, [r3, #0]
            	LTTO_IR_RX_finalSignature.headerType = LTTO_IR_RX_wipSignature.headerType;
 8003318:	4b55      	ldr	r3, [pc, #340]	; (8003470 <LTTO_IR_RX_NewIRPulseReceived+0x2f8>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	b2da      	uxtb	r2, r3
 800331e:	4b57      	ldr	r3, [pc, #348]	; (800347c <LTTO_IR_RX_NewIRPulseReceived+0x304>)
 8003320:	701a      	strb	r2, [r3, #0]
            	LTTO_IR_RX_finalSignature.data = LTTO_IR_RX_wipSignature.data;
 8003322:	4b53      	ldr	r3, [pc, #332]	; (8003470 <LTTO_IR_RX_NewIRPulseReceived+0x2f8>)
 8003324:	885b      	ldrh	r3, [r3, #2]
 8003326:	b29a      	uxth	r2, r3
 8003328:	4b54      	ldr	r3, [pc, #336]	; (800347c <LTTO_IR_RX_NewIRPulseReceived+0x304>)
 800332a:	805a      	strh	r2, [r3, #2]
            	//LTTO_IR_RX_finalSignature.bitCount = LTTO_IR_RX_wipSignature.bitCount;
            	switch(temp) {
 800332c:	187b      	adds	r3, r7, r1
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b07      	cmp	r3, #7
 8003332:	d00f      	beq.n	8003354 <LTTO_IR_RX_NewIRPulseReceived+0x1dc>
 8003334:	dc02      	bgt.n	800333c <LTTO_IR_RX_NewIRPulseReceived+0x1c4>
 8003336:	2b05      	cmp	r3, #5
 8003338:	d008      	beq.n	800334c <LTTO_IR_RX_NewIRPulseReceived+0x1d4>
 800333a:	e003      	b.n	8003344 <LTTO_IR_RX_NewIRPulseReceived+0x1cc>
 800333c:	2b08      	cmp	r3, #8
 800333e:	d00d      	beq.n	800335c <LTTO_IR_RX_NewIRPulseReceived+0x1e4>
 8003340:	2b09      	cmp	r3, #9
 8003342:	d00f      	beq.n	8003364 <LTTO_IR_RX_NewIRPulseReceived+0x1ec>
					default:
						LTTO_IR_RX_finalSignature.bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_UNKNOWN;
 8003344:	4b4d      	ldr	r3, [pc, #308]	; (800347c <LTTO_IR_RX_NewIRPulseReceived+0x304>)
 8003346:	2200      	movs	r2, #0
 8003348:	705a      	strb	r2, [r3, #1]
						break;
 800334a:	e00f      	b.n	800336c <LTTO_IR_RX_NewIRPulseReceived+0x1f4>
					case 5:
						LTTO_IR_RX_finalSignature.bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_5;
 800334c:	4b4b      	ldr	r3, [pc, #300]	; (800347c <LTTO_IR_RX_NewIRPulseReceived+0x304>)
 800334e:	2201      	movs	r2, #1
 8003350:	705a      	strb	r2, [r3, #1]
						break;
 8003352:	e00b      	b.n	800336c <LTTO_IR_RX_NewIRPulseReceived+0x1f4>
					case 7:
						LTTO_IR_RX_finalSignature.bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_7;
 8003354:	4b49      	ldr	r3, [pc, #292]	; (800347c <LTTO_IR_RX_NewIRPulseReceived+0x304>)
 8003356:	2202      	movs	r2, #2
 8003358:	705a      	strb	r2, [r3, #1]
						break;
 800335a:	e007      	b.n	800336c <LTTO_IR_RX_NewIRPulseReceived+0x1f4>
					case 8:
						LTTO_IR_RX_finalSignature.bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_8;
 800335c:	4b47      	ldr	r3, [pc, #284]	; (800347c <LTTO_IR_RX_NewIRPulseReceived+0x304>)
 800335e:	2203      	movs	r2, #3
 8003360:	705a      	strb	r2, [r3, #1]
						break;
 8003362:	e003      	b.n	800336c <LTTO_IR_RX_NewIRPulseReceived+0x1f4>
					case 9:
						LTTO_IR_RX_finalSignature.bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_9;
 8003364:	4b45      	ldr	r3, [pc, #276]	; (800347c <LTTO_IR_RX_NewIRPulseReceived+0x304>)
 8003366:	2204      	movs	r2, #4
 8003368:	705a      	strb	r2, [r3, #1]
						break;
 800336a:	46c0      	nop			; (mov r8, r8)
            	}
            	LTTO_IR_RX_finalSignature.SFP = LTTO_IR_RX_wipSignature.SFP;
 800336c:	4b40      	ldr	r3, [pc, #256]	; (8003470 <LTTO_IR_RX_NewIRPulseReceived+0x2f8>)
 800336e:	791b      	ldrb	r3, [r3, #4]
 8003370:	b2da      	uxtb	r2, r3
 8003372:	4b42      	ldr	r3, [pc, #264]	; (800347c <LTTO_IR_RX_NewIRPulseReceived+0x304>)
 8003374:	711a      	strb	r2, [r3, #4]
            	if(LTTO_IR_RX_finalSignature.bitCount != LTTO_IR_RAW_SIGNATURE_BIT_COUNT_UNKNOWN) {
 8003376:	4b41      	ldr	r3, [pc, #260]	; (800347c <LTTO_IR_RX_NewIRPulseReceived+0x304>)
 8003378:	785b      	ldrb	r3, [r3, #1]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d006      	beq.n	800338e <LTTO_IR_RX_NewIRPulseReceived+0x216>
					LTTO_IR_RX_finalSignature.valid = true;
 8003380:	4b3e      	ldr	r3, [pc, #248]	; (800347c <LTTO_IR_RX_NewIRPulseReceived+0x304>)
 8003382:	2201      	movs	r2, #1
 8003384:	715a      	strb	r2, [r3, #5]
					LTTO_IR_RX_finalPulseCount = LTTO_IR_RX_WIPpulseCount;
 8003386:	4b34      	ldr	r3, [pc, #208]	; (8003458 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	4b3d      	ldr	r3, [pc, #244]	; (8003480 <LTTO_IR_RX_NewIRPulseReceived+0x308>)
 800338c:	601a      	str	r2, [r3, #0]
            	}
                //And reset the receiver counter.
                LTTO_IR_RX_WIPpulseCount = 0;
 800338e:	4b32      	ldr	r3, [pc, #200]	; (8003458 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
            } else if(!IRpresentThisPulse && (pulseLengthTicks > (2.5*LTTO_IR_RX_TICKS_PER_MS)) ) {
 8003394:	e003      	b.n	800339e <LTTO_IR_RX_NewIRPulseReceived+0x226>
            } else {
                //Not what we're looking for. Abort!
                LTTO_IR_RX_WIPpulseCount = 0;
 8003396:	4b30      	ldr	r3, [pc, #192]	; (8003458 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
            }
            break;
 800339c:	e0d4      	b.n	8003548 <LTTO_IR_RX_NewIRPulseReceived+0x3d0>
 800339e:	e0d3      	b.n	8003548 <LTTO_IR_RX_NewIRPulseReceived+0x3d0>
        case 14:
        case 16:
        case 18:
        case 20:
            //Looking for either a ~1ms "0" data bit, or a ~2ms "1" data bit.
            if(IRpresentThisPulse && (pulseLengthTicks > (0.5*LTTO_IR_RX_TICKS_PER_MS)) && (pulseLengthTicks < (1.5*LTTO_IR_RX_TICKS_PER_MS)) ) {
 80033a0:	1cfb      	adds	r3, r7, #3
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d026      	beq.n	80033f6 <LTTO_IR_RX_NewIRPulseReceived+0x27e>
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7fd f87f 	bl	80004ac <__aeabi_i2d>
 80033ae:	2200      	movs	r2, #0
 80033b0:	4b34      	ldr	r3, [pc, #208]	; (8003484 <LTTO_IR_RX_NewIRPulseReceived+0x30c>)
 80033b2:	f7fc ff5f 	bl	8000274 <__aeabi_dcmpgt>
 80033b6:	1e03      	subs	r3, r0, #0
 80033b8:	d01d      	beq.n	80033f6 <LTTO_IR_RX_NewIRPulseReceived+0x27e>
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fd f876 	bl	80004ac <__aeabi_i2d>
 80033c0:	2200      	movs	r2, #0
 80033c2:	4b2d      	ldr	r3, [pc, #180]	; (8003478 <LTTO_IR_RX_NewIRPulseReceived+0x300>)
 80033c4:	f7fc ff42 	bl	800024c <__aeabi_dcmplt>
 80033c8:	1e03      	subs	r3, r0, #0
 80033ca:	d014      	beq.n	80033f6 <LTTO_IR_RX_NewIRPulseReceived+0x27e>
                //LTTO_IR_RX_WIPpulseMS[LTTO_IR_RX_WIPpulseCount] = 1;
            	LTTO_IR_RX_wipSignature.data <<= 1;
 80033cc:	4b28      	ldr	r3, [pc, #160]	; (8003470 <LTTO_IR_RX_NewIRPulseReceived+0x2f8>)
 80033ce:	885b      	ldrh	r3, [r3, #2]
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	18db      	adds	r3, r3, r3
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	4b26      	ldr	r3, [pc, #152]	; (8003470 <LTTO_IR_RX_NewIRPulseReceived+0x2f8>)
 80033d8:	805a      	strh	r2, [r3, #2]
            	LTTO_IR_RX_wipSignature.data &= ~(0x0001);
 80033da:	4b25      	ldr	r3, [pc, #148]	; (8003470 <LTTO_IR_RX_NewIRPulseReceived+0x2f8>)
 80033dc:	885b      	ldrh	r3, [r3, #2]
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2201      	movs	r2, #1
 80033e2:	4393      	bics	r3, r2
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	4b22      	ldr	r3, [pc, #136]	; (8003470 <LTTO_IR_RX_NewIRPulseReceived+0x2f8>)
 80033e8:	805a      	strh	r2, [r3, #2]
                LTTO_IR_RX_WIPpulseCount++;
 80033ea:	4b1b      	ldr	r3, [pc, #108]	; (8003458 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	1c5a      	adds	r2, r3, #1
 80033f0:	4b19      	ldr	r3, [pc, #100]	; (8003458 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e02e      	b.n	8003454 <LTTO_IR_RX_NewIRPulseReceived+0x2dc>
            } else if(IRpresentThisPulse && (pulseLengthTicks > (1.5*LTTO_IR_RX_TICKS_PER_MS)) && (pulseLengthTicks < (2.5*LTTO_IR_RX_TICKS_PER_MS)) ) {
 80033f6:	1cfb      	adds	r3, r7, #3
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d026      	beq.n	800344c <LTTO_IR_RX_NewIRPulseReceived+0x2d4>
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fd f854 	bl	80004ac <__aeabi_i2d>
 8003404:	2200      	movs	r2, #0
 8003406:	4b1c      	ldr	r3, [pc, #112]	; (8003478 <LTTO_IR_RX_NewIRPulseReceived+0x300>)
 8003408:	f7fc ff34 	bl	8000274 <__aeabi_dcmpgt>
 800340c:	1e03      	subs	r3, r0, #0
 800340e:	d01d      	beq.n	800344c <LTTO_IR_RX_NewIRPulseReceived+0x2d4>
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7fd f84b 	bl	80004ac <__aeabi_i2d>
 8003416:	2200      	movs	r2, #0
 8003418:	4b11      	ldr	r3, [pc, #68]	; (8003460 <LTTO_IR_RX_NewIRPulseReceived+0x2e8>)
 800341a:	f7fc ff17 	bl	800024c <__aeabi_dcmplt>
 800341e:	1e03      	subs	r3, r0, #0
 8003420:	d014      	beq.n	800344c <LTTO_IR_RX_NewIRPulseReceived+0x2d4>
            	LTTO_IR_RX_wipSignature.data <<= 1;
 8003422:	4b13      	ldr	r3, [pc, #76]	; (8003470 <LTTO_IR_RX_NewIRPulseReceived+0x2f8>)
 8003424:	885b      	ldrh	r3, [r3, #2]
 8003426:	b29b      	uxth	r3, r3
 8003428:	18db      	adds	r3, r3, r3
 800342a:	b29a      	uxth	r2, r3
 800342c:	4b10      	ldr	r3, [pc, #64]	; (8003470 <LTTO_IR_RX_NewIRPulseReceived+0x2f8>)
 800342e:	805a      	strh	r2, [r3, #2]
				LTTO_IR_RX_wipSignature.data |= 0x0001;
 8003430:	4b0f      	ldr	r3, [pc, #60]	; (8003470 <LTTO_IR_RX_NewIRPulseReceived+0x2f8>)
 8003432:	885b      	ldrh	r3, [r3, #2]
 8003434:	b29b      	uxth	r3, r3
 8003436:	2201      	movs	r2, #1
 8003438:	4313      	orrs	r3, r2
 800343a:	b29a      	uxth	r2, r3
 800343c:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <LTTO_IR_RX_NewIRPulseReceived+0x2f8>)
 800343e:	805a      	strh	r2, [r3, #2]
                LTTO_IR_RX_WIPpulseCount++;
 8003440:	4b05      	ldr	r3, [pc, #20]	; (8003458 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	4b04      	ldr	r3, [pc, #16]	; (8003458 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	e003      	b.n	8003454 <LTTO_IR_RX_NewIRPulseReceived+0x2dc>
            } else {
                //Not what we're looking for.
                //Abort!
                LTTO_IR_RX_WIPpulseCount = 0;
 800344c:	4b02      	ldr	r3, [pc, #8]	; (8003458 <LTTO_IR_RX_NewIRPulseReceived+0x2e0>)
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
            }
            break;
 8003452:	e079      	b.n	8003548 <LTTO_IR_RX_NewIRPulseReceived+0x3d0>
 8003454:	e078      	b.n	8003548 <LTTO_IR_RX_NewIRPulseReceived+0x3d0>
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	20000030 	.word	0x20000030
 800345c:	08005e4c 	.word	0x08005e4c
 8003460:	40290000 	.word	0x40290000
 8003464:	40318000 	.word	0x40318000
 8003468:	403b8000 	.word	0x403b8000
 800346c:	4042c000 	.word	0x4042c000
 8003470:	20001a2c 	.word	0x20001a2c
 8003474:	40404000 	.word	0x40404000
 8003478:	401e0000 	.word	0x401e0000
 800347c:	20001a34 	.word	0x20001a34
 8003480:	20000034 	.word	0x20000034
 8003484:	40040000 	.word	0x40040000
        case 21:
            //Looking for a period of silence, at least 2.5ms.
            if(!IRpresentThisPulse && (pulseLengthTicks > (2.5*LTTO_IR_RX_TICKS_PER_MS)) ) {
 8003488:	1cfb      	adds	r3, r7, #3
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2201      	movs	r2, #1
 800348e:	4053      	eors	r3, r2
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d053      	beq.n	800353e <LTTO_IR_RX_NewIRPulseReceived+0x3c6>
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7fd f808 	bl	80004ac <__aeabi_i2d>
 800349c:	2200      	movs	r2, #0
 800349e:	4b2c      	ldr	r3, [pc, #176]	; (8003550 <LTTO_IR_RX_NewIRPulseReceived+0x3d8>)
 80034a0:	f7fc fee8 	bl	8000274 <__aeabi_dcmpgt>
 80034a4:	1e03      	subs	r3, r0, #0
 80034a6:	d04a      	beq.n	800353e <LTTO_IR_RX_NewIRPulseReceived+0x3c6>
                //We're done!
            	//Copy things to the "forground" buffer, so that the gameplay loop can s  ee we got something.
				/*for(int i = 0;i < LTTO_IR_RX_WIPpulseCount;i++) {
					LTTO_IR_RX_finalPulseMS[i] = LTTO_IR_RX_WIPpulseMS[i];
				}*/
				uint8_t temp = ((LTTO_IR_RX_WIPpulseCount - 3) / 2);
 80034a8:	4b2a      	ldr	r3, [pc, #168]	; (8003554 <LTTO_IR_RX_NewIRPulseReceived+0x3dc>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3b03      	subs	r3, #3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	da00      	bge.n	80034b4 <LTTO_IR_RX_NewIRPulseReceived+0x33c>
 80034b2:	3301      	adds	r3, #1
 80034b4:	105b      	asrs	r3, r3, #1
 80034b6:	001a      	movs	r2, r3
 80034b8:	210f      	movs	r1, #15
 80034ba:	187b      	adds	r3, r7, r1
 80034bc:	701a      	strb	r2, [r3, #0]
				LTTO_IR_RX_finalSignature.headerType = LTTO_IR_RX_wipSignature.headerType;
 80034be:	4b26      	ldr	r3, [pc, #152]	; (8003558 <LTTO_IR_RX_NewIRPulseReceived+0x3e0>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	4b25      	ldr	r3, [pc, #148]	; (800355c <LTTO_IR_RX_NewIRPulseReceived+0x3e4>)
 80034c6:	701a      	strb	r2, [r3, #0]
				LTTO_IR_RX_finalSignature.data = LTTO_IR_RX_wipSignature.data;
 80034c8:	4b23      	ldr	r3, [pc, #140]	; (8003558 <LTTO_IR_RX_NewIRPulseReceived+0x3e0>)
 80034ca:	885b      	ldrh	r3, [r3, #2]
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	4b23      	ldr	r3, [pc, #140]	; (800355c <LTTO_IR_RX_NewIRPulseReceived+0x3e4>)
 80034d0:	805a      	strh	r2, [r3, #2]
				//LTTO_IR_RX_finalSignature.bitCount = LTTO_IR_RX_wipSignature.bitCount;
				switch(temp) {
 80034d2:	187b      	adds	r3, r7, r1
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b07      	cmp	r3, #7
 80034d8:	d00f      	beq.n	80034fa <LTTO_IR_RX_NewIRPulseReceived+0x382>
 80034da:	dc02      	bgt.n	80034e2 <LTTO_IR_RX_NewIRPulseReceived+0x36a>
 80034dc:	2b05      	cmp	r3, #5
 80034de:	d008      	beq.n	80034f2 <LTTO_IR_RX_NewIRPulseReceived+0x37a>
 80034e0:	e003      	b.n	80034ea <LTTO_IR_RX_NewIRPulseReceived+0x372>
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d00d      	beq.n	8003502 <LTTO_IR_RX_NewIRPulseReceived+0x38a>
 80034e6:	2b09      	cmp	r3, #9
 80034e8:	d00f      	beq.n	800350a <LTTO_IR_RX_NewIRPulseReceived+0x392>
					default:
						LTTO_IR_RX_finalSignature.bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_UNKNOWN;
 80034ea:	4b1c      	ldr	r3, [pc, #112]	; (800355c <LTTO_IR_RX_NewIRPulseReceived+0x3e4>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	705a      	strb	r2, [r3, #1]
						break;
 80034f0:	e00f      	b.n	8003512 <LTTO_IR_RX_NewIRPulseReceived+0x39a>
					case 5:
						LTTO_IR_RX_finalSignature.bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_5;
 80034f2:	4b1a      	ldr	r3, [pc, #104]	; (800355c <LTTO_IR_RX_NewIRPulseReceived+0x3e4>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	705a      	strb	r2, [r3, #1]
						break;
 80034f8:	e00b      	b.n	8003512 <LTTO_IR_RX_NewIRPulseReceived+0x39a>
					case 7:
						LTTO_IR_RX_finalSignature.bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_7;
 80034fa:	4b18      	ldr	r3, [pc, #96]	; (800355c <LTTO_IR_RX_NewIRPulseReceived+0x3e4>)
 80034fc:	2202      	movs	r2, #2
 80034fe:	705a      	strb	r2, [r3, #1]
						break;
 8003500:	e007      	b.n	8003512 <LTTO_IR_RX_NewIRPulseReceived+0x39a>
					case 8:
						LTTO_IR_RX_finalSignature.bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_8;
 8003502:	4b16      	ldr	r3, [pc, #88]	; (800355c <LTTO_IR_RX_NewIRPulseReceived+0x3e4>)
 8003504:	2203      	movs	r2, #3
 8003506:	705a      	strb	r2, [r3, #1]
						break;
 8003508:	e003      	b.n	8003512 <LTTO_IR_RX_NewIRPulseReceived+0x39a>
					case 9:
						LTTO_IR_RX_finalSignature.bitCount = LTTO_IR_RAW_SIGNATURE_BIT_COUNT_9;
 800350a:	4b14      	ldr	r3, [pc, #80]	; (800355c <LTTO_IR_RX_NewIRPulseReceived+0x3e4>)
 800350c:	2204      	movs	r2, #4
 800350e:	705a      	strb	r2, [r3, #1]
						break;
 8003510:	46c0      	nop			; (mov r8, r8)
				}
				LTTO_IR_RX_finalSignature.SFP = LTTO_IR_RX_wipSignature.SFP;
 8003512:	4b11      	ldr	r3, [pc, #68]	; (8003558 <LTTO_IR_RX_NewIRPulseReceived+0x3e0>)
 8003514:	791b      	ldrb	r3, [r3, #4]
 8003516:	b2da      	uxtb	r2, r3
 8003518:	4b10      	ldr	r3, [pc, #64]	; (800355c <LTTO_IR_RX_NewIRPulseReceived+0x3e4>)
 800351a:	711a      	strb	r2, [r3, #4]
				if(LTTO_IR_RX_finalSignature.bitCount != LTTO_IR_RAW_SIGNATURE_BIT_COUNT_UNKNOWN) {
 800351c:	4b0f      	ldr	r3, [pc, #60]	; (800355c <LTTO_IR_RX_NewIRPulseReceived+0x3e4>)
 800351e:	785b      	ldrb	r3, [r3, #1]
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d006      	beq.n	8003534 <LTTO_IR_RX_NewIRPulseReceived+0x3bc>
					LTTO_IR_RX_finalSignature.valid = true;
 8003526:	4b0d      	ldr	r3, [pc, #52]	; (800355c <LTTO_IR_RX_NewIRPulseReceived+0x3e4>)
 8003528:	2201      	movs	r2, #1
 800352a:	715a      	strb	r2, [r3, #5]
					LTTO_IR_RX_finalPulseCount = LTTO_IR_RX_WIPpulseCount;
 800352c:	4b09      	ldr	r3, [pc, #36]	; (8003554 <LTTO_IR_RX_NewIRPulseReceived+0x3dc>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <LTTO_IR_RX_NewIRPulseReceived+0x3e8>)
 8003532:	601a      	str	r2, [r3, #0]
				}
				//And reset the receiver counter.
				LTTO_IR_RX_WIPpulseCount = 0;
 8003534:	4b07      	ldr	r3, [pc, #28]	; (8003554 <LTTO_IR_RX_NewIRPulseReceived+0x3dc>)
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
            if(!IRpresentThisPulse && (pulseLengthTicks > (2.5*LTTO_IR_RX_TICKS_PER_MS)) ) {
 800353a:	46c0      	nop			; (mov r8, r8)
            } else {
                //Something's wrong. Nothing in the LTTO protocol is this long.
                //Abort!
                LTTO_IR_RX_WIPpulseCount = 0;
            }
            break;
 800353c:	e004      	b.n	8003548 <LTTO_IR_RX_NewIRPulseReceived+0x3d0>
                LTTO_IR_RX_WIPpulseCount = 0;
 800353e:	4b05      	ldr	r3, [pc, #20]	; (8003554 <LTTO_IR_RX_NewIRPulseReceived+0x3dc>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
            break;
 8003544:	e000      	b.n	8003548 <LTTO_IR_RX_NewIRPulseReceived+0x3d0>
            break;
 8003546:	46c0      	nop			; (mov r8, r8)
    }
}
 8003548:	46c0      	nop			; (mov r8, r8)
 800354a:	46bd      	mov	sp, r7
 800354c:	b004      	add	sp, #16
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40290000 	.word	0x40290000
 8003554:	20000030 	.word	0x20000030
 8003558:	20001a2c 	.word	0x20001a2c
 800355c:	20001a34 	.word	0x20001a34
 8003560:	20000034 	.word	0x20000034

08003564 <LTTO_IR_RX_AC_NewIRPulseReceived>:

//LTTO_IR_RAW_SIGNATURE_t LTTO_IR_RX_AC_tempRawSignature;
LTTO_IR_SIGNATURE_t LTTO_IR_RX_AC_tempSignature;
LTTO_IR_MULTIBYTE_t LTTO_IR_RX_AC_tempMultibyte;

void LTTO_IR_RX_AC_NewIRPulseReceived(int pulseLengthTicks, bool IRpresentThisPulse) {
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	000a      	movs	r2, r1
 800356e:	1cfb      	adds	r3, r7, #3
 8003570:	701a      	strb	r2, [r3, #0]
    LTTO_IR_RX_NewIRPulseReceived(pulseLengthTicks, IRpresentThisPulse);
 8003572:	1cfb      	adds	r3, r7, #3
 8003574:	781a      	ldrb	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	0011      	movs	r1, r2
 800357a:	0018      	movs	r0, r3
 800357c:	f7ff fdfc 	bl	8003178 <LTTO_IR_RX_NewIRPulseReceived>

    if(LTTO_IR_RX_finalPulseCount) {
 8003580:	4b21      	ldr	r3, [pc, #132]	; (8003608 <LTTO_IR_RX_AC_NewIRPulseReceived+0xa4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d03a      	beq.n	80035fe <LTTO_IR_RX_AC_NewIRPulseReceived+0x9a>
        //New LTTO pulse train received...
        //Convert it on up
        //LTTO_IR_CONV_PulsesToRawSignature(LTTO_IR_RX_finalPulseMS, LTTO_IR_RX_finalPulseCount, &LTTO_IR_RX_AC_tempRawSignature);
        LTTO_IR_CONV_RawSignatureToSignature(&LTTO_IR_RX_finalSignature, &LTTO_IR_RX_AC_tempSignature);
 8003588:	4a20      	ldr	r2, [pc, #128]	; (800360c <LTTO_IR_RX_AC_NewIRPulseReceived+0xa8>)
 800358a:	4b21      	ldr	r3, [pc, #132]	; (8003610 <LTTO_IR_RX_AC_NewIRPulseReceived+0xac>)
 800358c:	0011      	movs	r1, r2
 800358e:	0018      	movs	r0, r3
 8003590:	f7ff fc3c 	bl	8002e0c <LTTO_IR_CONV_RawSignatureToSignature>
        LTTO_IR_RX_finalSignature.valid = false;
 8003594:	4b1e      	ldr	r3, [pc, #120]	; (8003610 <LTTO_IR_RX_AC_NewIRPulseReceived+0xac>)
 8003596:	2200      	movs	r2, #0
 8003598:	715a      	strb	r2, [r3, #5]
        //Check if this is a multibyte...
        if(LTTO_IR_RX_AC_tempSignature.signatureType == LTTO_IR_SIGNATURE_TYPE_MULTIBYTE_PTYPE) {
 800359a:	4b1c      	ldr	r3, [pc, #112]	; (800360c <LTTO_IR_RX_AC_NewIRPulseReceived+0xa8>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d10a      	bne.n	80035b8 <LTTO_IR_RX_AC_NewIRPulseReceived+0x54>
            //Multibyte PType
            //Clear the temp multibyte
            LTTO_IR_CONV_ClearMultibyte(&LTTO_IR_RX_AC_tempMultibyte);
 80035a2:	4b1c      	ldr	r3, [pc, #112]	; (8003614 <LTTO_IR_RX_AC_NewIRPulseReceived+0xb0>)
 80035a4:	0018      	movs	r0, r3
 80035a6:	f7ff fd4e 	bl	8003046 <LTTO_IR_CONV_ClearMultibyte>
            //Add the new signature
            LTTO_IR_CONV_AddSignatureToMultibyte(&LTTO_IR_RX_AC_tempSignature, &LTTO_IR_RX_AC_tempMultibyte);
 80035aa:	4a1a      	ldr	r2, [pc, #104]	; (8003614 <LTTO_IR_RX_AC_NewIRPulseReceived+0xb0>)
 80035ac:	4b17      	ldr	r3, [pc, #92]	; (800360c <LTTO_IR_RX_AC_NewIRPulseReceived+0xa8>)
 80035ae:	0011      	movs	r1, r2
 80035b0:	0018      	movs	r0, r3
 80035b2:	f7ff fd59 	bl	8003068 <LTTO_IR_CONV_AddSignatureToMultibyte>
 80035b6:	e01f      	b.n	80035f8 <LTTO_IR_RX_AC_NewIRPulseReceived+0x94>
        } else if(LTTO_IR_RX_AC_tempSignature.signatureType == LTTO_IR_SIGNATURE_TYPE_MULTIBYTE_DATA) {
 80035b8:	4b14      	ldr	r3, [pc, #80]	; (800360c <LTTO_IR_RX_AC_NewIRPulseReceived+0xa8>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b05      	cmp	r3, #5
 80035be:	d106      	bne.n	80035ce <LTTO_IR_RX_AC_NewIRPulseReceived+0x6a>
            //Multibyte data
            //Add the new signature
            LTTO_IR_CONV_AddSignatureToMultibyte(&LTTO_IR_RX_AC_tempSignature, &LTTO_IR_RX_AC_tempMultibyte);
 80035c0:	4a14      	ldr	r2, [pc, #80]	; (8003614 <LTTO_IR_RX_AC_NewIRPulseReceived+0xb0>)
 80035c2:	4b12      	ldr	r3, [pc, #72]	; (800360c <LTTO_IR_RX_AC_NewIRPulseReceived+0xa8>)
 80035c4:	0011      	movs	r1, r2
 80035c6:	0018      	movs	r0, r3
 80035c8:	f7ff fd4e 	bl	8003068 <LTTO_IR_CONV_AddSignatureToMultibyte>
 80035cc:	e014      	b.n	80035f8 <LTTO_IR_RX_AC_NewIRPulseReceived+0x94>
        } else if(LTTO_IR_RX_AC_tempSignature.signatureType == LTTO_IR_SIGNATURE_TYPE_MULTIBYTE_CSUM) {
 80035ce:	4b0f      	ldr	r3, [pc, #60]	; (800360c <LTTO_IR_RX_AC_NewIRPulseReceived+0xa8>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b06      	cmp	r3, #6
 80035d4:	d110      	bne.n	80035f8 <LTTO_IR_RX_AC_NewIRPulseReceived+0x94>
            //Multibyte Checksum
            //Add the new signature
            LTTO_IR_CONV_AddSignatureToMultibyte(&LTTO_IR_RX_AC_tempSignature, &LTTO_IR_RX_AC_tempMultibyte);
 80035d6:	4a0f      	ldr	r2, [pc, #60]	; (8003614 <LTTO_IR_RX_AC_NewIRPulseReceived+0xb0>)
 80035d8:	4b0c      	ldr	r3, [pc, #48]	; (800360c <LTTO_IR_RX_AC_NewIRPulseReceived+0xa8>)
 80035da:	0011      	movs	r1, r2
 80035dc:	0018      	movs	r0, r3
 80035de:	f7ff fd43 	bl	8003068 <LTTO_IR_CONV_AddSignatureToMultibyte>
            if(!LTTO_IR_RX_AC_tempMultibyte.valid) {
 80035e2:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <LTTO_IR_RX_AC_NewIRPulseReceived+0xb0>)
 80035e4:	7e1b      	ldrb	r3, [r3, #24]
 80035e6:	2201      	movs	r2, #1
 80035e8:	4053      	eors	r3, r2
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <LTTO_IR_RX_AC_NewIRPulseReceived+0x94>
                //Checksum invalid, toss the packet.
                LTTO_IR_CONV_ClearMultibyte(&LTTO_IR_RX_AC_tempMultibyte);
 80035f0:	4b08      	ldr	r3, [pc, #32]	; (8003614 <LTTO_IR_RX_AC_NewIRPulseReceived+0xb0>)
 80035f2:	0018      	movs	r0, r3
 80035f4:	f7ff fd27 	bl	8003046 <LTTO_IR_CONV_ClearMultibyte>
            }
        }
        //And clear the pulse train, so we don't process this signature again.
        LTTO_IR_RX_finalPulseCount = 0;
 80035f8:	4b03      	ldr	r3, [pc, #12]	; (8003608 <LTTO_IR_RX_AC_NewIRPulseReceived+0xa4>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
    }
}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	46bd      	mov	sp, r7
 8003602:	b002      	add	sp, #8
 8003604:	bd80      	pop	{r7, pc}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	20000034 	.word	0x20000034
 800360c:	20001a58 	.word	0x20001a58
 8003610:	20001a34 	.word	0x20001a34
 8003614:	20001a3c 	.word	0x20001a3c

08003618 <LTTO_IR_RX_AC_NewSingleSignatureReady>:
    destinationRawSignature->data = LTTO_IR_RX_finalSignature.data;
    destinationRawSignature->SFP = LTTO_IR_RX_finalSignature.SFP;
    destinationRawSignature->valid = LTTO_IR_RX_finalSignature.valid;
}

bool LTTO_IR_RX_AC_NewSingleSignatureReady(void) {
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
    return (LTTO_IR_RX_AC_tempSignature.signatureType != LTTO_IR_SIGNATURE_TYPE_UNKNOWN);
 800361c:	4b03      	ldr	r3, [pc, #12]	; (800362c <LTTO_IR_RX_AC_NewSingleSignatureReady+0x14>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	1e5a      	subs	r2, r3, #1
 8003622:	4193      	sbcs	r3, r2
 8003624:	b2db      	uxtb	r3, r3
}
 8003626:	0018      	movs	r0, r3
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	20001a58 	.word	0x20001a58

08003630 <LTTO_IR_RX_AC_GetSingleSignature>:

void LTTO_IR_RX_AC_GetSingleSignature(LTTO_IR_SIGNATURE_t *destinationSignature) {
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
    destinationSignature->data = LTTO_IR_RX_AC_tempSignature.data;
 8003638:	4b05      	ldr	r3, [pc, #20]	; (8003650 <LTTO_IR_RX_AC_GetSingleSignature+0x20>)
 800363a:	885a      	ldrh	r2, [r3, #2]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	805a      	strh	r2, [r3, #2]
    destinationSignature->signatureType = LTTO_IR_RX_AC_tempSignature.signatureType;
 8003640:	4b03      	ldr	r3, [pc, #12]	; (8003650 <LTTO_IR_RX_AC_GetSingleSignature+0x20>)
 8003642:	781a      	ldrb	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	701a      	strb	r2, [r3, #0]
}
 8003648:	46c0      	nop			; (mov r8, r8)
 800364a:	46bd      	mov	sp, r7
 800364c:	b002      	add	sp, #8
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20001a58 	.word	0x20001a58

08003654 <LTTO_IR_RX_AC_Clear>:
    for(temp = 0;temp < LTTO_IR_RX_AC_tempMultibyte.dataByteCount;temp++) {
        destinationMultibyte->dataBytes[temp] = LTTO_IR_RX_AC_tempMultibyte.dataBytes[temp];
    }
}

void LTTO_IR_RX_AC_Clear(void) {
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
    //Clear everything
	LTTO_IR_RX_finalSignature.valid = false;
 8003658:	4b06      	ldr	r3, [pc, #24]	; (8003674 <LTTO_IR_RX_AC_Clear+0x20>)
 800365a:	2200      	movs	r2, #0
 800365c:	715a      	strb	r2, [r3, #5]
    LTTO_IR_RX_AC_tempSignature.signatureType = LTTO_IR_SIGNATURE_TYPE_UNKNOWN;
 800365e:	4b06      	ldr	r3, [pc, #24]	; (8003678 <LTTO_IR_RX_AC_Clear+0x24>)
 8003660:	2200      	movs	r2, #0
 8003662:	701a      	strb	r2, [r3, #0]
    LTTO_IR_CONV_ClearMultibyte(&LTTO_IR_RX_AC_tempMultibyte);
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <LTTO_IR_RX_AC_Clear+0x28>)
 8003666:	0018      	movs	r0, r3
 8003668:	f7ff fced 	bl	8003046 <LTTO_IR_CONV_ClearMultibyte>
}
 800366c:	46c0      	nop			; (mov r8, r8)
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	20001a34 	.word	0x20001a34
 8003678:	20001a58 	.word	0x20001a58
 800367c:	20001a3c 	.word	0x20001a3c

08003680 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003686:	f3ef 8305 	mrs	r3, IPSR
 800368a:	60bb      	str	r3, [r7, #8]
  return(result);
 800368c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800368e:	2b00      	cmp	r3, #0
 8003690:	d109      	bne.n	80036a6 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003692:	f3ef 8310 	mrs	r3, PRIMASK
 8003696:	607b      	str	r3, [r7, #4]
  return(result);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d007      	beq.n	80036ae <osKernelInitialize+0x2e>
 800369e:	4b0d      	ldr	r3, [pc, #52]	; (80036d4 <osKernelInitialize+0x54>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d103      	bne.n	80036ae <osKernelInitialize+0x2e>
    stat = osErrorISR;
 80036a6:	2306      	movs	r3, #6
 80036a8:	425b      	negs	r3, r3
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	e00c      	b.n	80036c8 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 80036ae:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <osKernelInitialize+0x54>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d105      	bne.n	80036c2 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80036b6:	4b07      	ldr	r3, [pc, #28]	; (80036d4 <osKernelInitialize+0x54>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	e002      	b.n	80036c8 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 80036c2:	2301      	movs	r3, #1
 80036c4:	425b      	negs	r3, r3
 80036c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80036c8:	68fb      	ldr	r3, [r7, #12]
}
 80036ca:	0018      	movs	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b004      	add	sp, #16
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	20000038 	.word	0x20000038

080036d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036de:	f3ef 8305 	mrs	r3, IPSR
 80036e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80036e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d109      	bne.n	80036fe <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ea:	f3ef 8310 	mrs	r3, PRIMASK
 80036ee:	607b      	str	r3, [r7, #4]
  return(result);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d007      	beq.n	8003706 <osKernelStart+0x2e>
 80036f6:	4b0e      	ldr	r3, [pc, #56]	; (8003730 <osKernelStart+0x58>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d103      	bne.n	8003706 <osKernelStart+0x2e>
    stat = osErrorISR;
 80036fe:	2306      	movs	r3, #6
 8003700:	425b      	negs	r3, r3
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	e00e      	b.n	8003724 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003706:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <osKernelStart+0x58>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d107      	bne.n	800371e <osKernelStart+0x46>
      KernelState = osKernelRunning;
 800370e:	4b08      	ldr	r3, [pc, #32]	; (8003730 <osKernelStart+0x58>)
 8003710:	2202      	movs	r2, #2
 8003712:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003714:	f001 f83c 	bl	8004790 <vTaskStartScheduler>
      stat = osOK;
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	e002      	b.n	8003724 <osKernelStart+0x4c>
    } else {
      stat = osError;
 800371e:	2301      	movs	r3, #1
 8003720:	425b      	negs	r3, r3
 8003722:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003724:	68fb      	ldr	r3, [r7, #12]
}
 8003726:	0018      	movs	r0, r3
 8003728:	46bd      	mov	sp, r7
 800372a:	b004      	add	sp, #16
 800372c:	bd80      	pop	{r7, pc}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	20000038 	.word	0x20000038

08003734 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003734:	b5b0      	push	{r4, r5, r7, lr}
 8003736:	b090      	sub	sp, #64	; 0x40
 8003738:	af04      	add	r7, sp, #16
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003740:	2300      	movs	r3, #0
 8003742:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003744:	f3ef 8305 	mrs	r3, IPSR
 8003748:	61fb      	str	r3, [r7, #28]
  return(result);
 800374a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800374c:	2b00      	cmp	r3, #0
 800374e:	d000      	beq.n	8003752 <osThreadNew+0x1e>
 8003750:	e090      	b.n	8003874 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003752:	f3ef 8310 	mrs	r3, PRIMASK
 8003756:	61bb      	str	r3, [r7, #24]
  return(result);
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d004      	beq.n	8003768 <osThreadNew+0x34>
 800375e:	4b48      	ldr	r3, [pc, #288]	; (8003880 <osThreadNew+0x14c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d100      	bne.n	8003768 <osThreadNew+0x34>
 8003766:	e085      	b.n	8003874 <osThreadNew+0x140>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d100      	bne.n	8003770 <osThreadNew+0x3c>
 800376e:	e081      	b.n	8003874 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8003770:	2380      	movs	r3, #128	; 0x80
 8003772:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003774:	2318      	movs	r3, #24
 8003776:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8003778:	2117      	movs	r1, #23
 800377a:	187b      	adds	r3, r7, r1
 800377c:	2200      	movs	r2, #0
 800377e:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8003780:	187b      	adds	r3, r7, r1
 8003782:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8003784:	2301      	movs	r3, #1
 8003786:	425b      	negs	r3, r3
 8003788:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d044      	beq.n	800381a <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d002      	beq.n	800379e <osThreadNew+0x6a>
        name = attr->name;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d007      	beq.n	80037c2 <osThreadNew+0x8e>
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	2b38      	cmp	r3, #56	; 0x38
 80037b6:	d804      	bhi.n	80037c2 <osThreadNew+0x8e>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	4013      	ands	r3, r2
 80037c0:	d001      	beq.n	80037c6 <osThreadNew+0x92>
        return (NULL);
 80037c2:	2300      	movs	r3, #0
 80037c4:	e057      	b.n	8003876 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	089b      	lsrs	r3, r3, #2
 80037d4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00e      	beq.n	80037fc <osThreadNew+0xc8>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	2b5b      	cmp	r3, #91	; 0x5b
 80037e4:	d90a      	bls.n	80037fc <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d006      	beq.n	80037fc <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <osThreadNew+0xc8>
        mem = 1;
 80037f6:	2301      	movs	r3, #1
 80037f8:	623b      	str	r3, [r7, #32]
 80037fa:	e010      	b.n	800381e <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10c      	bne.n	800381e <osThreadNew+0xea>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d108      	bne.n	800381e <osThreadNew+0xea>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d104      	bne.n	800381e <osThreadNew+0xea>
          mem = 0;
 8003814:	2300      	movs	r3, #0
 8003816:	623b      	str	r3, [r7, #32]
 8003818:	e001      	b.n	800381e <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 800381a:	2300      	movs	r3, #0
 800381c:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d112      	bne.n	800384a <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800382c:	68bd      	ldr	r5, [r7, #8]
 800382e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003830:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	9302      	str	r3, [sp, #8]
 8003836:	9201      	str	r2, [sp, #4]
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	002b      	movs	r3, r5
 800383e:	0022      	movs	r2, r4
 8003840:	f000 fe07 	bl	8004452 <xTaskCreateStatic>
 8003844:	0003      	movs	r3, r0
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	e014      	b.n	8003874 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d111      	bne.n	8003874 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003852:	b29a      	uxth	r2, r3
 8003854:	68bc      	ldr	r4, [r7, #8]
 8003856:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	2310      	movs	r3, #16
 800385c:	18fb      	adds	r3, r7, r3
 800385e:	9301      	str	r3, [sp, #4]
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	0023      	movs	r3, r4
 8003866:	f000 fe37 	bl	80044d8 <xTaskCreate>
 800386a:	0003      	movs	r3, r0
 800386c:	2b01      	cmp	r3, #1
 800386e:	d001      	beq.n	8003874 <osThreadNew+0x140>
          hTask = NULL;
 8003870:	2300      	movs	r3, #0
 8003872:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003874:	693b      	ldr	r3, [r7, #16]
}
 8003876:	0018      	movs	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	b00c      	add	sp, #48	; 0x30
 800387c:	bdb0      	pop	{r4, r5, r7, pc}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	20000038 	.word	0x20000038

08003884 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800388c:	f3ef 8305 	mrs	r3, IPSR
 8003890:	613b      	str	r3, [r7, #16]
  return(result);
 8003892:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003894:	2b00      	cmp	r3, #0
 8003896:	d109      	bne.n	80038ac <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003898:	f3ef 8310 	mrs	r3, PRIMASK
 800389c:	60fb      	str	r3, [r7, #12]
  return(result);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d007      	beq.n	80038b4 <osDelay+0x30>
 80038a4:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <osDelay+0x4c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d103      	bne.n	80038b4 <osDelay+0x30>
    stat = osErrorISR;
 80038ac:	2306      	movs	r3, #6
 80038ae:	425b      	negs	r3, r3
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	e008      	b.n	80038c6 <osDelay+0x42>
  }
  else {
    stat = osOK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <osDelay+0x42>
      vTaskDelay(ticks);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	0018      	movs	r0, r3
 80038c2:	f000 ff3f 	bl	8004744 <vTaskDelay>
    }
  }

  return (stat);
 80038c6:	697b      	ldr	r3, [r7, #20]
}
 80038c8:	0018      	movs	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b006      	add	sp, #24
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20000038 	.word	0x20000038

080038d4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80038d4:	b590      	push	{r4, r7, lr}
 80038d6:	b08d      	sub	sp, #52	; 0x34
 80038d8:	af02      	add	r7, sp, #8
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038e4:	f3ef 8305 	mrs	r3, IPSR
 80038e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80038ea:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d000      	beq.n	80038f2 <osMessageQueueNew+0x1e>
 80038f0:	e070      	b.n	80039d4 <osMessageQueueNew+0x100>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038f2:	f3ef 8310 	mrs	r3, PRIMASK
 80038f6:	617b      	str	r3, [r7, #20]
  return(result);
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d004      	beq.n	8003908 <osMessageQueueNew+0x34>
 80038fe:	4b38      	ldr	r3, [pc, #224]	; (80039e0 <osMessageQueueNew+0x10c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d100      	bne.n	8003908 <osMessageQueueNew+0x34>
 8003906:	e065      	b.n	80039d4 <osMessageQueueNew+0x100>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d100      	bne.n	8003910 <osMessageQueueNew+0x3c>
 800390e:	e061      	b.n	80039d4 <osMessageQueueNew+0x100>
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d05e      	beq.n	80039d4 <osMessageQueueNew+0x100>
    mem = -1;
 8003916:	2301      	movs	r3, #1
 8003918:	425b      	negs	r3, r3
 800391a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d028      	beq.n	8003974 <osMessageQueueNew+0xa0>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d011      	beq.n	800394e <osMessageQueueNew+0x7a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	2b4f      	cmp	r3, #79	; 0x4f
 8003930:	d90d      	bls.n	800394e <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003936:	2b00      	cmp	r3, #0
 8003938:	d009      	beq.n	800394e <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695a      	ldr	r2, [r3, #20]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	68b9      	ldr	r1, [r7, #8]
 8003942:	434b      	muls	r3, r1
 8003944:	429a      	cmp	r2, r3
 8003946:	d302      	bcc.n	800394e <osMessageQueueNew+0x7a>
        mem = 1;
 8003948:	2301      	movs	r3, #1
 800394a:	623b      	str	r3, [r7, #32]
 800394c:	e014      	b.n	8003978 <osMessageQueueNew+0xa4>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d110      	bne.n	8003978 <osMessageQueueNew+0xa4>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10c      	bne.n	8003978 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003962:	2b00      	cmp	r3, #0
 8003964:	d108      	bne.n	8003978 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d104      	bne.n	8003978 <osMessageQueueNew+0xa4>
          mem = 0;
 800396e:	2300      	movs	r3, #0
 8003970:	623b      	str	r3, [r7, #32]
 8003972:	e001      	b.n	8003978 <osMessageQueueNew+0xa4>
        }
      }
    }
    else {
      mem = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d10d      	bne.n	800399a <osMessageQueueNew+0xc6>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689c      	ldr	r4, [r3, #8]
 8003986:	68b9      	ldr	r1, [r7, #8]
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	2300      	movs	r3, #0
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	0023      	movs	r3, r4
 8003990:	f000 f955 	bl	8003c3e <xQueueGenericCreateStatic>
 8003994:	0003      	movs	r3, r0
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
 8003998:	e00a      	b.n	80039b0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d107      	bne.n	80039b0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80039a0:	68b9      	ldr	r1, [r7, #8]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	0018      	movs	r0, r3
 80039a8:	f000 f994 	bl	8003cd4 <xQueueGenericCreate>
 80039ac:	0003      	movs	r3, r0
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00e      	beq.n	80039d4 <osMessageQueueNew+0x100>
      if (attr != NULL) {
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <osMessageQueueNew+0xf0>
        name = attr->name;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	61fb      	str	r3, [r7, #28]
 80039c2:	e001      	b.n	80039c8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80039c8:	69fa      	ldr	r2, [r7, #28]
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	0011      	movs	r1, r2
 80039ce:	0018      	movs	r0, r3
 80039d0:	f000 fce4 	bl	800439c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80039d6:	0018      	movs	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	b00b      	add	sp, #44	; 0x2c
 80039dc:	bd90      	pop	{r4, r7, pc}
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	20000038 	.word	0x20000038

080039e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4a06      	ldr	r2, [pc, #24]	; (8003a0c <vApplicationGetIdleTaskMemory+0x28>)
 80039f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	4a05      	ldr	r2, [pc, #20]	; (8003a10 <vApplicationGetIdleTaskMemory+0x2c>)
 80039fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2280      	movs	r2, #128	; 0x80
 8003a00:	601a      	str	r2, [r3, #0]
}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b004      	add	sp, #16
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	2000003c 	.word	0x2000003c
 8003a10:	20000098 	.word	0x20000098

08003a14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4a06      	ldr	r2, [pc, #24]	; (8003a3c <vApplicationGetTimerTaskMemory+0x28>)
 8003a24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	4a05      	ldr	r2, [pc, #20]	; (8003a40 <vApplicationGetTimerTaskMemory+0x2c>)
 8003a2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2280      	movs	r2, #128	; 0x80
 8003a30:	0052      	lsls	r2, r2, #1
 8003a32:	601a      	str	r2, [r3, #0]
}
 8003a34:	46c0      	nop			; (mov r8, r8)
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b004      	add	sp, #16
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	20000298 	.word	0x20000298
 8003a40:	200002f4 	.word	0x200002f4

08003a44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3308      	adds	r3, #8
 8003a50:	001a      	movs	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	4252      	negs	r2, r2
 8003a5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3308      	adds	r3, #8
 8003a62:	001a      	movs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3308      	adds	r3, #8
 8003a6c:	001a      	movs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a78:	46c0      	nop			; (mov r8, r8)
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b002      	add	sp, #8
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	46bd      	mov	sp, r7
 8003a92:	b002      	add	sp, #8
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b084      	sub	sp, #16
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	601a      	str	r2, [r3, #0]
}
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	b004      	add	sp, #16
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b084      	sub	sp, #16
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	3301      	adds	r3, #1
 8003aee:	d103      	bne.n	8003af8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	e00c      	b.n	8003b12 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3308      	adds	r3, #8
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	e002      	b.n	8003b06 <vListInsert+0x2c>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d2f6      	bcs.n	8003b00 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	601a      	str	r2, [r3, #0]
}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b004      	add	sp, #16
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b084      	sub	sp, #16
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6892      	ldr	r2, [r2, #8]
 8003b5c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6852      	ldr	r2, [r2, #4]
 8003b66:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d103      	bne.n	8003b7a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	1e5a      	subs	r2, r3, #1
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
}
 8003b8e:	0018      	movs	r0, r3
 8003b90:	46bd      	mov	sp, r7
 8003b92:	b004      	add	sp, #16
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b084      	sub	sp, #16
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <xQueueGenericReset+0x18>
 8003baa:	b672      	cpsid	i
 8003bac:	e7fe      	b.n	8003bac <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8003bae:	f001 fe07 	bl	80057c0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	434b      	muls	r3, r1
 8003bc0:	18d2      	adds	r2, r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bdc:	1e59      	subs	r1, r3, #1
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	434b      	muls	r3, r1
 8003be4:	18d2      	adds	r2, r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2244      	movs	r2, #68	; 0x44
 8003bee:	21ff      	movs	r1, #255	; 0xff
 8003bf0:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2245      	movs	r2, #69	; 0x45
 8003bf6:	21ff      	movs	r1, #255	; 0xff
 8003bf8:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10d      	bne.n	8003c1c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d013      	beq.n	8003c30 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	3310      	adds	r3, #16
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f001 f803 	bl	8004c18 <xTaskRemoveFromEventList>
 8003c12:	1e03      	subs	r3, r0, #0
 8003c14:	d00c      	beq.n	8003c30 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c16:	f001 fdc3 	bl	80057a0 <vPortYield>
 8003c1a:	e009      	b.n	8003c30 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3310      	adds	r3, #16
 8003c20:	0018      	movs	r0, r3
 8003c22:	f7ff ff0f 	bl	8003a44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	3324      	adds	r3, #36	; 0x24
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f7ff ff0a 	bl	8003a44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c30:	f001 fdd8 	bl	80057e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c34:	2301      	movs	r3, #1
}
 8003c36:	0018      	movs	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b004      	add	sp, #16
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c3e:	b590      	push	{r4, r7, lr}
 8003c40:	b089      	sub	sp, #36	; 0x24
 8003c42:	af02      	add	r7, sp, #8
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	607a      	str	r2, [r7, #4]
 8003c4a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <xQueueGenericCreateStatic+0x18>
 8003c52:	b672      	cpsid	i
 8003c54:	e7fe      	b.n	8003c54 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <xQueueGenericCreateStatic+0x22>
 8003c5c:	b672      	cpsid	i
 8003c5e:	e7fe      	b.n	8003c5e <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <xQueueGenericCreateStatic+0x2e>
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <xQueueGenericCreateStatic+0x32>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <xQueueGenericCreateStatic+0x34>
 8003c70:	2300      	movs	r3, #0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <xQueueGenericCreateStatic+0x3c>
 8003c76:	b672      	cpsid	i
 8003c78:	e7fe      	b.n	8003c78 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d102      	bne.n	8003c86 <xQueueGenericCreateStatic+0x48>
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <xQueueGenericCreateStatic+0x4c>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <xQueueGenericCreateStatic+0x4e>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <xQueueGenericCreateStatic+0x56>
 8003c90:	b672      	cpsid	i
 8003c92:	e7fe      	b.n	8003c92 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003c94:	2350      	movs	r3, #80	; 0x50
 8003c96:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	2b50      	cmp	r3, #80	; 0x50
 8003c9c:	d001      	beq.n	8003ca2 <xQueueGenericCreateStatic+0x64>
 8003c9e:	b672      	cpsid	i
 8003ca0:	e7fe      	b.n	8003ca0 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00e      	beq.n	8003cca <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2246      	movs	r2, #70	; 0x46
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003cb4:	2328      	movs	r3, #40	; 0x28
 8003cb6:	18fb      	adds	r3, r7, r3
 8003cb8:	781c      	ldrb	r4, [r3, #0]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	68b9      	ldr	r1, [r7, #8]
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	0023      	movs	r3, r4
 8003cc6:	f000 f83b 	bl	8003d40 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003cca:	697b      	ldr	r3, [r7, #20]
	}
 8003ccc:	0018      	movs	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	b007      	add	sp, #28
 8003cd2:	bd90      	pop	{r4, r7, pc}

08003cd4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003cd4:	b590      	push	{r4, r7, lr}
 8003cd6:	b08b      	sub	sp, #44	; 0x2c
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	1dfb      	adds	r3, r7, #7
 8003ce0:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <xQueueGenericCreate+0x18>
 8003ce8:	b672      	cpsid	i
 8003cea:	e7fe      	b.n	8003cea <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d102      	bne.n	8003cf8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
 8003cf6:	e003      	b.n	8003d00 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	4353      	muls	r3, r2
 8003cfe:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	3350      	adds	r3, #80	; 0x50
 8003d04:	0018      	movs	r0, r3
 8003d06:	f001 fdf3 	bl	80058f0 <pvPortMalloc>
 8003d0a:	0003      	movs	r3, r0
 8003d0c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d010      	beq.n	8003d36 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	3350      	adds	r3, #80	; 0x50
 8003d18:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	2246      	movs	r2, #70	; 0x46
 8003d1e:	2100      	movs	r1, #0
 8003d20:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d22:	1dfb      	adds	r3, r7, #7
 8003d24:	781c      	ldrb	r4, [r3, #0]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	0023      	movs	r3, r4
 8003d32:	f000 f805 	bl	8003d40 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003d36:	69bb      	ldr	r3, [r7, #24]
	}
 8003d38:	0018      	movs	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	b009      	add	sp, #36	; 0x24
 8003d3e:	bd90      	pop	{r4, r7, pc}

08003d40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
 8003d4c:	001a      	movs	r2, r3
 8003d4e:	1cfb      	adds	r3, r7, #3
 8003d50:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d103      	bne.n	8003d60 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	e002      	b.n	8003d66 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	2101      	movs	r1, #1
 8003d76:	0018      	movs	r0, r3
 8003d78:	f7ff ff0d 	bl	8003b96 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	1cfa      	adds	r2, r7, #3
 8003d80:	214c      	movs	r1, #76	; 0x4c
 8003d82:	7812      	ldrb	r2, [r2, #0]
 8003d84:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	b004      	add	sp, #16
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b08a      	sub	sp, #40	; 0x28
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	60f8      	str	r0, [r7, #12]
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	607a      	str	r2, [r7, #4]
 8003d9a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <xQueueGenericSend+0x20>
 8003daa:	b672      	cpsid	i
 8003dac:	e7fe      	b.n	8003dac <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d103      	bne.n	8003dbc <xQueueGenericSend+0x2e>
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <xQueueGenericSend+0x32>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <xQueueGenericSend+0x34>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <xQueueGenericSend+0x3c>
 8003dc6:	b672      	cpsid	i
 8003dc8:	e7fe      	b.n	8003dc8 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d103      	bne.n	8003dd8 <xQueueGenericSend+0x4a>
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <xQueueGenericSend+0x4e>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <xQueueGenericSend+0x50>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <xQueueGenericSend+0x58>
 8003de2:	b672      	cpsid	i
 8003de4:	e7fe      	b.n	8003de4 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003de6:	f001 f8af 	bl	8004f48 <xTaskGetSchedulerState>
 8003dea:	1e03      	subs	r3, r0, #0
 8003dec:	d102      	bne.n	8003df4 <xQueueGenericSend+0x66>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <xQueueGenericSend+0x6a>
 8003df4:	2301      	movs	r3, #1
 8003df6:	e000      	b.n	8003dfa <xQueueGenericSend+0x6c>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <xQueueGenericSend+0x74>
 8003dfe:	b672      	cpsid	i
 8003e00:	e7fe      	b.n	8003e00 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e02:	f001 fcdd 	bl	80057c0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d302      	bcc.n	8003e18 <xQueueGenericSend+0x8a>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d11e      	bne.n	8003e56 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	68b9      	ldr	r1, [r7, #8]
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	0018      	movs	r0, r3
 8003e20:	f000 f99f 	bl	8004162 <prvCopyDataToQueue>
 8003e24:	0003      	movs	r3, r0
 8003e26:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d009      	beq.n	8003e44 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	3324      	adds	r3, #36	; 0x24
 8003e34:	0018      	movs	r0, r3
 8003e36:	f000 feef 	bl	8004c18 <xTaskRemoveFromEventList>
 8003e3a:	1e03      	subs	r3, r0, #0
 8003e3c:	d007      	beq.n	8003e4e <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e3e:	f001 fcaf 	bl	80057a0 <vPortYield>
 8003e42:	e004      	b.n	8003e4e <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e4a:	f001 fca9 	bl	80057a0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003e4e:	f001 fcc9 	bl	80057e4 <vPortExitCritical>
				return pdPASS;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e05b      	b.n	8003f0e <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d103      	bne.n	8003e64 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e5c:	f001 fcc2 	bl	80057e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e60:	2300      	movs	r3, #0
 8003e62:	e054      	b.n	8003f0e <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e6a:	2314      	movs	r3, #20
 8003e6c:	18fb      	adds	r3, r7, r3
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f000 ff2e 	bl	8004cd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e74:	2301      	movs	r3, #1
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e78:	f001 fcb4 	bl	80057e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e7c:	f000 fcdc 	bl	8004838 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e80:	f001 fc9e 	bl	80057c0 <vPortEnterCritical>
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	2244      	movs	r2, #68	; 0x44
 8003e88:	5c9b      	ldrb	r3, [r3, r2]
 8003e8a:	b25b      	sxtb	r3, r3
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	d103      	bne.n	8003e98 <xQueueGenericSend+0x10a>
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	2244      	movs	r2, #68	; 0x44
 8003e94:	2100      	movs	r1, #0
 8003e96:	5499      	strb	r1, [r3, r2]
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	2245      	movs	r2, #69	; 0x45
 8003e9c:	5c9b      	ldrb	r3, [r3, r2]
 8003e9e:	b25b      	sxtb	r3, r3
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	d103      	bne.n	8003eac <xQueueGenericSend+0x11e>
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	2245      	movs	r2, #69	; 0x45
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	5499      	strb	r1, [r3, r2]
 8003eac:	f001 fc9a 	bl	80057e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003eb0:	1d3a      	adds	r2, r7, #4
 8003eb2:	2314      	movs	r3, #20
 8003eb4:	18fb      	adds	r3, r7, r3
 8003eb6:	0011      	movs	r1, r2
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f000 ff1d 	bl	8004cf8 <xTaskCheckForTimeOut>
 8003ebe:	1e03      	subs	r3, r0, #0
 8003ec0:	d11e      	bne.n	8003f00 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f000 fa51 	bl	800436c <prvIsQueueFull>
 8003eca:	1e03      	subs	r3, r0, #0
 8003ecc:	d011      	beq.n	8003ef2 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	3310      	adds	r3, #16
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	0011      	movs	r1, r2
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f000 fe5a 	bl	8004b90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f000 f9d0 	bl	8004284 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003ee4:	f000 fcb4 	bl	8004850 <xTaskResumeAll>
 8003ee8:	1e03      	subs	r3, r0, #0
 8003eea:	d18a      	bne.n	8003e02 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8003eec:	f001 fc58 	bl	80057a0 <vPortYield>
 8003ef0:	e787      	b.n	8003e02 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f000 f9c5 	bl	8004284 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003efa:	f000 fca9 	bl	8004850 <xTaskResumeAll>
 8003efe:	e780      	b.n	8003e02 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	0018      	movs	r0, r3
 8003f04:	f000 f9be 	bl	8004284 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f08:	f000 fca2 	bl	8004850 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f0c:	2300      	movs	r3, #0
		}
	}
}
 8003f0e:	0018      	movs	r0, r3
 8003f10:	46bd      	mov	sp, r7
 8003f12:	b00a      	add	sp, #40	; 0x28
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f16:	b590      	push	{r4, r7, lr}
 8003f18:	b089      	sub	sp, #36	; 0x24
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	60f8      	str	r0, [r7, #12]
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	607a      	str	r2, [r7, #4]
 8003f22:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <xQueueGenericSendFromISR+0x1c>
 8003f2e:	b672      	cpsid	i
 8003f30:	e7fe      	b.n	8003f30 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d103      	bne.n	8003f40 <xQueueGenericSendFromISR+0x2a>
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <xQueueGenericSendFromISR+0x2e>
 8003f40:	2301      	movs	r3, #1
 8003f42:	e000      	b.n	8003f46 <xQueueGenericSendFromISR+0x30>
 8003f44:	2300      	movs	r3, #0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <xQueueGenericSendFromISR+0x38>
 8003f4a:	b672      	cpsid	i
 8003f4c:	e7fe      	b.n	8003f4c <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d103      	bne.n	8003f5c <xQueueGenericSendFromISR+0x46>
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <xQueueGenericSendFromISR+0x4a>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e000      	b.n	8003f62 <xQueueGenericSendFromISR+0x4c>
 8003f60:	2300      	movs	r3, #0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <xQueueGenericSendFromISR+0x54>
 8003f66:	b672      	cpsid	i
 8003f68:	e7fe      	b.n	8003f68 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f6a:	f001 fc53 	bl	8005814 <ulSetInterruptMaskFromISR>
 8003f6e:	0003      	movs	r3, r0
 8003f70:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d302      	bcc.n	8003f84 <xQueueGenericSendFromISR+0x6e>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d12e      	bne.n	8003fe2 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f84:	2413      	movs	r4, #19
 8003f86:	193b      	adds	r3, r7, r4
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	2145      	movs	r1, #69	; 0x45
 8003f8c:	5c52      	ldrb	r2, [r2, r1]
 8003f8e:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	0018      	movs	r0, r3
 8003f98:	f000 f8e3 	bl	8004162 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f9c:	193b      	adds	r3, r7, r4
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	b25b      	sxtb	r3, r3
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	d111      	bne.n	8003fca <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d016      	beq.n	8003fdc <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	3324      	adds	r3, #36	; 0x24
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f000 fe30 	bl	8004c18 <xTaskRemoveFromEventList>
 8003fb8:	1e03      	subs	r3, r0, #0
 8003fba:	d00f      	beq.n	8003fdc <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00c      	beq.n	8003fdc <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	e008      	b.n	8003fdc <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003fca:	2313      	movs	r3, #19
 8003fcc:	18fb      	adds	r3, r7, r3
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	b259      	sxtb	r1, r3
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	2245      	movs	r2, #69	; 0x45
 8003fda:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	61fb      	str	r3, [r7, #28]
		{
 8003fe0:	e001      	b.n	8003fe6 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f001 fc19 	bl	8005820 <vClearInterruptMaskFromISR>

	return xReturn;
 8003fee:	69fb      	ldr	r3, [r7, #28]
}
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b009      	add	sp, #36	; 0x24
 8003ff6:	bd90      	pop	{r4, r7, pc}

08003ff8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b08a      	sub	sp, #40	; 0x28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004004:	2300      	movs	r3, #0
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <xQueueReceive+0x1e>
 8004012:	b672      	cpsid	i
 8004014:	e7fe      	b.n	8004014 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d103      	bne.n	8004024 <xQueueReceive+0x2c>
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <xQueueReceive+0x30>
 8004024:	2301      	movs	r3, #1
 8004026:	e000      	b.n	800402a <xQueueReceive+0x32>
 8004028:	2300      	movs	r3, #0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <xQueueReceive+0x3a>
 800402e:	b672      	cpsid	i
 8004030:	e7fe      	b.n	8004030 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004032:	f000 ff89 	bl	8004f48 <xTaskGetSchedulerState>
 8004036:	1e03      	subs	r3, r0, #0
 8004038:	d102      	bne.n	8004040 <xQueueReceive+0x48>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <xQueueReceive+0x4c>
 8004040:	2301      	movs	r3, #1
 8004042:	e000      	b.n	8004046 <xQueueReceive+0x4e>
 8004044:	2300      	movs	r3, #0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <xQueueReceive+0x56>
 800404a:	b672      	cpsid	i
 800404c:	e7fe      	b.n	800404c <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800404e:	f001 fbb7 	bl	80057c0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004056:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d01a      	beq.n	8004094 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	6a3b      	ldr	r3, [r7, #32]
 8004062:	0011      	movs	r1, r2
 8004064:	0018      	movs	r0, r3
 8004066:	f000 f8e7 	bl	8004238 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	1e5a      	subs	r2, r3, #1
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d008      	beq.n	800408c <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	3310      	adds	r3, #16
 800407e:	0018      	movs	r0, r3
 8004080:	f000 fdca 	bl	8004c18 <xTaskRemoveFromEventList>
 8004084:	1e03      	subs	r3, r0, #0
 8004086:	d001      	beq.n	800408c <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004088:	f001 fb8a 	bl	80057a0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800408c:	f001 fbaa 	bl	80057e4 <vPortExitCritical>
				return pdPASS;
 8004090:	2301      	movs	r3, #1
 8004092:	e062      	b.n	800415a <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d103      	bne.n	80040a2 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800409a:	f001 fba3 	bl	80057e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800409e:	2300      	movs	r3, #0
 80040a0:	e05b      	b.n	800415a <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d106      	bne.n	80040b6 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040a8:	2314      	movs	r3, #20
 80040aa:	18fb      	adds	r3, r7, r3
 80040ac:	0018      	movs	r0, r3
 80040ae:	f000 fe0f 	bl	8004cd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040b2:	2301      	movs	r3, #1
 80040b4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040b6:	f001 fb95 	bl	80057e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040ba:	f000 fbbd 	bl	8004838 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040be:	f001 fb7f 	bl	80057c0 <vPortEnterCritical>
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	2244      	movs	r2, #68	; 0x44
 80040c6:	5c9b      	ldrb	r3, [r3, r2]
 80040c8:	b25b      	sxtb	r3, r3
 80040ca:	3301      	adds	r3, #1
 80040cc:	d103      	bne.n	80040d6 <xQueueReceive+0xde>
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	2244      	movs	r2, #68	; 0x44
 80040d2:	2100      	movs	r1, #0
 80040d4:	5499      	strb	r1, [r3, r2]
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	2245      	movs	r2, #69	; 0x45
 80040da:	5c9b      	ldrb	r3, [r3, r2]
 80040dc:	b25b      	sxtb	r3, r3
 80040de:	3301      	adds	r3, #1
 80040e0:	d103      	bne.n	80040ea <xQueueReceive+0xf2>
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	2245      	movs	r2, #69	; 0x45
 80040e6:	2100      	movs	r1, #0
 80040e8:	5499      	strb	r1, [r3, r2]
 80040ea:	f001 fb7b 	bl	80057e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040ee:	1d3a      	adds	r2, r7, #4
 80040f0:	2314      	movs	r3, #20
 80040f2:	18fb      	adds	r3, r7, r3
 80040f4:	0011      	movs	r1, r2
 80040f6:	0018      	movs	r0, r3
 80040f8:	f000 fdfe 	bl	8004cf8 <xTaskCheckForTimeOut>
 80040fc:	1e03      	subs	r3, r0, #0
 80040fe:	d11e      	bne.n	800413e <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	0018      	movs	r0, r3
 8004104:	f000 f91c 	bl	8004340 <prvIsQueueEmpty>
 8004108:	1e03      	subs	r3, r0, #0
 800410a:	d011      	beq.n	8004130 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	3324      	adds	r3, #36	; 0x24
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	0011      	movs	r1, r2
 8004114:	0018      	movs	r0, r3
 8004116:	f000 fd3b 	bl	8004b90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	0018      	movs	r0, r3
 800411e:	f000 f8b1 	bl	8004284 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004122:	f000 fb95 	bl	8004850 <xTaskResumeAll>
 8004126:	1e03      	subs	r3, r0, #0
 8004128:	d191      	bne.n	800404e <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800412a:	f001 fb39 	bl	80057a0 <vPortYield>
 800412e:	e78e      	b.n	800404e <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	0018      	movs	r0, r3
 8004134:	f000 f8a6 	bl	8004284 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004138:	f000 fb8a 	bl	8004850 <xTaskResumeAll>
 800413c:	e787      	b.n	800404e <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	0018      	movs	r0, r3
 8004142:	f000 f89f 	bl	8004284 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004146:	f000 fb83 	bl	8004850 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	0018      	movs	r0, r3
 800414e:	f000 f8f7 	bl	8004340 <prvIsQueueEmpty>
 8004152:	1e03      	subs	r3, r0, #0
 8004154:	d100      	bne.n	8004158 <xQueueReceive+0x160>
 8004156:	e77a      	b.n	800404e <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004158:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800415a:	0018      	movs	r0, r3
 800415c:	46bd      	mov	sp, r7
 800415e:	b00a      	add	sp, #40	; 0x28
 8004160:	bd80      	pop	{r7, pc}

08004162 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b086      	sub	sp, #24
 8004166:	af00      	add	r7, sp, #0
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004176:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10e      	bne.n	800419e <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d14e      	bne.n	8004226 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	0018      	movs	r0, r3
 800418e:	f000 fef7 	bl	8004f80 <xTaskPriorityDisinherit>
 8004192:	0003      	movs	r3, r0
 8004194:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	605a      	str	r2, [r3, #4]
 800419c:	e043      	b.n	8004226 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d119      	bne.n	80041d8 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6898      	ldr	r0, [r3, #8]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	0019      	movs	r1, r3
 80041b0:	f001 fd68 	bl	8005c84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	18d2      	adds	r2, r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d32b      	bcc.n	8004226 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	609a      	str	r2, [r3, #8]
 80041d6:	e026      	b.n	8004226 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	68d8      	ldr	r0, [r3, #12]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	0019      	movs	r1, r3
 80041e4:	f001 fd4e 	bl	8005c84 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	425b      	negs	r3, r3
 80041f2:	18d2      	adds	r2, r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d207      	bcs.n	8004214 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	425b      	negs	r3, r3
 800420e:	18d2      	adds	r2, r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b02      	cmp	r3, #2
 8004218:	d105      	bne.n	8004226 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	3b01      	subs	r3, #1
 8004224:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800422e:	697b      	ldr	r3, [r7, #20]
}
 8004230:	0018      	movs	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	b006      	add	sp, #24
 8004236:	bd80      	pop	{r7, pc}

08004238 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	2b00      	cmp	r3, #0
 8004248:	d018      	beq.n	800427c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	18d2      	adds	r2, r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	429a      	cmp	r2, r3
 8004262:	d303      	bcc.n	800426c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68d9      	ldr	r1, [r3, #12]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	0018      	movs	r0, r3
 8004278:	f001 fd04 	bl	8005c84 <memcpy>
	}
}
 800427c:	46c0      	nop			; (mov r8, r8)
 800427e:	46bd      	mov	sp, r7
 8004280:	b002      	add	sp, #8
 8004282:	bd80      	pop	{r7, pc}

08004284 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800428c:	f001 fa98 	bl	80057c0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004290:	230f      	movs	r3, #15
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	2145      	movs	r1, #69	; 0x45
 8004298:	5c52      	ldrb	r2, [r2, r1]
 800429a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800429c:	e013      	b.n	80042c6 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d016      	beq.n	80042d4 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3324      	adds	r3, #36	; 0x24
 80042aa:	0018      	movs	r0, r3
 80042ac:	f000 fcb4 	bl	8004c18 <xTaskRemoveFromEventList>
 80042b0:	1e03      	subs	r3, r0, #0
 80042b2:	d001      	beq.n	80042b8 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80042b4:	f000 fd70 	bl	8004d98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80042b8:	210f      	movs	r1, #15
 80042ba:	187b      	adds	r3, r7, r1
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	3b01      	subs	r3, #1
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	187b      	adds	r3, r7, r1
 80042c4:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042c6:	230f      	movs	r3, #15
 80042c8:	18fb      	adds	r3, r7, r3
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	b25b      	sxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	dce5      	bgt.n	800429e <prvUnlockQueue+0x1a>
 80042d2:	e000      	b.n	80042d6 <prvUnlockQueue+0x52>
					break;
 80042d4:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2245      	movs	r2, #69	; 0x45
 80042da:	21ff      	movs	r1, #255	; 0xff
 80042dc:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80042de:	f001 fa81 	bl	80057e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80042e2:	f001 fa6d 	bl	80057c0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80042e6:	230e      	movs	r3, #14
 80042e8:	18fb      	adds	r3, r7, r3
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	2144      	movs	r1, #68	; 0x44
 80042ee:	5c52      	ldrb	r2, [r2, r1]
 80042f0:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042f2:	e013      	b.n	800431c <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d016      	beq.n	800432a <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3310      	adds	r3, #16
 8004300:	0018      	movs	r0, r3
 8004302:	f000 fc89 	bl	8004c18 <xTaskRemoveFromEventList>
 8004306:	1e03      	subs	r3, r0, #0
 8004308:	d001      	beq.n	800430e <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800430a:	f000 fd45 	bl	8004d98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800430e:	210e      	movs	r1, #14
 8004310:	187b      	adds	r3, r7, r1
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	3b01      	subs	r3, #1
 8004316:	b2da      	uxtb	r2, r3
 8004318:	187b      	adds	r3, r7, r1
 800431a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800431c:	230e      	movs	r3, #14
 800431e:	18fb      	adds	r3, r7, r3
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	b25b      	sxtb	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	dce5      	bgt.n	80042f4 <prvUnlockQueue+0x70>
 8004328:	e000      	b.n	800432c <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800432a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2244      	movs	r2, #68	; 0x44
 8004330:	21ff      	movs	r1, #255	; 0xff
 8004332:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004334:	f001 fa56 	bl	80057e4 <vPortExitCritical>
}
 8004338:	46c0      	nop			; (mov r8, r8)
 800433a:	46bd      	mov	sp, r7
 800433c:	b004      	add	sp, #16
 800433e:	bd80      	pop	{r7, pc}

08004340 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004348:	f001 fa3a 	bl	80057c0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	2b00      	cmp	r3, #0
 8004352:	d102      	bne.n	800435a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004354:	2301      	movs	r3, #1
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	e001      	b.n	800435e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800435a:	2300      	movs	r3, #0
 800435c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800435e:	f001 fa41 	bl	80057e4 <vPortExitCritical>

	return xReturn;
 8004362:	68fb      	ldr	r3, [r7, #12]
}
 8004364:	0018      	movs	r0, r3
 8004366:	46bd      	mov	sp, r7
 8004368:	b004      	add	sp, #16
 800436a:	bd80      	pop	{r7, pc}

0800436c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004374:	f001 fa24 	bl	80057c0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004380:	429a      	cmp	r2, r3
 8004382:	d102      	bne.n	800438a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004384:	2301      	movs	r3, #1
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	e001      	b.n	800438e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800438e:	f001 fa29 	bl	80057e4 <vPortExitCritical>

	return xReturn;
 8004392:	68fb      	ldr	r3, [r7, #12]
}
 8004394:	0018      	movs	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	b004      	add	sp, #16
 800439a:	bd80      	pop	{r7, pc}

0800439c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	e015      	b.n	80043d8 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80043ac:	4b0e      	ldr	r3, [pc, #56]	; (80043e8 <vQueueAddToRegistry+0x4c>)
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	00d2      	lsls	r2, r2, #3
 80043b2:	58d3      	ldr	r3, [r2, r3]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10c      	bne.n	80043d2 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80043b8:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <vQueueAddToRegistry+0x4c>)
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	00d2      	lsls	r2, r2, #3
 80043be:	6839      	ldr	r1, [r7, #0]
 80043c0:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80043c2:	4a09      	ldr	r2, [pc, #36]	; (80043e8 <vQueueAddToRegistry+0x4c>)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	18d3      	adds	r3, r2, r3
 80043ca:	3304      	adds	r3, #4
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80043d0:	e005      	b.n	80043de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3301      	adds	r3, #1
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b07      	cmp	r3, #7
 80043dc:	d9e6      	bls.n	80043ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	46bd      	mov	sp, r7
 80043e2:	b004      	add	sp, #16
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	20001a5c 	.word	0x20001a5c

080043ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80043fc:	f001 f9e0 	bl	80057c0 <vPortEnterCritical>
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	2244      	movs	r2, #68	; 0x44
 8004404:	5c9b      	ldrb	r3, [r3, r2]
 8004406:	b25b      	sxtb	r3, r3
 8004408:	3301      	adds	r3, #1
 800440a:	d103      	bne.n	8004414 <vQueueWaitForMessageRestricted+0x28>
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	2244      	movs	r2, #68	; 0x44
 8004410:	2100      	movs	r1, #0
 8004412:	5499      	strb	r1, [r3, r2]
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	2245      	movs	r2, #69	; 0x45
 8004418:	5c9b      	ldrb	r3, [r3, r2]
 800441a:	b25b      	sxtb	r3, r3
 800441c:	3301      	adds	r3, #1
 800441e:	d103      	bne.n	8004428 <vQueueWaitForMessageRestricted+0x3c>
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	2245      	movs	r2, #69	; 0x45
 8004424:	2100      	movs	r1, #0
 8004426:	5499      	strb	r1, [r3, r2]
 8004428:	f001 f9dc 	bl	80057e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004430:	2b00      	cmp	r3, #0
 8004432:	d106      	bne.n	8004442 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	3324      	adds	r3, #36	; 0x24
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	68b9      	ldr	r1, [r7, #8]
 800443c:	0018      	movs	r0, r3
 800443e:	f000 fbc5 	bl	8004bcc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	0018      	movs	r0, r3
 8004446:	f7ff ff1d 	bl	8004284 <prvUnlockQueue>
	}
 800444a:	46c0      	nop			; (mov r8, r8)
 800444c:	46bd      	mov	sp, r7
 800444e:	b006      	add	sp, #24
 8004450:	bd80      	pop	{r7, pc}

08004452 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004452:	b590      	push	{r4, r7, lr}
 8004454:	b08d      	sub	sp, #52	; 0x34
 8004456:	af04      	add	r7, sp, #16
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	607a      	str	r2, [r7, #4]
 800445e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <xTaskCreateStatic+0x18>
 8004466:	b672      	cpsid	i
 8004468:	e7fe      	b.n	8004468 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800446a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <xTaskCreateStatic+0x22>
 8004470:	b672      	cpsid	i
 8004472:	e7fe      	b.n	8004472 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004474:	235c      	movs	r3, #92	; 0x5c
 8004476:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	2b5c      	cmp	r3, #92	; 0x5c
 800447c:	d001      	beq.n	8004482 <xTaskCreateStatic+0x30>
 800447e:	b672      	cpsid	i
 8004480:	e7fe      	b.n	8004480 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004484:	2b00      	cmp	r3, #0
 8004486:	d020      	beq.n	80044ca <xTaskCreateStatic+0x78>
 8004488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448a:	2b00      	cmp	r3, #0
 800448c:	d01d      	beq.n	80044ca <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800448e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004490:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004496:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	2259      	movs	r2, #89	; 0x59
 800449c:	2102      	movs	r1, #2
 800449e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80044a0:	683c      	ldr	r4, [r7, #0]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	2300      	movs	r3, #0
 80044aa:	9303      	str	r3, [sp, #12]
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	9302      	str	r3, [sp, #8]
 80044b0:	2318      	movs	r3, #24
 80044b2:	18fb      	adds	r3, r7, r3
 80044b4:	9301      	str	r3, [sp, #4]
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	0023      	movs	r3, r4
 80044bc:	f000 f858 	bl	8004570 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	0018      	movs	r0, r3
 80044c4:	f000 f8d6 	bl	8004674 <prvAddNewTaskToReadyList>
 80044c8:	e001      	b.n	80044ce <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 80044ca:	2300      	movs	r3, #0
 80044cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044ce:	69bb      	ldr	r3, [r7, #24]
	}
 80044d0:	0018      	movs	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	b009      	add	sp, #36	; 0x24
 80044d6:	bd90      	pop	{r4, r7, pc}

080044d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80044d8:	b590      	push	{r4, r7, lr}
 80044da:	b08d      	sub	sp, #52	; 0x34
 80044dc:	af04      	add	r7, sp, #16
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	603b      	str	r3, [r7, #0]
 80044e4:	1dbb      	adds	r3, r7, #6
 80044e6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044e8:	1dbb      	adds	r3, r7, #6
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	0018      	movs	r0, r3
 80044f0:	f001 f9fe 	bl	80058f0 <pvPortMalloc>
 80044f4:	0003      	movs	r3, r0
 80044f6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d010      	beq.n	8004520 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80044fe:	205c      	movs	r0, #92	; 0x5c
 8004500:	f001 f9f6 	bl	80058f0 <pvPortMalloc>
 8004504:	0003      	movs	r3, r0
 8004506:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
 8004514:	e006      	b.n	8004524 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	0018      	movs	r0, r3
 800451a:	f001 fa8f 	bl	8005a3c <vPortFree>
 800451e:	e001      	b.n	8004524 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004520:	2300      	movs	r3, #0
 8004522:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d01a      	beq.n	8004560 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	2259      	movs	r2, #89	; 0x59
 800452e:	2100      	movs	r1, #0
 8004530:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004532:	1dbb      	adds	r3, r7, #6
 8004534:	881a      	ldrh	r2, [r3, #0]
 8004536:	683c      	ldr	r4, [r7, #0]
 8004538:	68b9      	ldr	r1, [r7, #8]
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	2300      	movs	r3, #0
 800453e:	9303      	str	r3, [sp, #12]
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	9302      	str	r3, [sp, #8]
 8004544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004546:	9301      	str	r3, [sp, #4]
 8004548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	0023      	movs	r3, r4
 800454e:	f000 f80f 	bl	8004570 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	0018      	movs	r0, r3
 8004556:	f000 f88d 	bl	8004674 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800455a:	2301      	movs	r3, #1
 800455c:	61bb      	str	r3, [r7, #24]
 800455e:	e002      	b.n	8004566 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004560:	2301      	movs	r3, #1
 8004562:	425b      	negs	r3, r3
 8004564:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004566:	69bb      	ldr	r3, [r7, #24]
	}
 8004568:	0018      	movs	r0, r3
 800456a:	46bd      	mov	sp, r7
 800456c:	b009      	add	sp, #36	; 0x24
 800456e:	bd90      	pop	{r4, r7, pc}

08004570 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004580:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	001a      	movs	r2, r3
 8004588:	21a5      	movs	r1, #165	; 0xa5
 800458a:	f001 fb84 	bl	8005c96 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800458e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4936      	ldr	r1, [pc, #216]	; (8004670 <prvInitialiseNewTask+0x100>)
 8004596:	468c      	mov	ip, r1
 8004598:	4463      	add	r3, ip
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	18d3      	adds	r3, r2, r3
 800459e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	2207      	movs	r2, #7
 80045a4:	4393      	bics	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	2207      	movs	r2, #7
 80045ac:	4013      	ands	r3, r2
 80045ae:	d001      	beq.n	80045b4 <prvInitialiseNewTask+0x44>
 80045b0:	b672      	cpsid	i
 80045b2:	e7fe      	b.n	80045b2 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045b4:	2300      	movs	r3, #0
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	e013      	b.n	80045e2 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	18d3      	adds	r3, r2, r3
 80045c0:	7818      	ldrb	r0, [r3, #0]
 80045c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045c4:	2134      	movs	r1, #52	; 0x34
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	18d3      	adds	r3, r2, r3
 80045ca:	185b      	adds	r3, r3, r1
 80045cc:	1c02      	adds	r2, r0, #0
 80045ce:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	18d3      	adds	r3, r2, r3
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d006      	beq.n	80045ea <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	3301      	adds	r3, #1
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b0f      	cmp	r3, #15
 80045e6:	d9e8      	bls.n	80045ba <prvInitialiseNewTask+0x4a>
 80045e8:	e000      	b.n	80045ec <prvInitialiseNewTask+0x7c>
		{
			break;
 80045ea:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80045ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ee:	2243      	movs	r2, #67	; 0x43
 80045f0:	2100      	movs	r1, #0
 80045f2:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	2b37      	cmp	r3, #55	; 0x37
 80045f8:	d901      	bls.n	80045fe <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80045fa:	2337      	movs	r3, #55	; 0x37
 80045fc:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80045fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004600:	6a3a      	ldr	r2, [r7, #32]
 8004602:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004606:	6a3a      	ldr	r2, [r7, #32]
 8004608:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800460a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460c:	2200      	movs	r2, #0
 800460e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004612:	3304      	adds	r3, #4
 8004614:	0018      	movs	r0, r3
 8004616:	f7ff fa33 	bl	8003a80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800461a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461c:	3318      	adds	r3, #24
 800461e:	0018      	movs	r0, r3
 8004620:	f7ff fa2e 	bl	8003a80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004628:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	2238      	movs	r2, #56	; 0x38
 800462e:	1ad2      	subs	r2, r2, r3
 8004630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004632:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004638:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	2200      	movs	r2, #0
 800463e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	2258      	movs	r2, #88	; 0x58
 8004644:	2100      	movs	r1, #0
 8004646:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	68f9      	ldr	r1, [r7, #12]
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	0018      	movs	r0, r3
 8004650:	f001 f81c 	bl	800568c <pxPortInitialiseStack>
 8004654:	0002      	movs	r2, r0
 8004656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004658:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004664:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	46bd      	mov	sp, r7
 800466a:	b006      	add	sp, #24
 800466c:	bd80      	pop	{r7, pc}
 800466e:	46c0      	nop			; (mov r8, r8)
 8004670:	3fffffff 	.word	0x3fffffff

08004674 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800467c:	f001 f8a0 	bl	80057c0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004680:	4b2a      	ldr	r3, [pc, #168]	; (800472c <prvAddNewTaskToReadyList+0xb8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	4b29      	ldr	r3, [pc, #164]	; (800472c <prvAddNewTaskToReadyList+0xb8>)
 8004688:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800468a:	4b29      	ldr	r3, [pc, #164]	; (8004730 <prvAddNewTaskToReadyList+0xbc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d109      	bne.n	80046a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004692:	4b27      	ldr	r3, [pc, #156]	; (8004730 <prvAddNewTaskToReadyList+0xbc>)
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004698:	4b24      	ldr	r3, [pc, #144]	; (800472c <prvAddNewTaskToReadyList+0xb8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d110      	bne.n	80046c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80046a0:	f000 fb94 	bl	8004dcc <prvInitialiseTaskLists>
 80046a4:	e00d      	b.n	80046c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80046a6:	4b23      	ldr	r3, [pc, #140]	; (8004734 <prvAddNewTaskToReadyList+0xc0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d109      	bne.n	80046c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80046ae:	4b20      	ldr	r3, [pc, #128]	; (8004730 <prvAddNewTaskToReadyList+0xbc>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d802      	bhi.n	80046c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80046bc:	4b1c      	ldr	r3, [pc, #112]	; (8004730 <prvAddNewTaskToReadyList+0xbc>)
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80046c2:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <prvAddNewTaskToReadyList+0xc4>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	4b1b      	ldr	r3, [pc, #108]	; (8004738 <prvAddNewTaskToReadyList+0xc4>)
 80046ca:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80046cc:	4b1a      	ldr	r3, [pc, #104]	; (8004738 <prvAddNewTaskToReadyList+0xc4>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d8:	4b18      	ldr	r3, [pc, #96]	; (800473c <prvAddNewTaskToReadyList+0xc8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d903      	bls.n	80046e8 <prvAddNewTaskToReadyList+0x74>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e4:	4b15      	ldr	r3, [pc, #84]	; (800473c <prvAddNewTaskToReadyList+0xc8>)
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ec:	0013      	movs	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	189b      	adds	r3, r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4a12      	ldr	r2, [pc, #72]	; (8004740 <prvAddNewTaskToReadyList+0xcc>)
 80046f6:	189a      	adds	r2, r3, r2
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3304      	adds	r3, #4
 80046fc:	0019      	movs	r1, r3
 80046fe:	0010      	movs	r0, r2
 8004700:	f7ff f9c9 	bl	8003a96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004704:	f001 f86e 	bl	80057e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004708:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <prvAddNewTaskToReadyList+0xc0>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004710:	4b07      	ldr	r3, [pc, #28]	; (8004730 <prvAddNewTaskToReadyList+0xbc>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471a:	429a      	cmp	r2, r3
 800471c:	d201      	bcs.n	8004722 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800471e:	f001 f83f 	bl	80057a0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	46bd      	mov	sp, r7
 8004726:	b002      	add	sp, #8
 8004728:	bd80      	pop	{r7, pc}
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	20000bc8 	.word	0x20000bc8
 8004730:	200006f4 	.word	0x200006f4
 8004734:	20000bd4 	.word	0x20000bd4
 8004738:	20000be4 	.word	0x20000be4
 800473c:	20000bd0 	.word	0x20000bd0
 8004740:	200006f8 	.word	0x200006f8

08004744 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800474c:	2300      	movs	r3, #0
 800474e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d010      	beq.n	8004778 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004756:	4b0d      	ldr	r3, [pc, #52]	; (800478c <vTaskDelay+0x48>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <vTaskDelay+0x1e>
 800475e:	b672      	cpsid	i
 8004760:	e7fe      	b.n	8004760 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8004762:	f000 f869 	bl	8004838 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2100      	movs	r1, #0
 800476a:	0018      	movs	r0, r3
 800476c:	f000 fc64 	bl	8005038 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004770:	f000 f86e 	bl	8004850 <xTaskResumeAll>
 8004774:	0003      	movs	r3, r0
 8004776:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800477e:	f001 f80f 	bl	80057a0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	46bd      	mov	sp, r7
 8004786:	b004      	add	sp, #16
 8004788:	bd80      	pop	{r7, pc}
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	20000bf0 	.word	0x20000bf0

08004790 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004790:	b590      	push	{r4, r7, lr}
 8004792:	b089      	sub	sp, #36	; 0x24
 8004794:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004796:	2300      	movs	r3, #0
 8004798:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800479a:	2300      	movs	r3, #0
 800479c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800479e:	003a      	movs	r2, r7
 80047a0:	1d39      	adds	r1, r7, #4
 80047a2:	2308      	movs	r3, #8
 80047a4:	18fb      	adds	r3, r7, r3
 80047a6:	0018      	movs	r0, r3
 80047a8:	f7ff f91c 	bl	80039e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80047ac:	683c      	ldr	r4, [r7, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	491b      	ldr	r1, [pc, #108]	; (8004820 <vTaskStartScheduler+0x90>)
 80047b4:	481b      	ldr	r0, [pc, #108]	; (8004824 <vTaskStartScheduler+0x94>)
 80047b6:	9202      	str	r2, [sp, #8]
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	2300      	movs	r3, #0
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	2300      	movs	r3, #0
 80047c0:	0022      	movs	r2, r4
 80047c2:	f7ff fe46 	bl	8004452 <xTaskCreateStatic>
 80047c6:	0002      	movs	r2, r0
 80047c8:	4b17      	ldr	r3, [pc, #92]	; (8004828 <vTaskStartScheduler+0x98>)
 80047ca:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80047cc:	4b16      	ldr	r3, [pc, #88]	; (8004828 <vTaskStartScheduler+0x98>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80047d4:	2301      	movs	r3, #1
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	e001      	b.n	80047de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80047da:	2300      	movs	r3, #0
 80047dc:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d103      	bne.n	80047ec <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80047e4:	f000 fc7c 	bl	80050e0 <xTimerCreateTimerTask>
 80047e8:	0003      	movs	r3, r0
 80047ea:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d10d      	bne.n	800480e <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80047f2:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80047f4:	4b0d      	ldr	r3, [pc, #52]	; (800482c <vTaskStartScheduler+0x9c>)
 80047f6:	2201      	movs	r2, #1
 80047f8:	4252      	negs	r2, r2
 80047fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047fc:	4b0c      	ldr	r3, [pc, #48]	; (8004830 <vTaskStartScheduler+0xa0>)
 80047fe:	2201      	movs	r2, #1
 8004800:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004802:	4b0c      	ldr	r3, [pc, #48]	; (8004834 <vTaskStartScheduler+0xa4>)
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004808:	f000 ffa6 	bl	8005758 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800480c:	e004      	b.n	8004818 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	3301      	adds	r3, #1
 8004812:	d101      	bne.n	8004818 <vTaskStartScheduler+0x88>
 8004814:	b672      	cpsid	i
 8004816:	e7fe      	b.n	8004816 <vTaskStartScheduler+0x86>
}
 8004818:	46c0      	nop			; (mov r8, r8)
 800481a:	46bd      	mov	sp, r7
 800481c:	b005      	add	sp, #20
 800481e:	bd90      	pop	{r4, r7, pc}
 8004820:	08005d48 	.word	0x08005d48
 8004824:	08004dad 	.word	0x08004dad
 8004828:	20000bec 	.word	0x20000bec
 800482c:	20000be8 	.word	0x20000be8
 8004830:	20000bd4 	.word	0x20000bd4
 8004834:	20000bcc 	.word	0x20000bcc

08004838 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800483c:	4b03      	ldr	r3, [pc, #12]	; (800484c <vTaskSuspendAll+0x14>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	1c5a      	adds	r2, r3, #1
 8004842:	4b02      	ldr	r3, [pc, #8]	; (800484c <vTaskSuspendAll+0x14>)
 8004844:	601a      	str	r2, [r3, #0]
}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	20000bf0 	.word	0x20000bf0

08004850 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800485a:	2300      	movs	r3, #0
 800485c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800485e:	4b3a      	ldr	r3, [pc, #232]	; (8004948 <xTaskResumeAll+0xf8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <xTaskResumeAll+0x1a>
 8004866:	b672      	cpsid	i
 8004868:	e7fe      	b.n	8004868 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800486a:	f000 ffa9 	bl	80057c0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800486e:	4b36      	ldr	r3, [pc, #216]	; (8004948 <xTaskResumeAll+0xf8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	1e5a      	subs	r2, r3, #1
 8004874:	4b34      	ldr	r3, [pc, #208]	; (8004948 <xTaskResumeAll+0xf8>)
 8004876:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004878:	4b33      	ldr	r3, [pc, #204]	; (8004948 <xTaskResumeAll+0xf8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d15b      	bne.n	8004938 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004880:	4b32      	ldr	r3, [pc, #200]	; (800494c <xTaskResumeAll+0xfc>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d057      	beq.n	8004938 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004888:	e02f      	b.n	80048ea <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800488a:	4b31      	ldr	r3, [pc, #196]	; (8004950 <xTaskResumeAll+0x100>)
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	3318      	adds	r3, #24
 8004896:	0018      	movs	r0, r3
 8004898:	f7ff f955 	bl	8003b46 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	3304      	adds	r3, #4
 80048a0:	0018      	movs	r0, r3
 80048a2:	f7ff f950 	bl	8003b46 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048aa:	4b2a      	ldr	r3, [pc, #168]	; (8004954 <xTaskResumeAll+0x104>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d903      	bls.n	80048ba <xTaskResumeAll+0x6a>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b6:	4b27      	ldr	r3, [pc, #156]	; (8004954 <xTaskResumeAll+0x104>)
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048be:	0013      	movs	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	189b      	adds	r3, r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4a24      	ldr	r2, [pc, #144]	; (8004958 <xTaskResumeAll+0x108>)
 80048c8:	189a      	adds	r2, r3, r2
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3304      	adds	r3, #4
 80048ce:	0019      	movs	r1, r3
 80048d0:	0010      	movs	r0, r2
 80048d2:	f7ff f8e0 	bl	8003a96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048da:	4b20      	ldr	r3, [pc, #128]	; (800495c <xTaskResumeAll+0x10c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d302      	bcc.n	80048ea <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80048e4:	4b1e      	ldr	r3, [pc, #120]	; (8004960 <xTaskResumeAll+0x110>)
 80048e6:	2201      	movs	r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048ea:	4b19      	ldr	r3, [pc, #100]	; (8004950 <xTaskResumeAll+0x100>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1cb      	bne.n	800488a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048f8:	f000 fb02 	bl	8004f00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80048fc:	4b19      	ldr	r3, [pc, #100]	; (8004964 <xTaskResumeAll+0x114>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00f      	beq.n	8004928 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004908:	f000 f83c 	bl	8004984 <xTaskIncrementTick>
 800490c:	1e03      	subs	r3, r0, #0
 800490e:	d002      	beq.n	8004916 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8004910:	4b13      	ldr	r3, [pc, #76]	; (8004960 <xTaskResumeAll+0x110>)
 8004912:	2201      	movs	r2, #1
 8004914:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3b01      	subs	r3, #1
 800491a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f2      	bne.n	8004908 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8004922:	4b10      	ldr	r3, [pc, #64]	; (8004964 <xTaskResumeAll+0x114>)
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004928:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <xTaskResumeAll+0x110>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004930:	2301      	movs	r3, #1
 8004932:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004934:	f000 ff34 	bl	80057a0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004938:	f000 ff54 	bl	80057e4 <vPortExitCritical>

	return xAlreadyYielded;
 800493c:	68bb      	ldr	r3, [r7, #8]
}
 800493e:	0018      	movs	r0, r3
 8004940:	46bd      	mov	sp, r7
 8004942:	b004      	add	sp, #16
 8004944:	bd80      	pop	{r7, pc}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	20000bf0 	.word	0x20000bf0
 800494c:	20000bc8 	.word	0x20000bc8
 8004950:	20000b88 	.word	0x20000b88
 8004954:	20000bd0 	.word	0x20000bd0
 8004958:	200006f8 	.word	0x200006f8
 800495c:	200006f4 	.word	0x200006f4
 8004960:	20000bdc 	.word	0x20000bdc
 8004964:	20000bd8 	.word	0x20000bd8

08004968 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800496e:	4b04      	ldr	r3, [pc, #16]	; (8004980 <xTaskGetTickCount+0x18>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004974:	687b      	ldr	r3, [r7, #4]
}
 8004976:	0018      	movs	r0, r3
 8004978:	46bd      	mov	sp, r7
 800497a:	b002      	add	sp, #8
 800497c:	bd80      	pop	{r7, pc}
 800497e:	46c0      	nop			; (mov r8, r8)
 8004980:	20000bcc 	.word	0x20000bcc

08004984 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800498a:	2300      	movs	r3, #0
 800498c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800498e:	4b4c      	ldr	r3, [pc, #304]	; (8004ac0 <xTaskIncrementTick+0x13c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d000      	beq.n	8004998 <xTaskIncrementTick+0x14>
 8004996:	e083      	b.n	8004aa0 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004998:	4b4a      	ldr	r3, [pc, #296]	; (8004ac4 <xTaskIncrementTick+0x140>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3301      	adds	r3, #1
 800499e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80049a0:	4b48      	ldr	r3, [pc, #288]	; (8004ac4 <xTaskIncrementTick+0x140>)
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d117      	bne.n	80049dc <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80049ac:	4b46      	ldr	r3, [pc, #280]	; (8004ac8 <xTaskIncrementTick+0x144>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <xTaskIncrementTick+0x36>
 80049b6:	b672      	cpsid	i
 80049b8:	e7fe      	b.n	80049b8 <xTaskIncrementTick+0x34>
 80049ba:	4b43      	ldr	r3, [pc, #268]	; (8004ac8 <xTaskIncrementTick+0x144>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	4b42      	ldr	r3, [pc, #264]	; (8004acc <xTaskIncrementTick+0x148>)
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	4b40      	ldr	r3, [pc, #256]	; (8004ac8 <xTaskIncrementTick+0x144>)
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	4b40      	ldr	r3, [pc, #256]	; (8004acc <xTaskIncrementTick+0x148>)
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	4b40      	ldr	r3, [pc, #256]	; (8004ad0 <xTaskIncrementTick+0x14c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	4b3e      	ldr	r3, [pc, #248]	; (8004ad0 <xTaskIncrementTick+0x14c>)
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	f000 fa92 	bl	8004f00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049dc:	4b3d      	ldr	r3, [pc, #244]	; (8004ad4 <xTaskIncrementTick+0x150>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d34e      	bcc.n	8004a84 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049e6:	4b38      	ldr	r3, [pc, #224]	; (8004ac8 <xTaskIncrementTick+0x144>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <xTaskIncrementTick+0x70>
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <xTaskIncrementTick+0x72>
 80049f4:	2300      	movs	r3, #0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d004      	beq.n	8004a04 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049fa:	4b36      	ldr	r3, [pc, #216]	; (8004ad4 <xTaskIncrementTick+0x150>)
 80049fc:	2201      	movs	r2, #1
 80049fe:	4252      	negs	r2, r2
 8004a00:	601a      	str	r2, [r3, #0]
					break;
 8004a02:	e03f      	b.n	8004a84 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a04:	4b30      	ldr	r3, [pc, #192]	; (8004ac8 <xTaskIncrementTick+0x144>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d203      	bcs.n	8004a24 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a1c:	4b2d      	ldr	r3, [pc, #180]	; (8004ad4 <xTaskIncrementTick+0x150>)
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	601a      	str	r2, [r3, #0]
						break;
 8004a22:	e02f      	b.n	8004a84 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	3304      	adds	r3, #4
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f7ff f88c 	bl	8003b46 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d004      	beq.n	8004a40 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	3318      	adds	r3, #24
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	f7ff f883 	bl	8003b46 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a44:	4b24      	ldr	r3, [pc, #144]	; (8004ad8 <xTaskIncrementTick+0x154>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d903      	bls.n	8004a54 <xTaskIncrementTick+0xd0>
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a50:	4b21      	ldr	r3, [pc, #132]	; (8004ad8 <xTaskIncrementTick+0x154>)
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a58:	0013      	movs	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	189b      	adds	r3, r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4a1e      	ldr	r2, [pc, #120]	; (8004adc <xTaskIncrementTick+0x158>)
 8004a62:	189a      	adds	r2, r3, r2
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	3304      	adds	r3, #4
 8004a68:	0019      	movs	r1, r3
 8004a6a:	0010      	movs	r0, r2
 8004a6c:	f7ff f813 	bl	8003a96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a74:	4b1a      	ldr	r3, [pc, #104]	; (8004ae0 <xTaskIncrementTick+0x15c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d3b3      	bcc.n	80049e6 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a82:	e7b0      	b.n	80049e6 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a84:	4b16      	ldr	r3, [pc, #88]	; (8004ae0 <xTaskIncrementTick+0x15c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a8a:	4914      	ldr	r1, [pc, #80]	; (8004adc <xTaskIncrementTick+0x158>)
 8004a8c:	0013      	movs	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	189b      	adds	r3, r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	585b      	ldr	r3, [r3, r1]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d907      	bls.n	8004aaa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	617b      	str	r3, [r7, #20]
 8004a9e:	e004      	b.n	8004aaa <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004aa0:	4b10      	ldr	r3, [pc, #64]	; (8004ae4 <xTaskIncrementTick+0x160>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	4b0f      	ldr	r3, [pc, #60]	; (8004ae4 <xTaskIncrementTick+0x160>)
 8004aa8:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004aaa:	4b0f      	ldr	r3, [pc, #60]	; (8004ae8 <xTaskIncrementTick+0x164>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004ab6:	697b      	ldr	r3, [r7, #20]
}
 8004ab8:	0018      	movs	r0, r3
 8004aba:	46bd      	mov	sp, r7
 8004abc:	b006      	add	sp, #24
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	20000bf0 	.word	0x20000bf0
 8004ac4:	20000bcc 	.word	0x20000bcc
 8004ac8:	20000b80 	.word	0x20000b80
 8004acc:	20000b84 	.word	0x20000b84
 8004ad0:	20000be0 	.word	0x20000be0
 8004ad4:	20000be8 	.word	0x20000be8
 8004ad8:	20000bd0 	.word	0x20000bd0
 8004adc:	200006f8 	.word	0x200006f8
 8004ae0:	200006f4 	.word	0x200006f4
 8004ae4:	20000bd8 	.word	0x20000bd8
 8004ae8:	20000bdc 	.word	0x20000bdc

08004aec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004af2:	4b22      	ldr	r3, [pc, #136]	; (8004b7c <vTaskSwitchContext+0x90>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004afa:	4b21      	ldr	r3, [pc, #132]	; (8004b80 <vTaskSwitchContext+0x94>)
 8004afc:	2201      	movs	r2, #1
 8004afe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b00:	e037      	b.n	8004b72 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8004b02:	4b1f      	ldr	r3, [pc, #124]	; (8004b80 <vTaskSwitchContext+0x94>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004b08:	4b1e      	ldr	r3, [pc, #120]	; (8004b84 <vTaskSwitchContext+0x98>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	607b      	str	r3, [r7, #4]
 8004b0e:	e007      	b.n	8004b20 <vTaskSwitchContext+0x34>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <vTaskSwitchContext+0x2e>
 8004b16:	b672      	cpsid	i
 8004b18:	e7fe      	b.n	8004b18 <vTaskSwitchContext+0x2c>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	607b      	str	r3, [r7, #4]
 8004b20:	4919      	ldr	r1, [pc, #100]	; (8004b88 <vTaskSwitchContext+0x9c>)
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	0013      	movs	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	189b      	adds	r3, r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	585b      	ldr	r3, [r3, r1]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0ee      	beq.n	8004b10 <vTaskSwitchContext+0x24>
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	0013      	movs	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	189b      	adds	r3, r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4a12      	ldr	r2, [pc, #72]	; (8004b88 <vTaskSwitchContext+0x9c>)
 8004b3e:	189b      	adds	r3, r3, r2
 8004b40:	603b      	str	r3, [r7, #0]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	605a      	str	r2, [r3, #4]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	3308      	adds	r3, #8
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d104      	bne.n	8004b62 <vTaskSwitchContext+0x76>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	605a      	str	r2, [r3, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	4b08      	ldr	r3, [pc, #32]	; (8004b8c <vTaskSwitchContext+0xa0>)
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <vTaskSwitchContext+0x98>)
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	601a      	str	r2, [r3, #0]
}
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	46bd      	mov	sp, r7
 8004b76:	b002      	add	sp, #8
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	46c0      	nop			; (mov r8, r8)
 8004b7c:	20000bf0 	.word	0x20000bf0
 8004b80:	20000bdc 	.word	0x20000bdc
 8004b84:	20000bd0 	.word	0x20000bd0
 8004b88:	200006f8 	.word	0x200006f8
 8004b8c:	200006f4 	.word	0x200006f4

08004b90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <vTaskPlaceOnEventList+0x14>
 8004ba0:	b672      	cpsid	i
 8004ba2:	e7fe      	b.n	8004ba2 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ba4:	4b08      	ldr	r3, [pc, #32]	; (8004bc8 <vTaskPlaceOnEventList+0x38>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3318      	adds	r3, #24
 8004baa:	001a      	movs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	0011      	movs	r1, r2
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	f7fe ff92 	bl	8003ada <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2101      	movs	r1, #1
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f000 fa3c 	bl	8005038 <prvAddCurrentTaskToDelayedList>
}
 8004bc0:	46c0      	nop			; (mov r8, r8)
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	b002      	add	sp, #8
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	200006f4 	.word	0x200006f4

08004bcc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <vTaskPlaceOnEventListRestricted+0x16>
 8004bde:	b672      	cpsid	i
 8004be0:	e7fe      	b.n	8004be0 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004be2:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <vTaskPlaceOnEventListRestricted+0x48>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3318      	adds	r3, #24
 8004be8:	001a      	movs	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	0011      	movs	r1, r2
 8004bee:	0018      	movs	r0, r3
 8004bf0:	f7fe ff51 	bl	8003a96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	425b      	negs	r3, r3
 8004bfe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	0011      	movs	r1, r2
 8004c06:	0018      	movs	r0, r3
 8004c08:	f000 fa16 	bl	8005038 <prvAddCurrentTaskToDelayedList>
	}
 8004c0c:	46c0      	nop			; (mov r8, r8)
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	b004      	add	sp, #16
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	200006f4 	.word	0x200006f4

08004c18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <xTaskRemoveFromEventList+0x1a>
 8004c2e:	b672      	cpsid	i
 8004c30:	e7fe      	b.n	8004c30 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	3318      	adds	r3, #24
 8004c36:	0018      	movs	r0, r3
 8004c38:	f7fe ff85 	bl	8003b46 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c3c:	4b1e      	ldr	r3, [pc, #120]	; (8004cb8 <xTaskRemoveFromEventList+0xa0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d11d      	bne.n	8004c80 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	3304      	adds	r3, #4
 8004c48:	0018      	movs	r0, r3
 8004c4a:	f7fe ff7c 	bl	8003b46 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c52:	4b1a      	ldr	r3, [pc, #104]	; (8004cbc <xTaskRemoveFromEventList+0xa4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d903      	bls.n	8004c62 <xTaskRemoveFromEventList+0x4a>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c5e:	4b17      	ldr	r3, [pc, #92]	; (8004cbc <xTaskRemoveFromEventList+0xa4>)
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c66:	0013      	movs	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	189b      	adds	r3, r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4a14      	ldr	r2, [pc, #80]	; (8004cc0 <xTaskRemoveFromEventList+0xa8>)
 8004c70:	189a      	adds	r2, r3, r2
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	3304      	adds	r3, #4
 8004c76:	0019      	movs	r1, r3
 8004c78:	0010      	movs	r0, r2
 8004c7a:	f7fe ff0c 	bl	8003a96 <vListInsertEnd>
 8004c7e:	e007      	b.n	8004c90 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	3318      	adds	r3, #24
 8004c84:	001a      	movs	r2, r3
 8004c86:	4b0f      	ldr	r3, [pc, #60]	; (8004cc4 <xTaskRemoveFromEventList+0xac>)
 8004c88:	0011      	movs	r1, r2
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	f7fe ff03 	bl	8003a96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c94:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <xTaskRemoveFromEventList+0xb0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d905      	bls.n	8004caa <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ca2:	4b0a      	ldr	r3, [pc, #40]	; (8004ccc <xTaskRemoveFromEventList+0xb4>)
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	e001      	b.n	8004cae <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8004caa:	2300      	movs	r3, #0
 8004cac:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004cae:	68fb      	ldr	r3, [r7, #12]
}
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	b004      	add	sp, #16
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	20000bf0 	.word	0x20000bf0
 8004cbc:	20000bd0 	.word	0x20000bd0
 8004cc0:	200006f8 	.word	0x200006f8
 8004cc4:	20000b88 	.word	0x20000b88
 8004cc8:	200006f4 	.word	0x200006f4
 8004ccc:	20000bdc 	.word	0x20000bdc

08004cd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004cd8:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <vTaskInternalSetTimeOutState+0x20>)
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ce0:	4b04      	ldr	r3, [pc, #16]	; (8004cf4 <vTaskInternalSetTimeOutState+0x24>)
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	605a      	str	r2, [r3, #4]
}
 8004ce8:	46c0      	nop			; (mov r8, r8)
 8004cea:	46bd      	mov	sp, r7
 8004cec:	b002      	add	sp, #8
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	20000be0 	.word	0x20000be0
 8004cf4:	20000bcc 	.word	0x20000bcc

08004cf8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <xTaskCheckForTimeOut+0x14>
 8004d08:	b672      	cpsid	i
 8004d0a:	e7fe      	b.n	8004d0a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <xTaskCheckForTimeOut+0x1e>
 8004d12:	b672      	cpsid	i
 8004d14:	e7fe      	b.n	8004d14 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8004d16:	f000 fd53 	bl	80057c0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d1a:	4b1d      	ldr	r3, [pc, #116]	; (8004d90 <xTaskCheckForTimeOut+0x98>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	d102      	bne.n	8004d38 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d32:	2300      	movs	r3, #0
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	e024      	b.n	8004d82 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	4b15      	ldr	r3, [pc, #84]	; (8004d94 <xTaskCheckForTimeOut+0x9c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d007      	beq.n	8004d54 <xTaskCheckForTimeOut+0x5c>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d302      	bcc.n	8004d54 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	617b      	str	r3, [r7, #20]
 8004d52:	e016      	b.n	8004d82 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d20c      	bcs.n	8004d78 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	1ad2      	subs	r2, r2, r3
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f7ff ffaf 	bl	8004cd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d72:	2300      	movs	r3, #0
 8004d74:	617b      	str	r3, [r7, #20]
 8004d76:	e004      	b.n	8004d82 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004d82:	f000 fd2f 	bl	80057e4 <vPortExitCritical>

	return xReturn;
 8004d86:	697b      	ldr	r3, [r7, #20]
}
 8004d88:	0018      	movs	r0, r3
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	b006      	add	sp, #24
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	20000bcc 	.word	0x20000bcc
 8004d94:	20000be0 	.word	0x20000be0

08004d98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d9c:	4b02      	ldr	r3, [pc, #8]	; (8004da8 <vTaskMissedYield+0x10>)
 8004d9e:	2201      	movs	r2, #1
 8004da0:	601a      	str	r2, [r3, #0]
}
 8004da2:	46c0      	nop			; (mov r8, r8)
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	20000bdc 	.word	0x20000bdc

08004dac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004db4:	f000 f84e 	bl	8004e54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004db8:	4b03      	ldr	r3, [pc, #12]	; (8004dc8 <prvIdleTask+0x1c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d9f9      	bls.n	8004db4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004dc0:	f000 fcee 	bl	80057a0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004dc4:	e7f6      	b.n	8004db4 <prvIdleTask+0x8>
 8004dc6:	46c0      	nop			; (mov r8, r8)
 8004dc8:	200006f8 	.word	0x200006f8

08004dcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	607b      	str	r3, [r7, #4]
 8004dd6:	e00c      	b.n	8004df2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	0013      	movs	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	189b      	adds	r3, r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4a14      	ldr	r2, [pc, #80]	; (8004e34 <prvInitialiseTaskLists+0x68>)
 8004de4:	189b      	adds	r3, r3, r2
 8004de6:	0018      	movs	r0, r3
 8004de8:	f7fe fe2c 	bl	8003a44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3301      	adds	r3, #1
 8004df0:	607b      	str	r3, [r7, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b37      	cmp	r3, #55	; 0x37
 8004df6:	d9ef      	bls.n	8004dd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004df8:	4b0f      	ldr	r3, [pc, #60]	; (8004e38 <prvInitialiseTaskLists+0x6c>)
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	f7fe fe22 	bl	8003a44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e00:	4b0e      	ldr	r3, [pc, #56]	; (8004e3c <prvInitialiseTaskLists+0x70>)
 8004e02:	0018      	movs	r0, r3
 8004e04:	f7fe fe1e 	bl	8003a44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e08:	4b0d      	ldr	r3, [pc, #52]	; (8004e40 <prvInitialiseTaskLists+0x74>)
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	f7fe fe1a 	bl	8003a44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e10:	4b0c      	ldr	r3, [pc, #48]	; (8004e44 <prvInitialiseTaskLists+0x78>)
 8004e12:	0018      	movs	r0, r3
 8004e14:	f7fe fe16 	bl	8003a44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e18:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <prvInitialiseTaskLists+0x7c>)
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	f7fe fe12 	bl	8003a44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e20:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <prvInitialiseTaskLists+0x80>)
 8004e22:	4a05      	ldr	r2, [pc, #20]	; (8004e38 <prvInitialiseTaskLists+0x6c>)
 8004e24:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e26:	4b0a      	ldr	r3, [pc, #40]	; (8004e50 <prvInitialiseTaskLists+0x84>)
 8004e28:	4a04      	ldr	r2, [pc, #16]	; (8004e3c <prvInitialiseTaskLists+0x70>)
 8004e2a:	601a      	str	r2, [r3, #0]
}
 8004e2c:	46c0      	nop			; (mov r8, r8)
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	b002      	add	sp, #8
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	200006f8 	.word	0x200006f8
 8004e38:	20000b58 	.word	0x20000b58
 8004e3c:	20000b6c 	.word	0x20000b6c
 8004e40:	20000b88 	.word	0x20000b88
 8004e44:	20000b9c 	.word	0x20000b9c
 8004e48:	20000bb4 	.word	0x20000bb4
 8004e4c:	20000b80 	.word	0x20000b80
 8004e50:	20000b84 	.word	0x20000b84

08004e54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e5a:	e01a      	b.n	8004e92 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004e5c:	f000 fcb0 	bl	80057c0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004e60:	4b10      	ldr	r3, [pc, #64]	; (8004ea4 <prvCheckTasksWaitingTermination+0x50>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	f7fe fe6a 	bl	8003b46 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e72:	4b0d      	ldr	r3, [pc, #52]	; (8004ea8 <prvCheckTasksWaitingTermination+0x54>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	1e5a      	subs	r2, r3, #1
 8004e78:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <prvCheckTasksWaitingTermination+0x54>)
 8004e7a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e7c:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <prvCheckTasksWaitingTermination+0x58>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	1e5a      	subs	r2, r3, #1
 8004e82:	4b0a      	ldr	r3, [pc, #40]	; (8004eac <prvCheckTasksWaitingTermination+0x58>)
 8004e84:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004e86:	f000 fcad 	bl	80057e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	f000 f80f 	bl	8004eb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e92:	4b06      	ldr	r3, [pc, #24]	; (8004eac <prvCheckTasksWaitingTermination+0x58>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1e0      	bne.n	8004e5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e9a:	46c0      	nop			; (mov r8, r8)
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	b002      	add	sp, #8
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	46c0      	nop			; (mov r8, r8)
 8004ea4:	20000b9c 	.word	0x20000b9c
 8004ea8:	20000bc8 	.word	0x20000bc8
 8004eac:	20000bb0 	.word	0x20000bb0

08004eb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2259      	movs	r2, #89	; 0x59
 8004ebc:	5c9b      	ldrb	r3, [r3, r2]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d109      	bne.n	8004ed6 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	f000 fdb8 	bl	8005a3c <vPortFree>
				vPortFree( pxTCB );
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f000 fdb4 	bl	8005a3c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ed4:	e010      	b.n	8004ef8 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2259      	movs	r2, #89	; 0x59
 8004eda:	5c9b      	ldrb	r3, [r3, r2]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d104      	bne.n	8004eea <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f000 fdaa 	bl	8005a3c <vPortFree>
	}
 8004ee8:	e006      	b.n	8004ef8 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2259      	movs	r2, #89	; 0x59
 8004eee:	5c9b      	ldrb	r3, [r3, r2]
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d001      	beq.n	8004ef8 <prvDeleteTCB+0x48>
 8004ef4:	b672      	cpsid	i
 8004ef6:	e7fe      	b.n	8004ef6 <prvDeleteTCB+0x46>
	}
 8004ef8:	46c0      	nop			; (mov r8, r8)
 8004efa:	46bd      	mov	sp, r7
 8004efc:	b002      	add	sp, #8
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f06:	4b0e      	ldr	r3, [pc, #56]	; (8004f40 <prvResetNextTaskUnblockTime+0x40>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <prvResetNextTaskUnblockTime+0x14>
 8004f10:	2301      	movs	r3, #1
 8004f12:	e000      	b.n	8004f16 <prvResetNextTaskUnblockTime+0x16>
 8004f14:	2300      	movs	r3, #0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d004      	beq.n	8004f24 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f1a:	4b0a      	ldr	r3, [pc, #40]	; (8004f44 <prvResetNextTaskUnblockTime+0x44>)
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	4252      	negs	r2, r2
 8004f20:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f22:	e008      	b.n	8004f36 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f24:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <prvResetNextTaskUnblockTime+0x40>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	4b04      	ldr	r3, [pc, #16]	; (8004f44 <prvResetNextTaskUnblockTime+0x44>)
 8004f34:	601a      	str	r2, [r3, #0]
}
 8004f36:	46c0      	nop			; (mov r8, r8)
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	b002      	add	sp, #8
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	46c0      	nop			; (mov r8, r8)
 8004f40:	20000b80 	.word	0x20000b80
 8004f44:	20000be8 	.word	0x20000be8

08004f48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f4e:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <xTaskGetSchedulerState+0x30>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d102      	bne.n	8004f5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f56:	2301      	movs	r3, #1
 8004f58:	607b      	str	r3, [r7, #4]
 8004f5a:	e008      	b.n	8004f6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f5c:	4b07      	ldr	r3, [pc, #28]	; (8004f7c <xTaskGetSchedulerState+0x34>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d102      	bne.n	8004f6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f64:	2302      	movs	r3, #2
 8004f66:	607b      	str	r3, [r7, #4]
 8004f68:	e001      	b.n	8004f6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f6e:	687b      	ldr	r3, [r7, #4]
	}
 8004f70:	0018      	movs	r0, r3
 8004f72:	46bd      	mov	sp, r7
 8004f74:	b002      	add	sp, #8
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	20000bd4 	.word	0x20000bd4
 8004f7c:	20000bf0 	.word	0x20000bf0

08004f80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d044      	beq.n	8005020 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f96:	4b25      	ldr	r3, [pc, #148]	; (800502c <xTaskPriorityDisinherit+0xac>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d001      	beq.n	8004fa4 <xTaskPriorityDisinherit+0x24>
 8004fa0:	b672      	cpsid	i
 8004fa2:	e7fe      	b.n	8004fa2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <xTaskPriorityDisinherit+0x30>
 8004fac:	b672      	cpsid	i
 8004fae:	e7fe      	b.n	8004fae <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb4:	1e5a      	subs	r2, r3, #1
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d02c      	beq.n	8005020 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d128      	bne.n	8005020 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f7fe fdb7 	bl	8003b46 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe4:	2238      	movs	r2, #56	; 0x38
 8004fe6:	1ad2      	subs	r2, r2, r3
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff0:	4b0f      	ldr	r3, [pc, #60]	; (8005030 <xTaskPriorityDisinherit+0xb0>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d903      	bls.n	8005000 <xTaskPriorityDisinherit+0x80>
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ffc:	4b0c      	ldr	r3, [pc, #48]	; (8005030 <xTaskPriorityDisinherit+0xb0>)
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005004:	0013      	movs	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	189b      	adds	r3, r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4a09      	ldr	r2, [pc, #36]	; (8005034 <xTaskPriorityDisinherit+0xb4>)
 800500e:	189a      	adds	r2, r3, r2
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	3304      	adds	r3, #4
 8005014:	0019      	movs	r1, r3
 8005016:	0010      	movs	r0, r2
 8005018:	f7fe fd3d 	bl	8003a96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800501c:	2301      	movs	r3, #1
 800501e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005020:	68fb      	ldr	r3, [r7, #12]
	}
 8005022:	0018      	movs	r0, r3
 8005024:	46bd      	mov	sp, r7
 8005026:	b004      	add	sp, #16
 8005028:	bd80      	pop	{r7, pc}
 800502a:	46c0      	nop			; (mov r8, r8)
 800502c:	200006f4 	.word	0x200006f4
 8005030:	20000bd0 	.word	0x20000bd0
 8005034:	200006f8 	.word	0x200006f8

08005038 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005042:	4b21      	ldr	r3, [pc, #132]	; (80050c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005048:	4b20      	ldr	r3, [pc, #128]	; (80050cc <prvAddCurrentTaskToDelayedList+0x94>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3304      	adds	r3, #4
 800504e:	0018      	movs	r0, r3
 8005050:	f7fe fd79 	bl	8003b46 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3301      	adds	r3, #1
 8005058:	d10b      	bne.n	8005072 <prvAddCurrentTaskToDelayedList+0x3a>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d008      	beq.n	8005072 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005060:	4b1a      	ldr	r3, [pc, #104]	; (80050cc <prvAddCurrentTaskToDelayedList+0x94>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	1d1a      	adds	r2, r3, #4
 8005066:	4b1a      	ldr	r3, [pc, #104]	; (80050d0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005068:	0011      	movs	r1, r2
 800506a:	0018      	movs	r0, r3
 800506c:	f7fe fd13 	bl	8003a96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005070:	e026      	b.n	80050c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	18d3      	adds	r3, r2, r3
 8005078:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800507a:	4b14      	ldr	r3, [pc, #80]	; (80050cc <prvAddCurrentTaskToDelayedList+0x94>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	429a      	cmp	r2, r3
 8005088:	d209      	bcs.n	800509e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800508a:	4b12      	ldr	r3, [pc, #72]	; (80050d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	4b0f      	ldr	r3, [pc, #60]	; (80050cc <prvAddCurrentTaskToDelayedList+0x94>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3304      	adds	r3, #4
 8005094:	0019      	movs	r1, r3
 8005096:	0010      	movs	r0, r2
 8005098:	f7fe fd1f 	bl	8003ada <vListInsert>
}
 800509c:	e010      	b.n	80050c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800509e:	4b0e      	ldr	r3, [pc, #56]	; (80050d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	4b0a      	ldr	r3, [pc, #40]	; (80050cc <prvAddCurrentTaskToDelayedList+0x94>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3304      	adds	r3, #4
 80050a8:	0019      	movs	r1, r3
 80050aa:	0010      	movs	r0, r2
 80050ac:	f7fe fd15 	bl	8003ada <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050b0:	4b0a      	ldr	r3, [pc, #40]	; (80050dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d202      	bcs.n	80050c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80050ba:	4b08      	ldr	r3, [pc, #32]	; (80050dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	601a      	str	r2, [r3, #0]
}
 80050c0:	46c0      	nop			; (mov r8, r8)
 80050c2:	46bd      	mov	sp, r7
 80050c4:	b004      	add	sp, #16
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20000bcc 	.word	0x20000bcc
 80050cc:	200006f4 	.word	0x200006f4
 80050d0:	20000bb4 	.word	0x20000bb4
 80050d4:	20000b84 	.word	0x20000b84
 80050d8:	20000b80 	.word	0x20000b80
 80050dc:	20000be8 	.word	0x20000be8

080050e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80050e0:	b590      	push	{r4, r7, lr}
 80050e2:	b089      	sub	sp, #36	; 0x24
 80050e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80050ea:	f000 fa8b 	bl	8005604 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80050ee:	4b17      	ldr	r3, [pc, #92]	; (800514c <xTimerCreateTimerTask+0x6c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d020      	beq.n	8005138 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80050f6:	2300      	movs	r3, #0
 80050f8:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80050fe:	003a      	movs	r2, r7
 8005100:	1d39      	adds	r1, r7, #4
 8005102:	2308      	movs	r3, #8
 8005104:	18fb      	adds	r3, r7, r3
 8005106:	0018      	movs	r0, r3
 8005108:	f7fe fc84 	bl	8003a14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800510c:	683c      	ldr	r4, [r7, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	490f      	ldr	r1, [pc, #60]	; (8005150 <xTimerCreateTimerTask+0x70>)
 8005114:	480f      	ldr	r0, [pc, #60]	; (8005154 <xTimerCreateTimerTask+0x74>)
 8005116:	9202      	str	r2, [sp, #8]
 8005118:	9301      	str	r3, [sp, #4]
 800511a:	2302      	movs	r3, #2
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	2300      	movs	r3, #0
 8005120:	0022      	movs	r2, r4
 8005122:	f7ff f996 	bl	8004452 <xTaskCreateStatic>
 8005126:	0002      	movs	r2, r0
 8005128:	4b0b      	ldr	r3, [pc, #44]	; (8005158 <xTimerCreateTimerTask+0x78>)
 800512a:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800512c:	4b0a      	ldr	r3, [pc, #40]	; (8005158 <xTimerCreateTimerTask+0x78>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8005134:	2301      	movs	r3, #1
 8005136:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <xTimerCreateTimerTask+0x62>
 800513e:	b672      	cpsid	i
 8005140:	e7fe      	b.n	8005140 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8005142:	68fb      	ldr	r3, [r7, #12]
}
 8005144:	0018      	movs	r0, r3
 8005146:	46bd      	mov	sp, r7
 8005148:	b005      	add	sp, #20
 800514a:	bd90      	pop	{r4, r7, pc}
 800514c:	20000c24 	.word	0x20000c24
 8005150:	08005d50 	.word	0x08005d50
 8005154:	08005265 	.word	0x08005265
 8005158:	20000c28 	.word	0x20000c28

0800515c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b08a      	sub	sp, #40	; 0x28
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
 8005168:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800516a:	2300      	movs	r3, #0
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <xTimerGenericCommand+0x1c>
 8005174:	b672      	cpsid	i
 8005176:	e7fe      	b.n	8005176 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005178:	4b1d      	ldr	r3, [pc, #116]	; (80051f0 <xTimerGenericCommand+0x94>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d031      	beq.n	80051e4 <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005180:	2114      	movs	r1, #20
 8005182:	187b      	adds	r3, r7, r1
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005188:	187b      	adds	r3, r7, r1
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800518e:	187b      	adds	r3, r7, r1
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2b05      	cmp	r3, #5
 8005198:	dc1a      	bgt.n	80051d0 <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800519a:	f7ff fed5 	bl	8004f48 <xTaskGetSchedulerState>
 800519e:	0003      	movs	r3, r0
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d10a      	bne.n	80051ba <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051a4:	4b12      	ldr	r3, [pc, #72]	; (80051f0 <xTimerGenericCommand+0x94>)
 80051a6:	6818      	ldr	r0, [r3, #0]
 80051a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051aa:	2314      	movs	r3, #20
 80051ac:	18f9      	adds	r1, r7, r3
 80051ae:	2300      	movs	r3, #0
 80051b0:	f7fe fded 	bl	8003d8e <xQueueGenericSend>
 80051b4:	0003      	movs	r3, r0
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
 80051b8:	e014      	b.n	80051e4 <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80051ba:	4b0d      	ldr	r3, [pc, #52]	; (80051f0 <xTimerGenericCommand+0x94>)
 80051bc:	6818      	ldr	r0, [r3, #0]
 80051be:	2314      	movs	r3, #20
 80051c0:	18f9      	adds	r1, r7, r3
 80051c2:	2300      	movs	r3, #0
 80051c4:	2200      	movs	r2, #0
 80051c6:	f7fe fde2 	bl	8003d8e <xQueueGenericSend>
 80051ca:	0003      	movs	r3, r0
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
 80051ce:	e009      	b.n	80051e4 <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80051d0:	4b07      	ldr	r3, [pc, #28]	; (80051f0 <xTimerGenericCommand+0x94>)
 80051d2:	6818      	ldr	r0, [r3, #0]
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	2314      	movs	r3, #20
 80051d8:	18f9      	adds	r1, r7, r3
 80051da:	2300      	movs	r3, #0
 80051dc:	f7fe fe9b 	bl	8003f16 <xQueueGenericSendFromISR>
 80051e0:	0003      	movs	r3, r0
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051e6:	0018      	movs	r0, r3
 80051e8:	46bd      	mov	sp, r7
 80051ea:	b00a      	add	sp, #40	; 0x28
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	46c0      	nop			; (mov r8, r8)
 80051f0:	20000c24 	.word	0x20000c24

080051f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af02      	add	r7, sp, #8
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051fe:	4b18      	ldr	r3, [pc, #96]	; (8005260 <prvProcessExpiredTimer+0x6c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	3304      	adds	r3, #4
 800520c:	0018      	movs	r0, r3
 800520e:	f7fe fc9a 	bl	8003b46 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d119      	bne.n	800524e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	699a      	ldr	r2, [r3, #24]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	18d1      	adds	r1, r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 f8b6 	bl	8005398 <prvInsertTimerInActiveList>
 800522c:	1e03      	subs	r3, r0, #0
 800522e:	d00e      	beq.n	800524e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	2300      	movs	r3, #0
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	2300      	movs	r3, #0
 800523a:	2100      	movs	r1, #0
 800523c:	f7ff ff8e 	bl	800515c <xTimerGenericCommand>
 8005240:	0003      	movs	r3, r0
 8005242:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <prvProcessExpiredTimer+0x5a>
 800524a:	b672      	cpsid	i
 800524c:	e7fe      	b.n	800524c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	0010      	movs	r0, r2
 8005256:	4798      	blx	r3
}
 8005258:	46c0      	nop			; (mov r8, r8)
 800525a:	46bd      	mov	sp, r7
 800525c:	b004      	add	sp, #16
 800525e:	bd80      	pop	{r7, pc}
 8005260:	20000c1c 	.word	0x20000c1c

08005264 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800526c:	2308      	movs	r3, #8
 800526e:	18fb      	adds	r3, r7, r3
 8005270:	0018      	movs	r0, r3
 8005272:	f000 f851 	bl	8005318 <prvGetNextExpireTime>
 8005276:	0003      	movs	r3, r0
 8005278:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	0011      	movs	r1, r2
 8005280:	0018      	movs	r0, r3
 8005282:	f000 f803 	bl	800528c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005286:	f000 f8c9 	bl	800541c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800528a:	e7ef      	b.n	800526c <prvTimerTask+0x8>

0800528c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005296:	f7ff facf 	bl	8004838 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800529a:	2308      	movs	r3, #8
 800529c:	18fb      	adds	r3, r7, r3
 800529e:	0018      	movs	r0, r3
 80052a0:	f000 f85a 	bl	8005358 <prvSampleTimeNow>
 80052a4:	0003      	movs	r3, r0
 80052a6:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d129      	bne.n	8005302 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10c      	bne.n	80052ce <prvProcessTimerOrBlockTask+0x42>
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d808      	bhi.n	80052ce <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 80052bc:	f7ff fac8 	bl	8004850 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	0011      	movs	r1, r2
 80052c6:	0018      	movs	r0, r3
 80052c8:	f7ff ff94 	bl	80051f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80052cc:	e01b      	b.n	8005306 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d006      	beq.n	80052e2 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80052d4:	4b0e      	ldr	r3, [pc, #56]	; (8005310 <prvProcessTimerOrBlockTask+0x84>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	425a      	negs	r2, r3
 80052dc:	4153      	adcs	r3, r2
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80052e2:	4b0c      	ldr	r3, [pc, #48]	; (8005314 <prvProcessTimerOrBlockTask+0x88>)
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	0019      	movs	r1, r3
 80052f0:	f7ff f87c 	bl	80043ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80052f4:	f7ff faac 	bl	8004850 <xTaskResumeAll>
 80052f8:	1e03      	subs	r3, r0, #0
 80052fa:	d104      	bne.n	8005306 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 80052fc:	f000 fa50 	bl	80057a0 <vPortYield>
}
 8005300:	e001      	b.n	8005306 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8005302:	f7ff faa5 	bl	8004850 <xTaskResumeAll>
}
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	46bd      	mov	sp, r7
 800530a:	b004      	add	sp, #16
 800530c:	bd80      	pop	{r7, pc}
 800530e:	46c0      	nop			; (mov r8, r8)
 8005310:	20000c20 	.word	0x20000c20
 8005314:	20000c24 	.word	0x20000c24

08005318 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005320:	4b0c      	ldr	r3, [pc, #48]	; (8005354 <prvGetNextExpireTime+0x3c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	425a      	negs	r2, r3
 8005328:	4153      	adcs	r3, r2
 800532a:	b2db      	uxtb	r3, r3
 800532c:	001a      	movs	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d105      	bne.n	8005346 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800533a:	4b06      	ldr	r3, [pc, #24]	; (8005354 <prvGetNextExpireTime+0x3c>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	e001      	b.n	800534a <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005346:	2300      	movs	r3, #0
 8005348:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800534a:	68fb      	ldr	r3, [r7, #12]
}
 800534c:	0018      	movs	r0, r3
 800534e:	46bd      	mov	sp, r7
 8005350:	b004      	add	sp, #16
 8005352:	bd80      	pop	{r7, pc}
 8005354:	20000c1c 	.word	0x20000c1c

08005358 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005360:	f7ff fb02 	bl	8004968 <xTaskGetTickCount>
 8005364:	0003      	movs	r3, r0
 8005366:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8005368:	4b0a      	ldr	r3, [pc, #40]	; (8005394 <prvSampleTimeNow+0x3c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	429a      	cmp	r2, r3
 8005370:	d205      	bcs.n	800537e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8005372:	f000 f8ed 	bl	8005550 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	e002      	b.n	8005384 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005384:	4b03      	ldr	r3, [pc, #12]	; (8005394 <prvSampleTimeNow+0x3c>)
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800538a:	68fb      	ldr	r3, [r7, #12]
}
 800538c:	0018      	movs	r0, r3
 800538e:	46bd      	mov	sp, r7
 8005390:	b004      	add	sp, #16
 8005392:	bd80      	pop	{r7, pc}
 8005394:	20000c2c 	.word	0x20000c2c

08005398 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80053a6:	2300      	movs	r3, #0
 80053a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d812      	bhi.n	80053e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	1ad2      	subs	r2, r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d302      	bcc.n	80053d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80053cc:	2301      	movs	r3, #1
 80053ce:	617b      	str	r3, [r7, #20]
 80053d0:	e01b      	b.n	800540a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80053d2:	4b10      	ldr	r3, [pc, #64]	; (8005414 <prvInsertTimerInActiveList+0x7c>)
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	3304      	adds	r3, #4
 80053da:	0019      	movs	r1, r3
 80053dc:	0010      	movs	r0, r2
 80053de:	f7fe fb7c 	bl	8003ada <vListInsert>
 80053e2:	e012      	b.n	800540a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d206      	bcs.n	80053fa <prvInsertTimerInActiveList+0x62>
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d302      	bcc.n	80053fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80053f4:	2301      	movs	r3, #1
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	e007      	b.n	800540a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053fa:	4b07      	ldr	r3, [pc, #28]	; (8005418 <prvInsertTimerInActiveList+0x80>)
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	3304      	adds	r3, #4
 8005402:	0019      	movs	r1, r3
 8005404:	0010      	movs	r0, r2
 8005406:	f7fe fb68 	bl	8003ada <vListInsert>
		}
	}

	return xProcessTimerNow;
 800540a:	697b      	ldr	r3, [r7, #20]
}
 800540c:	0018      	movs	r0, r3
 800540e:	46bd      	mov	sp, r7
 8005410:	b006      	add	sp, #24
 8005412:	bd80      	pop	{r7, pc}
 8005414:	20000c20 	.word	0x20000c20
 8005418:	20000c1c 	.word	0x20000c1c

0800541c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08c      	sub	sp, #48	; 0x30
 8005420:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005422:	e082      	b.n	800552a <prvProcessReceivedCommands+0x10e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005424:	2308      	movs	r3, #8
 8005426:	18fb      	adds	r3, r7, r3
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	da10      	bge.n	8005450 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800542e:	2308      	movs	r3, #8
 8005430:	18fb      	adds	r3, r7, r3
 8005432:	3304      	adds	r3, #4
 8005434:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <prvProcessReceivedCommands+0x24>
 800543c:	b672      	cpsid	i
 800543e:	e7fe      	b.n	800543e <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	6858      	ldr	r0, [r3, #4]
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	0019      	movs	r1, r3
 800544e:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005450:	2308      	movs	r3, #8
 8005452:	18fb      	adds	r3, r7, r3
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	db66      	blt.n	8005528 <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800545a:	2308      	movs	r3, #8
 800545c:	18fb      	adds	r3, r7, r3
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d004      	beq.n	8005474 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	3304      	adds	r3, #4
 800546e:	0018      	movs	r0, r3
 8005470:	f7fe fb69 	bl	8003b46 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005474:	1d3b      	adds	r3, r7, #4
 8005476:	0018      	movs	r0, r3
 8005478:	f7ff ff6e 	bl	8005358 <prvSampleTimeNow>
 800547c:	0003      	movs	r3, r0
 800547e:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8005480:	2308      	movs	r3, #8
 8005482:	18fb      	adds	r3, r7, r3
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2b09      	cmp	r3, #9
 8005488:	d84f      	bhi.n	800552a <prvProcessReceivedCommands+0x10e>
 800548a:	009a      	lsls	r2, r3, #2
 800548c:	4b2e      	ldr	r3, [pc, #184]	; (8005548 <prvProcessReceivedCommands+0x12c>)
 800548e:	18d3      	adds	r3, r2, r3
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005494:	2008      	movs	r0, #8
 8005496:	183b      	adds	r3, r7, r0
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	18d1      	adds	r1, r2, r3
 80054a0:	183b      	adds	r3, r7, r0
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	69fa      	ldr	r2, [r7, #28]
 80054a6:	6a38      	ldr	r0, [r7, #32]
 80054a8:	f7ff ff76 	bl	8005398 <prvInsertTimerInActiveList>
 80054ac:	1e03      	subs	r3, r0, #0
 80054ae:	d03c      	beq.n	800552a <prvProcessReceivedCommands+0x10e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	6a3a      	ldr	r2, [r7, #32]
 80054b6:	0010      	movs	r0, r2
 80054b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d133      	bne.n	800552a <prvProcessReceivedCommands+0x10e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80054c2:	2308      	movs	r3, #8
 80054c4:	18fb      	adds	r3, r7, r3
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	18d2      	adds	r2, r2, r3
 80054ce:	6a38      	ldr	r0, [r7, #32]
 80054d0:	2300      	movs	r3, #0
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	2300      	movs	r3, #0
 80054d6:	2100      	movs	r1, #0
 80054d8:	f7ff fe40 	bl	800515c <xTimerGenericCommand>
 80054dc:	0003      	movs	r3, r0
 80054de:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d121      	bne.n	800552a <prvProcessReceivedCommands+0x10e>
 80054e6:	b672      	cpsid	i
 80054e8:	e7fe      	b.n	80054e8 <prvProcessReceivedCommands+0xcc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80054ea:	2308      	movs	r3, #8
 80054ec:	18fb      	adds	r3, r7, r3
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <prvProcessReceivedCommands+0xe4>
 80054fc:	b672      	cpsid	i
 80054fe:	e7fe      	b.n	80054fe <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	699a      	ldr	r2, [r3, #24]
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	18d1      	adds	r1, r2, r3
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	69fa      	ldr	r2, [r7, #28]
 800550c:	6a38      	ldr	r0, [r7, #32]
 800550e:	f7ff ff43 	bl	8005398 <prvInsertTimerInActiveList>
					break;
 8005512:	e00a      	b.n	800552a <prvProcessReceivedCommands+0x10e>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	222c      	movs	r2, #44	; 0x2c
 8005518:	5c9b      	ldrb	r3, [r3, r2]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d105      	bne.n	800552a <prvProcessReceivedCommands+0x10e>
						{
							vPortFree( pxTimer );
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	0018      	movs	r0, r3
 8005522:	f000 fa8b 	bl	8005a3c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005526:	e000      	b.n	800552a <prvProcessReceivedCommands+0x10e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005528:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800552a:	4b08      	ldr	r3, [pc, #32]	; (800554c <prvProcessReceivedCommands+0x130>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2208      	movs	r2, #8
 8005530:	18b9      	adds	r1, r7, r2
 8005532:	2200      	movs	r2, #0
 8005534:	0018      	movs	r0, r3
 8005536:	f7fe fd5f 	bl	8003ff8 <xQueueReceive>
 800553a:	1e03      	subs	r3, r0, #0
 800553c:	d000      	beq.n	8005540 <prvProcessReceivedCommands+0x124>
 800553e:	e771      	b.n	8005424 <prvProcessReceivedCommands+0x8>
	}
}
 8005540:	46c0      	nop			; (mov r8, r8)
 8005542:	46bd      	mov	sp, r7
 8005544:	b00a      	add	sp, #40	; 0x28
 8005546:	bd80      	pop	{r7, pc}
 8005548:	08005ea4 	.word	0x08005ea4
 800554c:	20000c24 	.word	0x20000c24

08005550 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b088      	sub	sp, #32
 8005554:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005556:	e03e      	b.n	80055d6 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005558:	4b28      	ldr	r3, [pc, #160]	; (80055fc <prvSwitchTimerLists+0xac>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005562:	4b26      	ldr	r3, [pc, #152]	; (80055fc <prvSwitchTimerLists+0xac>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3304      	adds	r3, #4
 8005570:	0018      	movs	r0, r3
 8005572:	f7fe fae8 	bl	8003b46 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	0010      	movs	r0, r2
 800557e:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d126      	bne.n	80055d6 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	18d3      	adds	r3, r2, r3
 8005590:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	429a      	cmp	r2, r3
 8005598:	d90e      	bls.n	80055b8 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055a6:	4b15      	ldr	r3, [pc, #84]	; (80055fc <prvSwitchTimerLists+0xac>)
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	3304      	adds	r3, #4
 80055ae:	0019      	movs	r1, r3
 80055b0:	0010      	movs	r0, r2
 80055b2:	f7fe fa92 	bl	8003ada <vListInsert>
 80055b6:	e00e      	b.n	80055d6 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	2300      	movs	r3, #0
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	2300      	movs	r3, #0
 80055c2:	2100      	movs	r1, #0
 80055c4:	f7ff fdca 	bl	800515c <xTimerGenericCommand>
 80055c8:	0003      	movs	r3, r0
 80055ca:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <prvSwitchTimerLists+0x86>
 80055d2:	b672      	cpsid	i
 80055d4:	e7fe      	b.n	80055d4 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055d6:	4b09      	ldr	r3, [pc, #36]	; (80055fc <prvSwitchTimerLists+0xac>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1bb      	bne.n	8005558 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80055e0:	4b06      	ldr	r3, [pc, #24]	; (80055fc <prvSwitchTimerLists+0xac>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80055e6:	4b06      	ldr	r3, [pc, #24]	; (8005600 <prvSwitchTimerLists+0xb0>)
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	4b04      	ldr	r3, [pc, #16]	; (80055fc <prvSwitchTimerLists+0xac>)
 80055ec:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80055ee:	4b04      	ldr	r3, [pc, #16]	; (8005600 <prvSwitchTimerLists+0xb0>)
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	601a      	str	r2, [r3, #0]
}
 80055f4:	46c0      	nop			; (mov r8, r8)
 80055f6:	46bd      	mov	sp, r7
 80055f8:	b006      	add	sp, #24
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	20000c1c 	.word	0x20000c1c
 8005600:	20000c20 	.word	0x20000c20

08005604 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800560a:	f000 f8d9 	bl	80057c0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800560e:	4b17      	ldr	r3, [pc, #92]	; (800566c <prvCheckForValidListAndQueue+0x68>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d124      	bne.n	8005660 <prvCheckForValidListAndQueue+0x5c>
		{
			vListInitialise( &xActiveTimerList1 );
 8005616:	4b16      	ldr	r3, [pc, #88]	; (8005670 <prvCheckForValidListAndQueue+0x6c>)
 8005618:	0018      	movs	r0, r3
 800561a:	f7fe fa13 	bl	8003a44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800561e:	4b15      	ldr	r3, [pc, #84]	; (8005674 <prvCheckForValidListAndQueue+0x70>)
 8005620:	0018      	movs	r0, r3
 8005622:	f7fe fa0f 	bl	8003a44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005626:	4b14      	ldr	r3, [pc, #80]	; (8005678 <prvCheckForValidListAndQueue+0x74>)
 8005628:	4a11      	ldr	r2, [pc, #68]	; (8005670 <prvCheckForValidListAndQueue+0x6c>)
 800562a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800562c:	4b13      	ldr	r3, [pc, #76]	; (800567c <prvCheckForValidListAndQueue+0x78>)
 800562e:	4a11      	ldr	r2, [pc, #68]	; (8005674 <prvCheckForValidListAndQueue+0x70>)
 8005630:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005632:	4913      	ldr	r1, [pc, #76]	; (8005680 <prvCheckForValidListAndQueue+0x7c>)
 8005634:	4a13      	ldr	r2, [pc, #76]	; (8005684 <prvCheckForValidListAndQueue+0x80>)
 8005636:	2300      	movs	r3, #0
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	000b      	movs	r3, r1
 800563c:	2110      	movs	r1, #16
 800563e:	200a      	movs	r0, #10
 8005640:	f7fe fafd 	bl	8003c3e <xQueueGenericCreateStatic>
 8005644:	0002      	movs	r2, r0
 8005646:	4b09      	ldr	r3, [pc, #36]	; (800566c <prvCheckForValidListAndQueue+0x68>)
 8005648:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800564a:	4b08      	ldr	r3, [pc, #32]	; (800566c <prvCheckForValidListAndQueue+0x68>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d006      	beq.n	8005660 <prvCheckForValidListAndQueue+0x5c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005652:	4b06      	ldr	r3, [pc, #24]	; (800566c <prvCheckForValidListAndQueue+0x68>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a0c      	ldr	r2, [pc, #48]	; (8005688 <prvCheckForValidListAndQueue+0x84>)
 8005658:	0011      	movs	r1, r2
 800565a:	0018      	movs	r0, r3
 800565c:	f7fe fe9e 	bl	800439c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005660:	f000 f8c0 	bl	80057e4 <vPortExitCritical>
}
 8005664:	46c0      	nop			; (mov r8, r8)
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	46c0      	nop			; (mov r8, r8)
 800566c:	20000c24 	.word	0x20000c24
 8005670:	20000bf4 	.word	0x20000bf4
 8005674:	20000c08 	.word	0x20000c08
 8005678:	20000c1c 	.word	0x20000c1c
 800567c:	20000c20 	.word	0x20000c20
 8005680:	20000cd0 	.word	0x20000cd0
 8005684:	20000c30 	.word	0x20000c30
 8005688:	08005d58 	.word	0x08005d58

0800568c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	3b04      	subs	r3, #4
 800569c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2280      	movs	r2, #128	; 0x80
 80056a2:	0452      	lsls	r2, r2, #17
 80056a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	3b04      	subs	r3, #4
 80056aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	3b04      	subs	r3, #4
 80056b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80056b8:	4a08      	ldr	r2, [pc, #32]	; (80056dc <pxPortInitialiseStack+0x50>)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	3b14      	subs	r3, #20
 80056c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	3b20      	subs	r3, #32
 80056ce:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80056d0:	68fb      	ldr	r3, [r7, #12]
}
 80056d2:	0018      	movs	r0, r3
 80056d4:	46bd      	mov	sp, r7
 80056d6:	b004      	add	sp, #16
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	46c0      	nop			; (mov r8, r8)
 80056dc:	080056e1 	.word	0x080056e1

080056e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80056e6:	2300      	movs	r3, #0
 80056e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056ea:	4b07      	ldr	r3, [pc, #28]	; (8005708 <prvTaskExitError+0x28>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3301      	adds	r3, #1
 80056f0:	d001      	beq.n	80056f6 <prvTaskExitError+0x16>
 80056f2:	b672      	cpsid	i
 80056f4:	e7fe      	b.n	80056f4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80056f6:	b672      	cpsid	i
	while( ulDummy == 0 )
 80056f8:	46c0      	nop			; (mov r8, r8)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d0fc      	beq.n	80056fa <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005700:	46c0      	nop			; (mov r8, r8)
 8005702:	46bd      	mov	sp, r7
 8005704:	b002      	add	sp, #8
 8005706:	bd80      	pop	{r7, pc}
 8005708:	2000000c 	.word	0x2000000c

0800570c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005710:	46c0      	nop			; (mov r8, r8)
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
	...

08005720 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005720:	4a0b      	ldr	r2, [pc, #44]	; (8005750 <pxCurrentTCBConst2>)
 8005722:	6813      	ldr	r3, [r2, #0]
 8005724:	6818      	ldr	r0, [r3, #0]
 8005726:	3020      	adds	r0, #32
 8005728:	f380 8809 	msr	PSP, r0
 800572c:	2002      	movs	r0, #2
 800572e:	f380 8814 	msr	CONTROL, r0
 8005732:	f3bf 8f6f 	isb	sy
 8005736:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005738:	46ae      	mov	lr, r5
 800573a:	bc08      	pop	{r3}
 800573c:	bc04      	pop	{r2}
 800573e:	b662      	cpsie	i
 8005740:	4718      	bx	r3
 8005742:	46c0      	nop			; (mov r8, r8)
 8005744:	46c0      	nop			; (mov r8, r8)
 8005746:	46c0      	nop			; (mov r8, r8)
 8005748:	46c0      	nop			; (mov r8, r8)
 800574a:	46c0      	nop			; (mov r8, r8)
 800574c:	46c0      	nop			; (mov r8, r8)
 800574e:	46c0      	nop			; (mov r8, r8)

08005750 <pxCurrentTCBConst2>:
 8005750:	200006f4 	.word	0x200006f4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005754:	46c0      	nop			; (mov r8, r8)
 8005756:	46c0      	nop			; (mov r8, r8)

08005758 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800575c:	4b0e      	ldr	r3, [pc, #56]	; (8005798 <xPortStartScheduler+0x40>)
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	4b0d      	ldr	r3, [pc, #52]	; (8005798 <xPortStartScheduler+0x40>)
 8005762:	21ff      	movs	r1, #255	; 0xff
 8005764:	0409      	lsls	r1, r1, #16
 8005766:	430a      	orrs	r2, r1
 8005768:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800576a:	4b0b      	ldr	r3, [pc, #44]	; (8005798 <xPortStartScheduler+0x40>)
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	4b0a      	ldr	r3, [pc, #40]	; (8005798 <xPortStartScheduler+0x40>)
 8005770:	21ff      	movs	r1, #255	; 0xff
 8005772:	0609      	lsls	r1, r1, #24
 8005774:	430a      	orrs	r2, r1
 8005776:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8005778:	f000 f898 	bl	80058ac <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800577c:	4b07      	ldr	r3, [pc, #28]	; (800579c <xPortStartScheduler+0x44>)
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005782:	f7ff ffcd 	bl	8005720 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005786:	f7ff f9b1 	bl	8004aec <vTaskSwitchContext>
	prvTaskExitError();
 800578a:	f7ff ffa9 	bl	80056e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800578e:	2300      	movs	r3, #0
}
 8005790:	0018      	movs	r0, r3
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	46c0      	nop			; (mov r8, r8)
 8005798:	e000ed20 	.word	0xe000ed20
 800579c:	2000000c 	.word	0x2000000c

080057a0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80057a4:	4b05      	ldr	r3, [pc, #20]	; (80057bc <vPortYield+0x1c>)
 80057a6:	2280      	movs	r2, #128	; 0x80
 80057a8:	0552      	lsls	r2, r2, #21
 80057aa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80057ac:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80057b0:	f3bf 8f6f 	isb	sy
}
 80057b4:	46c0      	nop			; (mov r8, r8)
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	46c0      	nop			; (mov r8, r8)
 80057bc:	e000ed04 	.word	0xe000ed04

080057c0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80057c4:	b672      	cpsid	i
    uxCriticalNesting++;
 80057c6:	4b06      	ldr	r3, [pc, #24]	; (80057e0 <vPortEnterCritical+0x20>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	4b04      	ldr	r3, [pc, #16]	; (80057e0 <vPortEnterCritical+0x20>)
 80057ce:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80057d0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80057d4:	f3bf 8f6f 	isb	sy
}
 80057d8:	46c0      	nop			; (mov r8, r8)
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	46c0      	nop			; (mov r8, r8)
 80057e0:	2000000c 	.word	0x2000000c

080057e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80057e8:	4b09      	ldr	r3, [pc, #36]	; (8005810 <vPortExitCritical+0x2c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <vPortExitCritical+0x10>
 80057f0:	b672      	cpsid	i
 80057f2:	e7fe      	b.n	80057f2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80057f4:	4b06      	ldr	r3, [pc, #24]	; (8005810 <vPortExitCritical+0x2c>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	1e5a      	subs	r2, r3, #1
 80057fa:	4b05      	ldr	r3, [pc, #20]	; (8005810 <vPortExitCritical+0x2c>)
 80057fc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80057fe:	4b04      	ldr	r3, [pc, #16]	; (8005810 <vPortExitCritical+0x2c>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d100      	bne.n	8005808 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8005806:	b662      	cpsie	i
    }
}
 8005808:	46c0      	nop			; (mov r8, r8)
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	46c0      	nop			; (mov r8, r8)
 8005810:	2000000c 	.word	0x2000000c

08005814 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005814:	f3ef 8010 	mrs	r0, PRIMASK
 8005818:	b672      	cpsid	i
 800581a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800581c:	46c0      	nop			; (mov r8, r8)
 800581e:	0018      	movs	r0, r3

08005820 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005820:	f380 8810 	msr	PRIMASK, r0
 8005824:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005826:	46c0      	nop			; (mov r8, r8)
	...

08005830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005830:	f3ef 8009 	mrs	r0, PSP
 8005834:	4b0e      	ldr	r3, [pc, #56]	; (8005870 <pxCurrentTCBConst>)
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	3820      	subs	r0, #32
 800583a:	6010      	str	r0, [r2, #0]
 800583c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800583e:	4644      	mov	r4, r8
 8005840:	464d      	mov	r5, r9
 8005842:	4656      	mov	r6, sl
 8005844:	465f      	mov	r7, fp
 8005846:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005848:	b508      	push	{r3, lr}
 800584a:	b672      	cpsid	i
 800584c:	f7ff f94e 	bl	8004aec <vTaskSwitchContext>
 8005850:	b662      	cpsie	i
 8005852:	bc0c      	pop	{r2, r3}
 8005854:	6811      	ldr	r1, [r2, #0]
 8005856:	6808      	ldr	r0, [r1, #0]
 8005858:	3010      	adds	r0, #16
 800585a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800585c:	46a0      	mov	r8, r4
 800585e:	46a9      	mov	r9, r5
 8005860:	46b2      	mov	sl, r6
 8005862:	46bb      	mov	fp, r7
 8005864:	f380 8809 	msr	PSP, r0
 8005868:	3820      	subs	r0, #32
 800586a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800586c:	4718      	bx	r3
 800586e:	46c0      	nop			; (mov r8, r8)

08005870 <pxCurrentTCBConst>:
 8005870:	200006f4 	.word	0x200006f4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005874:	46c0      	nop			; (mov r8, r8)
 8005876:	46c0      	nop			; (mov r8, r8)

08005878 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800587e:	f7ff ffc9 	bl	8005814 <ulSetInterruptMaskFromISR>
 8005882:	0003      	movs	r3, r0
 8005884:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005886:	f7ff f87d 	bl	8004984 <xTaskIncrementTick>
 800588a:	1e03      	subs	r3, r0, #0
 800588c:	d003      	beq.n	8005896 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800588e:	4b06      	ldr	r3, [pc, #24]	; (80058a8 <SysTick_Handler+0x30>)
 8005890:	2280      	movs	r2, #128	; 0x80
 8005892:	0552      	lsls	r2, r2, #21
 8005894:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	0018      	movs	r0, r3
 800589a:	f7ff ffc1 	bl	8005820 <vClearInterruptMaskFromISR>
}
 800589e:	46c0      	nop			; (mov r8, r8)
 80058a0:	46bd      	mov	sp, r7
 80058a2:	b002      	add	sp, #8
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	46c0      	nop			; (mov r8, r8)
 80058a8:	e000ed04 	.word	0xe000ed04

080058ac <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80058b0:	4b0b      	ldr	r3, [pc, #44]	; (80058e0 <prvSetupTimerInterrupt+0x34>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80058b6:	4b0b      	ldr	r3, [pc, #44]	; (80058e4 <prvSetupTimerInterrupt+0x38>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80058bc:	4b0a      	ldr	r3, [pc, #40]	; (80058e8 <prvSetupTimerInterrupt+0x3c>)
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	23fa      	movs	r3, #250	; 0xfa
 80058c2:	0099      	lsls	r1, r3, #2
 80058c4:	0010      	movs	r0, r2
 80058c6:	f7fa fc1f 	bl	8000108 <__udivsi3>
 80058ca:	0003      	movs	r3, r0
 80058cc:	001a      	movs	r2, r3
 80058ce:	4b07      	ldr	r3, [pc, #28]	; (80058ec <prvSetupTimerInterrupt+0x40>)
 80058d0:	3a01      	subs	r2, #1
 80058d2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80058d4:	4b02      	ldr	r3, [pc, #8]	; (80058e0 <prvSetupTimerInterrupt+0x34>)
 80058d6:	2207      	movs	r2, #7
 80058d8:	601a      	str	r2, [r3, #0]
}
 80058da:	46c0      	nop			; (mov r8, r8)
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	e000e010 	.word	0xe000e010
 80058e4:	e000e018 	.word	0xe000e018
 80058e8:	20000004 	.word	0x20000004
 80058ec:	e000e014 	.word	0xe000e014

080058f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80058f8:	2300      	movs	r3, #0
 80058fa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80058fc:	f7fe ff9c 	bl	8004838 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005900:	4b49      	ldr	r3, [pc, #292]	; (8005a28 <pvPortMalloc+0x138>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005908:	f000 f8e0 	bl	8005acc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800590c:	4b47      	ldr	r3, [pc, #284]	; (8005a2c <pvPortMalloc+0x13c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	4013      	ands	r3, r2
 8005914:	d000      	beq.n	8005918 <pvPortMalloc+0x28>
 8005916:	e079      	b.n	8005a0c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d012      	beq.n	8005944 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800591e:	2208      	movs	r2, #8
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	189b      	adds	r3, r3, r2
 8005924:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2207      	movs	r2, #7
 800592a:	4013      	ands	r3, r2
 800592c:	d00a      	beq.n	8005944 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2207      	movs	r2, #7
 8005932:	4393      	bics	r3, r2
 8005934:	3308      	adds	r3, #8
 8005936:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2207      	movs	r2, #7
 800593c:	4013      	ands	r3, r2
 800593e:	d001      	beq.n	8005944 <pvPortMalloc+0x54>
 8005940:	b672      	cpsid	i
 8005942:	e7fe      	b.n	8005942 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d060      	beq.n	8005a0c <pvPortMalloc+0x11c>
 800594a:	4b39      	ldr	r3, [pc, #228]	; (8005a30 <pvPortMalloc+0x140>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	429a      	cmp	r2, r3
 8005952:	d85b      	bhi.n	8005a0c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005954:	4b37      	ldr	r3, [pc, #220]	; (8005a34 <pvPortMalloc+0x144>)
 8005956:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005958:	4b36      	ldr	r3, [pc, #216]	; (8005a34 <pvPortMalloc+0x144>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800595e:	e004      	b.n	800596a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	429a      	cmp	r2, r3
 8005972:	d903      	bls.n	800597c <pvPortMalloc+0x8c>
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1f1      	bne.n	8005960 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800597c:	4b2a      	ldr	r3, [pc, #168]	; (8005a28 <pvPortMalloc+0x138>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	429a      	cmp	r2, r3
 8005984:	d042      	beq.n	8005a0c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2208      	movs	r2, #8
 800598c:	189b      	adds	r3, r3, r2
 800598e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	1ad2      	subs	r2, r2, r3
 80059a0:	2308      	movs	r3, #8
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d916      	bls.n	80059d6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	18d3      	adds	r3, r2, r3
 80059ae:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2207      	movs	r2, #7
 80059b4:	4013      	ands	r3, r2
 80059b6:	d001      	beq.n	80059bc <pvPortMalloc+0xcc>
 80059b8:	b672      	cpsid	i
 80059ba:	e7fe      	b.n	80059ba <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	1ad2      	subs	r2, r2, r3
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	0018      	movs	r0, r3
 80059d2:	f000 f8db 	bl	8005b8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80059d6:	4b16      	ldr	r3, [pc, #88]	; (8005a30 <pvPortMalloc+0x140>)
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	1ad2      	subs	r2, r2, r3
 80059e0:	4b13      	ldr	r3, [pc, #76]	; (8005a30 <pvPortMalloc+0x140>)
 80059e2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80059e4:	4b12      	ldr	r3, [pc, #72]	; (8005a30 <pvPortMalloc+0x140>)
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	4b13      	ldr	r3, [pc, #76]	; (8005a38 <pvPortMalloc+0x148>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d203      	bcs.n	80059f8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80059f0:	4b0f      	ldr	r3, [pc, #60]	; (8005a30 <pvPortMalloc+0x140>)
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	4b10      	ldr	r3, [pc, #64]	; (8005a38 <pvPortMalloc+0x148>)
 80059f6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	4b0b      	ldr	r3, [pc, #44]	; (8005a2c <pvPortMalloc+0x13c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	431a      	orrs	r2, r3
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a0c:	f7fe ff20 	bl	8004850 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2207      	movs	r2, #7
 8005a14:	4013      	ands	r3, r2
 8005a16:	d001      	beq.n	8005a1c <pvPortMalloc+0x12c>
 8005a18:	b672      	cpsid	i
 8005a1a:	e7fe      	b.n	8005a1a <pvPortMalloc+0x12a>
	return pvReturn;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
}
 8005a1e:	0018      	movs	r0, r3
 8005a20:	46bd      	mov	sp, r7
 8005a22:	b006      	add	sp, #24
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	46c0      	nop			; (mov r8, r8)
 8005a28:	20001928 	.word	0x20001928
 8005a2c:	20001934 	.word	0x20001934
 8005a30:	2000192c 	.word	0x2000192c
 8005a34:	20001920 	.word	0x20001920
 8005a38:	20001930 	.word	0x20001930

08005a3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d035      	beq.n	8005aba <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a4e:	2308      	movs	r3, #8
 8005a50:	425b      	negs	r3, r3
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	18d3      	adds	r3, r2, r3
 8005a56:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	4b18      	ldr	r3, [pc, #96]	; (8005ac4 <vPortFree+0x88>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4013      	ands	r3, r2
 8005a66:	d101      	bne.n	8005a6c <vPortFree+0x30>
 8005a68:	b672      	cpsid	i
 8005a6a:	e7fe      	b.n	8005a6a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <vPortFree+0x3c>
 8005a74:	b672      	cpsid	i
 8005a76:	e7fe      	b.n	8005a76 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	4b11      	ldr	r3, [pc, #68]	; (8005ac4 <vPortFree+0x88>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4013      	ands	r3, r2
 8005a82:	d01a      	beq.n	8005aba <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d116      	bne.n	8005aba <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	4b0c      	ldr	r3, [pc, #48]	; (8005ac4 <vPortFree+0x88>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	43db      	mvns	r3, r3
 8005a96:	401a      	ands	r2, r3
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a9c:	f7fe fecc 	bl	8004838 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	4b08      	ldr	r3, [pc, #32]	; (8005ac8 <vPortFree+0x8c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	18d2      	adds	r2, r2, r3
 8005aaa:	4b07      	ldr	r3, [pc, #28]	; (8005ac8 <vPortFree+0x8c>)
 8005aac:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	f000 f86b 	bl	8005b8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005ab6:	f7fe fecb 	bl	8004850 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005aba:	46c0      	nop			; (mov r8, r8)
 8005abc:	46bd      	mov	sp, r7
 8005abe:	b004      	add	sp, #16
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	20001934 	.word	0x20001934
 8005ac8:	2000192c 	.word	0x2000192c

08005acc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005ad2:	23c0      	movs	r3, #192	; 0xc0
 8005ad4:	011b      	lsls	r3, r3, #4
 8005ad6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ad8:	4b26      	ldr	r3, [pc, #152]	; (8005b74 <prvHeapInit+0xa8>)
 8005ada:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2207      	movs	r2, #7
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	d00c      	beq.n	8005afe <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	3307      	adds	r3, #7
 8005ae8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2207      	movs	r2, #7
 8005aee:	4393      	bics	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	1ad2      	subs	r2, r2, r3
 8005af8:	4b1e      	ldr	r3, [pc, #120]	; (8005b74 <prvHeapInit+0xa8>)
 8005afa:	18d3      	adds	r3, r2, r3
 8005afc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b02:	4b1d      	ldr	r3, [pc, #116]	; (8005b78 <prvHeapInit+0xac>)
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b08:	4b1b      	ldr	r3, [pc, #108]	; (8005b78 <prvHeapInit+0xac>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	18d3      	adds	r3, r2, r3
 8005b14:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b16:	2208      	movs	r2, #8
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	1a9b      	subs	r3, r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2207      	movs	r2, #7
 8005b22:	4393      	bics	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	4b14      	ldr	r3, [pc, #80]	; (8005b7c <prvHeapInit+0xb0>)
 8005b2a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005b2c:	4b13      	ldr	r3, [pc, #76]	; (8005b7c <prvHeapInit+0xb0>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2200      	movs	r2, #0
 8005b32:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b34:	4b11      	ldr	r3, [pc, #68]	; (8005b7c <prvHeapInit+0xb0>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	1ad2      	subs	r2, r2, r3
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b4a:	4b0c      	ldr	r3, [pc, #48]	; (8005b7c <prvHeapInit+0xb0>)
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	4b0a      	ldr	r3, [pc, #40]	; (8005b80 <prvHeapInit+0xb4>)
 8005b58:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	4b09      	ldr	r3, [pc, #36]	; (8005b84 <prvHeapInit+0xb8>)
 8005b60:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b62:	4b09      	ldr	r3, [pc, #36]	; (8005b88 <prvHeapInit+0xbc>)
 8005b64:	2280      	movs	r2, #128	; 0x80
 8005b66:	0612      	lsls	r2, r2, #24
 8005b68:	601a      	str	r2, [r3, #0]
}
 8005b6a:	46c0      	nop			; (mov r8, r8)
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	b004      	add	sp, #16
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	46c0      	nop			; (mov r8, r8)
 8005b74:	20000d20 	.word	0x20000d20
 8005b78:	20001920 	.word	0x20001920
 8005b7c:	20001928 	.word	0x20001928
 8005b80:	20001930 	.word	0x20001930
 8005b84:	2000192c 	.word	0x2000192c
 8005b88:	20001934 	.word	0x20001934

08005b8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b94:	4b27      	ldr	r3, [pc, #156]	; (8005c34 <prvInsertBlockIntoFreeList+0xa8>)
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	e002      	b.n	8005ba0 <prvInsertBlockIntoFreeList+0x14>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d8f7      	bhi.n	8005b9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	18d3      	adds	r3, r2, r3
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d108      	bne.n	8005bce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	18d2      	adds	r2, r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	18d2      	adds	r2, r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d118      	bne.n	8005c14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	4b14      	ldr	r3, [pc, #80]	; (8005c38 <prvInsertBlockIntoFreeList+0xac>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d00d      	beq.n	8005c0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	18d2      	adds	r2, r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	e008      	b.n	8005c1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c0a:	4b0b      	ldr	r3, [pc, #44]	; (8005c38 <prvInsertBlockIntoFreeList+0xac>)
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	e003      	b.n	8005c1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d002      	beq.n	8005c2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c2a:	46c0      	nop			; (mov r8, r8)
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	b004      	add	sp, #16
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	46c0      	nop			; (mov r8, r8)
 8005c34:	20001920 	.word	0x20001920
 8005c38:	20001928 	.word	0x20001928

08005c3c <__libc_init_array>:
 8005c3c:	b570      	push	{r4, r5, r6, lr}
 8005c3e:	2600      	movs	r6, #0
 8005c40:	4d0c      	ldr	r5, [pc, #48]	; (8005c74 <__libc_init_array+0x38>)
 8005c42:	4c0d      	ldr	r4, [pc, #52]	; (8005c78 <__libc_init_array+0x3c>)
 8005c44:	1b64      	subs	r4, r4, r5
 8005c46:	10a4      	asrs	r4, r4, #2
 8005c48:	42a6      	cmp	r6, r4
 8005c4a:	d109      	bne.n	8005c60 <__libc_init_array+0x24>
 8005c4c:	2600      	movs	r6, #0
 8005c4e:	f000 f82b 	bl	8005ca8 <_init>
 8005c52:	4d0a      	ldr	r5, [pc, #40]	; (8005c7c <__libc_init_array+0x40>)
 8005c54:	4c0a      	ldr	r4, [pc, #40]	; (8005c80 <__libc_init_array+0x44>)
 8005c56:	1b64      	subs	r4, r4, r5
 8005c58:	10a4      	asrs	r4, r4, #2
 8005c5a:	42a6      	cmp	r6, r4
 8005c5c:	d105      	bne.n	8005c6a <__libc_init_array+0x2e>
 8005c5e:	bd70      	pop	{r4, r5, r6, pc}
 8005c60:	00b3      	lsls	r3, r6, #2
 8005c62:	58eb      	ldr	r3, [r5, r3]
 8005c64:	4798      	blx	r3
 8005c66:	3601      	adds	r6, #1
 8005c68:	e7ee      	b.n	8005c48 <__libc_init_array+0xc>
 8005c6a:	00b3      	lsls	r3, r6, #2
 8005c6c:	58eb      	ldr	r3, [r5, r3]
 8005c6e:	4798      	blx	r3
 8005c70:	3601      	adds	r6, #1
 8005c72:	e7f2      	b.n	8005c5a <__libc_init_array+0x1e>
 8005c74:	08005ecc 	.word	0x08005ecc
 8005c78:	08005ecc 	.word	0x08005ecc
 8005c7c:	08005ecc 	.word	0x08005ecc
 8005c80:	08005ed0 	.word	0x08005ed0

08005c84 <memcpy>:
 8005c84:	2300      	movs	r3, #0
 8005c86:	b510      	push	{r4, lr}
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d100      	bne.n	8005c8e <memcpy+0xa>
 8005c8c:	bd10      	pop	{r4, pc}
 8005c8e:	5ccc      	ldrb	r4, [r1, r3]
 8005c90:	54c4      	strb	r4, [r0, r3]
 8005c92:	3301      	adds	r3, #1
 8005c94:	e7f8      	b.n	8005c88 <memcpy+0x4>

08005c96 <memset>:
 8005c96:	0003      	movs	r3, r0
 8005c98:	1812      	adds	r2, r2, r0
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d100      	bne.n	8005ca0 <memset+0xa>
 8005c9e:	4770      	bx	lr
 8005ca0:	7019      	strb	r1, [r3, #0]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	e7f9      	b.n	8005c9a <memset+0x4>
	...

08005ca8 <_init>:
 8005ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005caa:	46c0      	nop			; (mov r8, r8)
 8005cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cae:	bc08      	pop	{r3}
 8005cb0:	469e      	mov	lr, r3
 8005cb2:	4770      	bx	lr

08005cb4 <_fini>:
 8005cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb6:	46c0      	nop			; (mov r8, r8)
 8005cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cba:	bc08      	pop	{r3}
 8005cbc:	469e      	mov	lr, r3
 8005cbe:	4770      	bx	lr
